"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* binding */ AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   BlockListOptionsBehaviorEnum: () => (/* binding */ BlockListOptionsBehaviorEnum),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   ChannelConfigWithInfoAutomodBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoAutomodBehaviorEnum),\n/* harmony export */   ChannelConfigWithInfoAutomodEnum: () => (/* binding */ ChannelConfigWithInfoAutomodEnum),\n/* harmony export */   ChannelConfigWithInfoBlocklistBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoBlocklistBehaviorEnum),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* binding */ NoiseCancellationSettingsModeEnum),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* binding */ TranscriptionSettingsResponseModeEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* binding */ VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* binding */ getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getOSInfo: () => (/* binding */ getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* binding */ getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* binding */ hasAudio),\n/* harmony export */   hasScreenShare: () => (/* binding */ hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* binding */ hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* binding */ hasVideo),\n/* harmony export */   isPinned: () => (/* binding */ isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twitch-twirp-error-code.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounce.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const AudioSettingsResponseDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const BlockListOptionsBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodEnum = {\n    DISABLED: \"disabled\",\n    SIMPLE: \"simple\",\n    AI: \"AI\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const ChannelConfigWithInfoBlocklistBehaviorEnum = {\n    FLAG: \"flag\",\n    BLOCK: \"block\",\n    SHADOW_BLOCK: \"shadow_block\"\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: \"firebase\",\n    APN: \"apn\",\n    HUAWEI: \"huawei\",\n    XIAOMI: \"xiaomi\"\n};\n/**\n * @export\n */ const NoiseCancellationSettingsModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: \"block-users\",\n    CHANGE_MAX_DURATION: \"change-max-duration\",\n    CREATE_CALL: \"create-call\",\n    CREATE_REACTION: \"create-reaction\",\n    ENABLE_NOISE_CANCELLATION: \"enable-noise-cancellation\",\n    END_CALL: \"end-call\",\n    JOIN_BACKSTAGE: \"join-backstage\",\n    JOIN_CALL: \"join-call\",\n    JOIN_ENDED_CALL: \"join-ended-call\",\n    MUTE_USERS: \"mute-users\",\n    PIN_FOR_EVERYONE: \"pin-for-everyone\",\n    READ_CALL: \"read-call\",\n    REMOVE_CALL_MEMBER: \"remove-call-member\",\n    SCREENSHARE: \"screenshare\",\n    SEND_AUDIO: \"send-audio\",\n    SEND_VIDEO: \"send-video\",\n    START_BROADCAST_CALL: \"start-broadcast-call\",\n    START_RECORD_CALL: \"start-record-call\",\n    START_TRANSCRIPTION_CALL: \"start-transcription-call\",\n    STOP_BROADCAST_CALL: \"stop-broadcast-call\",\n    STOP_RECORD_CALL: \"stop-record-call\",\n    STOP_TRANSCRIPTION_CALL: \"stop-transcription-call\",\n    UPDATE_CALL: \"update-call\",\n    UPDATE_CALL_MEMBER: \"update-call-member\",\n    UPDATE_CALL_PERMISSIONS: \"update-call-permissions\",\n    UPDATE_CALL_SETTINGS: \"update-call-settings\"\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: \"360p\",\n    _480P: \"480p\",\n    _720P: \"720p\",\n    _1080P: \"1080p\",\n    _1440P: \"1440p\",\n    PORTRAIT_360X640: \"portrait-360x640\",\n    PORTRAIT_480X854: \"portrait-480x854\",\n    PORTRAIT_720X1280: \"portrait-720x1280\",\n    PORTRAIT_1080X1920: \"portrait-1080x1920\",\n    PORTRAIT_1440X2560: \"portrait-1440x2560\"\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\n/**\n * @export\n */ const VideoSettingsResponseCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\nclass ErrorFromResponse extends Error {\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Struct\", [\n            {\n                no: 1,\n                name: \"fields\",\n                kind: \"map\",\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: \"message\",\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.isJsonObject)(json)) throw new globalThis.Error(\"Unable to parse message \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json) + \".\");\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Value\", [\n            {\n                no: 1,\n                name: \"null_value\",\n                kind: \"enum\",\n                oneof: \"kind\",\n                T: ()=>[\n                        \"google.protobuf.NullValue\",\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: \"number_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: \"string_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"bool_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: \"struct_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"list_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case \"boolValue\":\n                return message.kind.boolValue;\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == \"number\" && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case \"stringValue\":\n                return message.kind.stringValue;\n            case \"listValue\":\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== \"message\") throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case \"structValue\":\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== \"message\") throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case \"number\":\n                target.kind = {\n                    oneofKind: \"numberValue\",\n                    numberValue: json\n                };\n                break;\n            case \"string\":\n                target.kind = {\n                    oneofKind: \"stringValue\",\n                    stringValue: json\n                };\n                break;\n            case \"boolean\":\n                target.kind = {\n                    oneofKind: \"boolValue\",\n                    boolValue: json\n                };\n                break;\n            case \"object\":\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.ListValue\", [\n            {\n                no: 1,\n                name: \"values\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Timestamp\", [\n            {\n                no: 1,\n                name: \"seconds\",\n                kind: \"scalar\",\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: \"nanos\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new Error(\"Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (message.nanos < 0) throw new Error(\"Unable to encode invalid Timestamp to JSON. Nanos must not be negative.\");\n        let z = \"Z\";\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            else if (nanosStr.substring(6) === \"000\") z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            else z = \".\" + nanosStr + \"Z\";\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== \"string\") throw new Error(\"Unable to parse Timestamp from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_8__.typeofJsonValue)(json) + \".\");\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error(\"Unable to parse Timestamp from JSON. Invalid format.\");\n        let ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) throw new Error(\"Unable to parse Timestamp from JSON. Invalid value.\");\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new globalThis.Error(\"Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n     */ SdkType[SdkType[\"GO\"] = 8] = \"GO\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n     */ SdkType[SdkType[\"PLAIN_JAVASCRIPT\"] = 9] = \"PLAIN_JAVASCRIPT\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */ var CallEndedReason;\n(function(CallEndedReason) {\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n     */ CallEndedReason[CallEndedReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n     */ CallEndedReason[CallEndedReason[\"ENDED\"] = 1] = \"ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n     */ CallEndedReason[CallEndedReason[\"LIVE_ENDED\"] = 2] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n     */ CallEndedReason[CallEndedReason[\"KICKED\"] = 3] = \"KICKED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_SESSION_ENDED = 4;\n     */ CallEndedReason[CallEndedReason[\"SESSION_ENDED\"] = 4] = \"SESSION_ENDED\";\n})(CallEndedReason || (CallEndedReason = {}));\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */ var WebsocketReconnectStrategy;\n(function(WebsocketReconnectStrategy) {\n    /**\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    /**\n     * SDK should maintaining existing publisher/subscriber pc instances\n     * and establish a new WebSocket connection.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FAST\"] = 2] = \"FAST\";\n    /**\n     * SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes\n     * a completely new WebSocket connection, ensuring a comprehensive reset.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_REJOIN = 3;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"REJOIN\"] = 3] = \"REJOIN\";\n    /**\n     * SDK should migrate to a new SFU instance\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 4;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"MIGRATE\"] = 4] = \"MIGRATE\";\n})(WebsocketReconnectStrategy || (WebsocketReconnectStrategy = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallState\", [\n            {\n                no: 1,\n                name: \"participants\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: \"started_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ParticipantCount\", [\n            {\n                no: 1,\n                name: \"total\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"anonymous\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Pin\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Participant\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"published_tracks\",\n                kind: \"enum\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"joined_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: \"track_lookup_prefix\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            },\n            {\n                no: 7,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"is_dominant_speaker\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"audio_level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: \"image\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: \"roles\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.StreamQuality\", [\n            {\n                no: 1,\n                name: \"video_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoDimension\", [\n            {\n                no: 1,\n                name: \"width\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"height\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoLayer\", [\n            {\n                no: 1,\n                name: \"rid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"video_dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: \"bitrate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"fps\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Codec\", [\n            {\n                no: 1,\n                name: \"payload_type\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"fmtp_line\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"clock_rate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"encoding_parameters\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"feedbacks\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.TrackInfo\", [\n            {\n                no: 1,\n                name: \"track_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: \"mid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: \"dtx\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"stereo\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"red\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 10,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Error\", [\n            {\n                no: 1,\n                name: \"code\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ErrorCode\",\n                        ErrorCode,\n                        \"ERROR_CODE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"should_retry\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ClientDetails\", [\n            {\n                no: 1,\n                name: \"sdk\",\n                kind: \"message\",\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: \"os\",\n                kind: \"message\",\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: \"browser\",\n                kind: \"message\",\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: \"device\",\n                kind: \"message\",\n                T: ()=>Device\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Sdk\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.SdkType\",\n                        SdkType,\n                        \"SDK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"major\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"minor\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"patch\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.OS\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"architecture\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Browser\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Device\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Call\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"created_by_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"host_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"created_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: \"updated_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallGrants\", [\n            {\n                no: 1,\n                name: \"can_publish_audio\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"can_publish_video\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"can_screenshare\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Browser: Browser,\n    Call: Call$1,\n    get CallEndedReason () {\n        return CallEndedReason;\n    },\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    Pin: Pin,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    },\n    get WebsocketReconnectStrategy () {\n        return WebsocketReconnectStrategy;\n    }\n});\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StartNoiseCancellationRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */ const StartNoiseCancellationRequest = new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StartNoiseCancellationResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */ const StartNoiseCancellationResponse = new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StopNoiseCancellationRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */ const StopNoiseCancellationRequest = new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.StopNoiseCancellationResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */ const StopNoiseCancellationResponse = new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"subscriber_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"publisher_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"webrtc_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"sdk\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"sdk_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"mute_states\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackMuteState\", [\n            {\n                no: 1,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.AudioMuteChanged\", [\n            {\n                no: 1,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.VideoMuteChanged\", [\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsRequest\", [\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackSubscriptionDetails\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerRequest\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICETrickleResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherRequest\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherResponse\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_10__.ServiceType(\"stream.video.sfu.signal.SignalServer\", [\n    {\n        name: \"SetPublisher\",\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: \"SendAnswer\",\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: \"IceTrickle\",\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: \"UpdateSubscriptions\",\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: \"UpdateMuteStates\",\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: \"IceRestart\",\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: \"SendStats\",\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    },\n    {\n        name: \"StartNoiseCancellation\",\n        options: {},\n        I: StartNoiseCancellationRequest,\n        O: StartNoiseCancellationResponse\n    },\n    {\n        name: \"StopNoiseCancellation\",\n        options: {},\n        I: StopNoiseCancellationRequest,\n        O: StopNoiseCancellationResponse\n    }\n]);\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\n/**\n * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority\n */ var VideoLayerSetting_Priority;\n(function(VideoLayerSetting_Priority) {\n    /**\n     * @generated from protobuf enum value: PRIORITY_HIGH_UNSPECIFIED = 0;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"HIGH_UNSPECIFIED\"] = 0] = \"HIGH_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_LOW = 1;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"LOW\"] = 1] = \"LOW\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_MEDIUM = 2;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"MEDIUM\"] = 2] = \"MEDIUM\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_VERY_LOW = 3;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"VERY_LOW\"] = 3] = \"VERY_LOW\";\n})(VideoLayerSetting_Priority || (VideoLayerSetting_Priority = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuEvent\", [\n            {\n                no: 1,\n                name: \"subscriber_offer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: \"publisher_answer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: \"connection_quality_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: \"audio_level_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: \"ice_trickle\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: \"change_publish_quality\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: \"participant_joined\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: \"participant_left\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: \"dominant_speaker_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: \"join_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: \"health_check_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: \"track_published\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: \"track_unpublished\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: \"error\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: \"call_grants_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: \"go_away\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: \"ice_restart\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: \"pins_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PinsChanged\n            },\n            {\n                no: 23,\n                name: \"call_ended\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallEnded\n            },\n            {\n                no: 24,\n                name: \"participant_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantUpdated\n            },\n            {\n                no: 25,\n                name: \"participant_migration_complete\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantMigrationComplete\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantMigrationComplete$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantMigrationComplete\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */ const ParticipantMigrationComplete = new ParticipantMigrationComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PinsChanged\", [\n            {\n                no: 1,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Error\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            },\n            {\n                no: 5,\n                name: \"reconnect_strategy\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.WebsocketReconnectStrategy\",\n                        WebsocketReconnectStrategy,\n                        \"WEBSOCKET_RECONNECT_STRATEGY_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICERestart\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuRequest\", [\n            {\n                no: 1,\n                name: \"join_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: \"health_check_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>HealthCheckRequest\n            },\n            {\n                no: 3,\n                name: \"leave_call_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>LeaveCallRequest\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeaveCallRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.LeaveCallRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"reason\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.LeaveCallRequest\n */ const LeaveCallRequest = new LeaveCallRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckRequest\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckResponse\", [\n            {\n                no: 1,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackPublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackUnpublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"cause\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackUnpublishReason\",\n                        TrackUnpublishReason,\n                        \"TRACK_UNPUBLISH_REASON_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinRequest\", [\n            {\n                no: 1,\n                name: \"token\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"subscriber_sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"client_details\",\n                kind: \"message\",\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: \"migration\",\n                kind: \"message\",\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: \"fast_reconnect\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 7,\n                name: \"reconnect_details\",\n                kind: \"message\",\n                T: ()=>ReconnectDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReconnectDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ReconnectDetails\", [\n            {\n                no: 1,\n                name: \"strategy\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.WebsocketReconnectStrategy\",\n                        WebsocketReconnectStrategy,\n                        \"WEBSOCKET_RECONNECT_STRATEGY_\"\n                    ]\n            },\n            {\n                no: 3,\n                name: \"announced_tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 4,\n                name: \"subscriptions\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            },\n            {\n                no: 5,\n                name: \"reconnect_attempt\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"from_sfu_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: \"previous_session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ReconnectDetails\n */ const ReconnectDetails = new ReconnectDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Migration\", [\n            {\n                no: 1,\n                name: \"from_sfu_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"announced_tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: \"subscriptions\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinResponse\", [\n            {\n                no: 1,\n                name: \"call_state\",\n                kind: \"message\",\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: \"reconnected\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"fast_reconnect_deadline_seconds\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantJoined\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantLeft\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantUpdated\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */ const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SubscriberOffer\", [\n            {\n                no: 1,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PublisherAnswer\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityChanged\", [\n            {\n                no: 1,\n                name: \"connection_quality_updates\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityInfo\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.DominantSpeakerChanged\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevel\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevelChanged\", [\n            {\n                no: 1,\n                name: \"audio_levels\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioMediaRequest\", [\n            {\n                no: 1,\n                name: \"channel_count\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest\n */ const AudioMediaRequest = new AudioMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>AudioMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoMediaRequest\", [\n            {\n                no: 1,\n                name: \"ideal_height\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 2,\n                name: \"ideal_width\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 3,\n                name: \"ideal_frame_rate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest\n */ const VideoMediaRequest = new VideoMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoLayerSetting\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"active\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"max_bitrate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: \"scale_resolution_down_by\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 5,\n                name: \"priority\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.event.VideoLayerSetting.Priority\",\n                        VideoLayerSetting_Priority,\n                        \"PRIORITY_\"\n                    ]\n            },\n            {\n                no: 6,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: \"max_framerate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>VideoMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayerSetting\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ChangePublishQuality\", [\n            {\n                no: 1,\n                name: \"audio_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: \"video_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallGrantsUpdated\", [\n            {\n                no: 1,\n                name: \"current_grants\",\n                kind: \"message\",\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.GoAway\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.GoAwayReason\",\n                        GoAwayReason,\n                        \"GO_AWAY_REASON_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallEnded\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.CallEndedReason\",\n                        CallEndedReason,\n                        \"CALL_ENDED_REASON_\"\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */ const CallEnded = new CallEnded$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioMediaRequest: AudioMediaRequest,\n    AudioSender: AudioSender,\n    CallEnded: CallEnded,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    LeaveCallRequest: LeaveCallRequest,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    ParticipantMigrationComplete: ParticipantMigrationComplete,\n    ParticipantUpdated: ParticipantUpdated,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    ReconnectDetails: ReconnectDetails,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    get VideoLayerSetting_Priority () {\n        return VideoLayerSetting_Priority;\n    },\n    VideoMediaRequest: VideoMediaRequest,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n     */ startNoiseCancellation(input, options) {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n     */ stopNoiseCancellation(input, options) {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: \"\",\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\nconst withRequestLogger = (logger, level)=>{\n    return {\n        interceptUnary: (next, method, input, options)=>{\n            logger(level, `Calling SFU RPC method ${method.name}`, {\n                input,\n                options\n            });\n            return next(method, input, options);\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000,\n    WS_CLOSED_ABRUPTLY: 1006,\n    WS_POLICY_VIOLATION: 1008\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    let s = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    const jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach((key)=>{\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * Informs if a promise is yet to be resolved or rejected\n */ async function isPromisePending(promise) {\n    const emptyObj = {};\n    return Promise.race([\n        promise,\n        emptyObj\n    ]).then((value)=>value === emptyObj ? true : false, ()=>false);\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline(logger) {\n    const nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        logger(\"warn\", \"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    }\n    // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.product?.toLowerCase() === \"reactnative\";\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger$1;\nlet level = \"info\";\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case \"error\":\n            if (isReactNative()) {\n                message = `ERROR: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.error;\n            break;\n        case \"warn\":\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case \"info\":\n            logMethod = console.info;\n            break;\n        case \"trace\":\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger$1 = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogLevel = ()=>level;\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger$1 || logToConsole;\n    const tags = (withTags || []).filter(Boolean).join(\":\");\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * For each retry, there would be a delay to avoid request bursts toward the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param signal the signal to abort the RPC call and retries loop.\n */ const retryable = async (rpc, signal)=>{\n    let attempt = 0;\n    let result = undefined;\n    do {\n        if (attempt > 0) await sleep(retryInterval(attempt));\n        try {\n            result = await rpc();\n        } catch (err) {\n            const isRequestCancelled = err instanceof _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_13__.RpcError && err.code === _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_14__.TwirpErrorCode[_protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_14__.TwirpErrorCode.cancelled];\n            const isAborted = signal?.aborted ?? false;\n            if (isRequestCancelled || isAborted) throw err;\n            getLogger([\n                \"sfu-client\",\n                \"rpc\"\n            ])(\"debug\", `rpc failed (${attempt})`, err);\n            attempt++;\n        }\n    }while (!result || result.response.error?.shouldRetry);\n    return result;\n};\nconst version = \"1.7.3\";\nconst [major, minor, patch] = version.split(\".\");\nlet sdkInfo = {\n    type: SdkType.PLAIN_JAVASCRIPT,\n    major,\n    minor,\n    patch\n};\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst getOSInfo = ()=>{\n    return osInfo;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getDeviceInfo = ()=>{\n    return deviceInfo;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst getClientDetails = ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: getSdkInfo(),\n            os: getOSInfo(),\n            device: getDeviceInfo()\n        };\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_2__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    return {\n        sdk: getSdkInfo(),\n        browser: {\n            name: browser.name || navigator.userAgent,\n            version: browser.version || \"\"\n        },\n        os: {\n            name: os.name || \"\",\n            version: os.version || \"\",\n            architecture: cpu.architecture || \"\"\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(\" \"),\n            version: \"\"\n        }\n    };\n};\n/**\n * Returns back a list of sorted codecs, with the preferred codec first.\n *\n * @param kind the kind of codec to get.\n * @param preferredCodec the codec to prioritize (vp8, h264, vp9, av1...).\n * @param codecToRemove the codec to exclude from the list.\n */ const getPreferredCodecs = (kind, preferredCodec, codecToRemove)=>{\n    if (!(\"getCapabilities\" in RTCRtpReceiver)) return;\n    const capabilities = RTCRtpReceiver.getCapabilities(kind);\n    if (!capabilities) return;\n    const preferred = [];\n    const partiallyPreferred = [];\n    const unpreferred = [];\n    const preferredCodecMimeType = `${kind}/${preferredCodec.toLowerCase()}`;\n    const codecToRemoveMimeType = codecToRemove && `${kind}/${codecToRemove.toLowerCase()}`;\n    for (const codec of capabilities.codecs){\n        const codecMimeType = codec.mimeType.toLowerCase();\n        const shouldRemoveCodec = codecMimeType === codecToRemoveMimeType;\n        if (shouldRemoveCodec) continue; // skip this codec\n        const isPreferredCodec = codecMimeType === preferredCodecMimeType;\n        if (!isPreferredCodec) {\n            unpreferred.push(codec);\n            continue;\n        }\n        // h264 is a special case, we want to prioritize the baseline codec with\n        // profile-level-id is 42e01f and packetization-mode=0 for maximum\n        // cross-browser compatibility.\n        // this branch covers the other cases, such as vp8.\n        if (codecMimeType !== \"video/h264\") {\n            preferred.push(codec);\n            continue;\n        }\n        const sdpFmtpLine = codec.sdpFmtpLine;\n        if (!sdpFmtpLine || !sdpFmtpLine.includes(\"profile-level-id=42e01f\")) {\n            // this is not the baseline h264 codec, prioritize it lower\n            partiallyPreferred.push(codec);\n            continue;\n        }\n        // packetization-mode mode is optional; when not present it defaults to 0:\n        // https://datatracker.ietf.org/doc/html/rfc6184#section-6.2\n        if (sdpFmtpLine.includes(\"packetization-mode=0\") || !sdpFmtpLine.includes(\"packetization-mode\")) {\n            preferred.unshift(codec);\n        } else {\n            preferred.push(codec);\n        }\n    }\n    // return a sorted list of codecs, with the preferred codecs first\n    return [\n        ...preferred,\n        ...partiallyPreferred,\n        ...unpreferred\n    ];\n};\n/**\n * Returns a generic SDP for the given direction.\n * We use this SDP to send it as part of our JoinRequest so that the SFU\n * can use it to determine client's codec capabilities.\n *\n * @param direction the direction of the transceiver.\n */ const getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver(\"video\", {\n        direction\n    });\n    tempPc.addTransceiver(\"audio\", {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    const sdp = offer.sdp ?? \"\";\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop?.();\n    });\n    tempPc.close();\n    return sdp;\n};\n/**\n * Returns the optimal codec for RN.\n */ const getRNOptimalCodec = ()=>{\n    const osName = getOSInfo()?.name.toLowerCase();\n    // in ipads it was noticed that if vp8 codec is used\n    // then the bytes sent is 0 in the outbound-rtp\n    // so we are forcing h264 codec for ipads\n    if (osName === \"ipados\") return \"h264\";\n    if (osName === \"android\") return \"vp8\";\n    return undefined;\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined,\n    callEnded: undefined,\n    participantUpdated: undefined,\n    participantMigrationComplete: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            \"Dispatcher\"\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message, logTag = \"0\")=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger(\"debug\", `Dispatching ${eventKind}, tag=${logTag}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger(\"warn\", \"Listener failed with error\", e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n        this.offAll = (eventName)=>{\n            if (eventName) {\n                this.subscribers[eventName] = [];\n            } else {\n                this.subscribers = {};\n            }\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.ReplaySubject();\n        this.push = (iceTrickle)=>{\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceTrickle);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceTrickle);\n            } else {\n                const logger = getLogger([\n                    \"sfu-client\"\n                ]);\n                logger(\"warn\", `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n    }\n}\nfunction getIceCandidate(candidate) {\n    if (!candidate.usernameFragment) {\n        // react-native-webrtc doesn't include usernameFragment in the candidate\n        const splittedCandidate = candidate.candidate.split(\" \");\n        const ufragIndex = splittedCandidate.findIndex((s)=>s === \"ufrag\") + 1;\n        const usernameFragment = splittedCandidate[ufragIndex];\n        return JSON.stringify({\n            ...candidate,\n            usernameFragment\n        });\n    } else {\n        return JSON.stringify(candidate.toJSON());\n    }\n}\nconst DEFAULT_BITRATE = 1250000;\nconst defaultTargetResolution = {\n    bitrate: DEFAULT_BITRATE,\n    width: 1280,\n    height: 720\n};\nconst defaultBitratePerRid = {\n    q: 300000,\n    h: 750000,\n    f: DEFAULT_BITRATE\n};\n/**\n * Determines the most optimal video layers for simulcasting\n * for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param targetResolution the expected target resolution.\n * @param publishOptions the publish options for the track.\n */ const findOptimalVideoLayers = (videoTrack, targetResolution = defaultTargetResolution, publishOptions)=>{\n    const optimalVideoLayers = [];\n    const settings = videoTrack.getSettings();\n    const { width: w = 0, height: h = 0 } = settings;\n    const { preferredBitrate, bitrateDownscaleFactor = 2 } = publishOptions || {};\n    const maxBitrate = getComputedMaxBitrate(targetResolution, w, h, preferredBitrate);\n    let downscaleFactor = 1;\n    let bitrateFactor = 1;\n    [\n        \"f\",\n        \"h\",\n        \"q\"\n    ].forEach((rid)=>{\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift({\n            active: true,\n            rid,\n            width: Math.round(w / downscaleFactor),\n            height: Math.round(h / downscaleFactor),\n            maxBitrate: Math.round(maxBitrate / bitrateFactor) || defaultBitratePerRid[rid],\n            scaleResolutionDownBy: downscaleFactor,\n            maxFramerate: 30\n        });\n        downscaleFactor *= 2;\n        bitrateFactor *= bitrateDownscaleFactor;\n    });\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n * @param preferredBitrate the preferred bitrate for the track.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight, preferredBitrate)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight, bitrate: targetBitrate } = targetResolution;\n    const bitrate = preferredBitrate || targetBitrate;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(bitrate * reductionFactor);\n    }\n    return bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (settings, optimalVideoLayers)=>{\n    let layers;\n    const size = Math.max(settings.width || 0, settings.height || 0);\n    if (size <= 320) {\n        // provide only one layer 320x240 (q), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === \"f\");\n    } else if (size <= 640) {\n        // provide two layers, 160x120 (q) and 640x480 (h)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== \"h\");\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    const ridMapping = [\n        \"q\",\n        \"h\",\n        \"f\"\n    ];\n    return layers.map((layer, index)=>({\n            ...layer,\n            rid: ridMapping[index]\n        }));\n};\nconst findOptimalScreenSharingLayers = (videoTrack, publishOptions, defaultMaxBitrate = 3000000)=>{\n    const { screenShareSettings: preferences } = publishOptions || {};\n    const settings = videoTrack.getSettings();\n    return [\n        {\n            active: true,\n            rid: \"q\",\n            width: settings.width || 0,\n            height: settings.height || 0,\n            scaleResolutionDownBy: 1,\n            maxBitrate: preferences?.maxBitrate ?? defaultMaxBitrate,\n            maxFramerate: preferences?.maxFramerate ?? 30\n        }\n    ];\n};\nconst ensureExhausted = (x, message)=>{\n    getLogger([\n        \"helpers\"\n    ])(\"warn\", message, x);\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return \"screenShareStream\";\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return \"screenShareAudioStream\";\n        case TrackType.VIDEO:\n            return \"videoStream\";\n        case TrackType.AUDIO:\n            return \"audioStream\";\n        case TrackType.UNSPECIFIED:\n            throw new Error(\"Track type is unspecified\");\n        default:\n            ensureExhausted(trackType, \"Unknown track type\");\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case \"audio\":\n            return TrackType.AUDIO;\n        case \"video\":\n            return TrackType.VIDEO;\n        case \"screenshare\":\n            return TrackType.SCREEN_SHARE;\n        case \"screenshare_audio\":\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            ensureExhausted(muteType, \"Unknown mute type\");\n    }\n};\nconst toTrackType = (trackType)=>{\n    switch(trackType){\n        case \"TRACK_TYPE_AUDIO\":\n            return TrackType.AUDIO;\n        case \"TRACK_TYPE_VIDEO\":\n            return TrackType.VIDEO;\n        case \"TRACK_TYPE_SCREEN_SHARE\":\n            return TrackType.SCREEN_SHARE;\n        case \"TRACK_TYPE_SCREEN_SHARE_AUDIO\":\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            return undefined;\n    }\n};\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */ const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */ const withCancellation = createRunner(wrapWithCancellation);\nconst pendingPromises = new Map();\nasync function settled(tag) {\n    await pendingPromises.get(tag)?.promise;\n}\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */ function createRunner(wrapper) {\n    return function run(tag, cb) {\n        const { cb: wrapped, onContinued } = wrapper(tag, cb);\n        const pending = pendingPromises.get(tag);\n        pending?.onContinued();\n        const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n        pendingPromises.set(tag, {\n            promise,\n            onContinued\n        });\n        return promise;\n    };\n}\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */ function wrapWithContinuationTracking(tag, cb) {\n    let hasContinuation = false;\n    const wrapped = ()=>cb().finally(()=>{\n            if (!hasContinuation) {\n                pendingPromises.delete(tag);\n            }\n        });\n    const onContinued = ()=>hasContinuation = true;\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */ function wrapWithCancellation(tag, cb) {\n    const ac = new AbortController();\n    const wrapped = ()=>{\n        if (ac.signal.aborted) {\n            return Promise.resolve(\"canceled\");\n        }\n        return cb(ac.signal).finally(()=>{\n            if (!ac.signal.aborted) {\n                pendingPromises.delete(tag);\n            }\n        });\n    };\n    const onContinued = ()=>ac.abort();\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === \"function\";\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n */ const createSubscription = (observable, handler)=>{\n    const subscription = observable.subscribe(handler);\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */ const createSafeAsyncSubscription = (observable, handler)=>{\n    const tag = Symbol();\n    const subscription = observable.subscribe((value)=>{\n        withoutConcurrency(tag, ()=>handler(value));\n    });\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSafeAsyncSubscription: createSafeAsyncSubscription,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue\n});\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    \"client-state\"\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger(\"info\", `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        reason: \"client.disconnectUser() called\"\n                    }).catch((err)=>{\n                        logger(\"error\", `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        /**\n         * This method allows you the get the current value of a state variable.\n         *\n         * @param observable the observable to get the current value of.\n         * @returns the current value of the observable.\n         */ this.getCurrentValue = getCurrentValue;\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */ const hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */ const hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */ const hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */ const hasScreenShareAudio = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */ const isPinned = (p)=>!!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)), role(\"admin\", \"host\", \"speaker\"));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: \"\"\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        // These are tracks that were delivered to the Subscriber's onTrack event\n        // that we couldn't associate with a participant yet.\n        // This happens when the participantJoined event hasn't been received yet.\n        // We keep these tracks around until we can associate them with a participant.\n        this.orphanedTracks = [];\n        this.logger = getLogger([\n            \"CallState\"\n        ]);\n        /**\n         * A list of comparators that are used to sort the participants.\n         *\n         * @private\n         */ this.sortParticipantsBy = defaultSortPreset;\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Sets the time when this call has been ended.\n         * @param endedAt the time when this call has been ended.\n         */ this.setEndedAt = (endedAt)=>{\n            return this.setCurrentValue(this.endedAtSubject, endedAt);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger(\"warn\", `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === \"function\" ? patch(participant) : patch;\n            const updatedParticipant = {\n                // FIXME OL: this is not a deep merge, we might want to revisit this\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         */ this.updateOrAddParticipant = (sessionId, participant)=>{\n            return this.setParticipants((participants)=>{\n                let add = true;\n                const nextParticipants = participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        add = false;\n                        return {\n                            ...p,\n                            ...participant\n                        };\n                    }\n                    return p;\n                });\n                if (add) nextParticipants.push(participant);\n                return nextParticipants;\n            });\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return this.participants;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Adds an orphaned track to the call state.\n         *\n         * @internal\n         *\n         * @param orphanedTrack the orphaned track to add.\n         */ this.registerOrphanedTrack = (orphanedTrack)=>{\n            this.orphanedTracks.push(orphanedTrack);\n        };\n        /**\n         * Removes an orphaned track from the call state.\n         *\n         * @internal\n         *\n         * @param id the ID of the orphaned track to remove.\n         */ this.removeOrphanedTrack = (id)=>{\n            this.orphanedTracks = this.orphanedTracks.filter((o)=>o.id !== id);\n        };\n        /**\n         * Takes all orphaned tracks with the given track lookup prefix.\n         * All orphaned tracks with the given track lookup prefix are removed from the call state.\n         *\n         * @internal\n         *\n         * @param trackLookupPrefix the track lookup prefix to match the orphaned tracks by.\n         */ this.takeOrphanedTracks = (trackLookupPrefix)=>{\n            const orphans = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix === trackLookupPrefix);\n            if (orphans.length > 0) {\n                this.orphanedTracks = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix !== trackLookupPrefix);\n            }\n            return orphans;\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setCurrentValue(this.backstageSubject, call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setEndedAt(call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            const s = this.setCurrentValue(this.sessionSubject, call.session);\n            this.updateParticipantCountFromSession(s);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        /**\n         * Updates the call state with the data received from the SFU server.\n         *\n         * @internal\n         *\n         * @param callState the call state from the SFU server.\n         * @param currentSessionId the session ID of the current user.\n         * @param reconnectDetails optional reconnect details.\n         */ this.updateFromSfuCallState = (callState, currentSessionId, reconnectDetails)=>{\n            const { participants, participantCount, startedAt, pins } = callState;\n            const localPublishedTracks = reconnectDetails?.announcedTracks.map((t)=>t.trackType) ?? [];\n            this.setParticipants(()=>{\n                const participantLookup = this.getParticipantLookupBySessionId();\n                return participants.map((p)=>{\n                    // We need to preserve the local state of the participant\n                    // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                    // as it doesn't exist on the server.\n                    const existingParticipant = participantLookup[p.sessionId];\n                    const isLocalParticipant = p.sessionId === currentSessionId;\n                    return Object.assign({}, existingParticipant, p, {\n                        isLocalParticipant,\n                        publishedTracks: isLocalParticipant ? localPublishedTracks : p.publishedTracks,\n                        viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                            videoTrack: VisibilityState.UNKNOWN,\n                            screenShareTrack: VisibilityState.UNKNOWN\n                        }\n                    });\n                });\n            });\n            this.setParticipantCount(participantCount?.total || 0);\n            this.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n            this.setStartedAt(startedAt ? Timestamp.toDate(startedAt) : new Date());\n            this.setServerSidePins(pins);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastStarted = (event)=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: true,\n                    hls: {\n                        ...egress.hls,\n                        playlist_url: event.hls_playlist_url\n                    }\n                }));\n        };\n        this.updateParticipantCountFromSession = (session)=>{\n            // when in JOINED state, we should use the participant count coming through\n            // the SFU healthcheck event, as it's more accurate.\n            if (!session || this.callingState === CallingState.JOINED) return;\n            const byRoleCount = Object.values(session.participants_count_by_role).reduce((total, countByRole)=>total + countByRole, 0);\n            const participantCount = Math.max(byRoleCount, session.participants.length);\n            this.setParticipantCount(participantCount);\n            this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n        };\n        this.updateFromSessionParticipantCountUpdate = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                return {\n                    ...session,\n                    anonymous_participant_count: event.anonymous_participant_count,\n                    participants_count_by_role: event.participants_count_by_role\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateMembers = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.some((p)=>hasScreenShare(p))), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        // dates\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        // complex objects should work as streams of data\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        /**\n         * Performs shallow comparison of two arrays.\n         * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n         */ const isShallowEqual = (a, b)=>{\n            if (a.length !== b.length) return false;\n            for (const item of a)if (!b.includes(item)) return false;\n            for (const item of b)if (!a.includes(item)) return false;\n            return true;\n        };\n        /**\n         * Creates an Observable from the given subject by piping to the\n         * `distinctUntilChanged()` operator.\n         */ const duc = (subject, comparator)=>subject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(comparator));\n        // primitive values should only emit once the value they hold changes\n        this.anonymousParticipantCount$ = duc(this.anonymousParticipantCountSubject);\n        this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n        this.backstage$ = duc(this.backstageSubject);\n        this.callingState$ = duc(this.callingStateSubject);\n        this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n        this.participantCount$ = duc(this.participantCountSubject);\n        this.recording$ = duc(this.recordingSubject);\n        this.transcribing$ = duc(this.transcribingSubject);\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            \"call.closed_caption\": undefined,\n            \"call.deleted\": undefined,\n            \"call.permission_request\": undefined,\n            \"call.recording_ready\": undefined,\n            \"call.transcription_ready\": undefined,\n            \"call.user_muted\": undefined,\n            \"connection.error\": undefined,\n            \"connection.ok\": undefined,\n            \"health.check\": undefined,\n            \"user.banned\": undefined,\n            \"user.deactivated\": undefined,\n            \"user.deleted\": undefined,\n            \"user.muted\": undefined,\n            \"user.presence.changed\": undefined,\n            \"user.reactivated\": undefined,\n            \"user.unbanned\": undefined,\n            \"user.updated\": undefined,\n            custom: undefined,\n            // events that update call state:\n            \"call.accepted\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.blocked_user\": this.blockUser,\n            \"call.created\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ended\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            \"call.hls_broadcasting_failed\": this.updateFromHLSBroadcastingFailed,\n            \"call.hls_broadcasting_started\": this.updateFromHLSBroadcastStarted,\n            \"call.hls_broadcasting_stopped\": this.updateFromHLSBroadcastStopped,\n            \"call.live_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.member_added\": this.updateFromMemberAdded,\n            \"call.member_removed\": this.updateFromMemberRemoved,\n            \"call.member_updated_permission\": this.updateMembers,\n            \"call.member_updated\": this.updateMembers,\n            \"call.notification\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            \"call.permissions_updated\": this.updateOwnCapabilities,\n            \"call.reaction_new\": this.updateParticipantReaction,\n            \"call.recording_started\": ()=>this.setCurrentValue(this.recordingSubject, true),\n            \"call.recording_stopped\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.recording_failed\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.rejected\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ring\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.missed\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_ended\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_participant_count_updated\": this.updateFromSessionParticipantCountUpdate,\n            \"call.session_participant_joined\": this.updateFromSessionParticipantJoined,\n            \"call.session_participant_left\": this.updateFromSessionParticipantLeft,\n            \"call.session_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.transcription_started\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, true);\n            },\n            \"call.transcription_stopped\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            \"call.transcription_failed\": ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            \"call.unblocked_user\": this.unblockUser,\n            \"call.updated\": (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n}\nconst getRtpMap = (line)=>{\n    // Example: a=rtpmap:110 opus/48000/2\n    const rtpRegex = /^a=rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/;\n    // The first captured group is the payload type number, the second captured group is the encoding name, the third captured group is the clock rate, and the fourth captured group is any additional parameters.\n    const rtpMatch = rtpRegex.exec(line);\n    if (rtpMatch) {\n        return {\n            original: rtpMatch[0],\n            payload: rtpMatch[1],\n            codec: rtpMatch[2]\n        };\n    }\n};\nconst getFmtp = (line)=>{\n    // Example: a=fmtp:111 minptime=10; useinbandfec=1\n    const fmtpRegex = /^a=fmtp:(\\d*) (.*)/;\n    const fmtpMatch = fmtpRegex.exec(line);\n    // The first captured group is the payload type number, the second captured group is any additional parameters.\n    if (fmtpMatch) {\n        return {\n            original: fmtpMatch[0],\n            payload: fmtpMatch[1],\n            config: fmtpMatch[2]\n        };\n    }\n};\n/**\n * gets the media section for the specified media type.\n * The media section contains the media type, port, codec, and payload type.\n * Example: m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n */ const getMedia = (line, mediaType)=>{\n    const regex = new RegExp(`(m=${mediaType} \\\\d+ [\\\\w/]+) ([\\\\d\\\\s]+)`);\n    const match = regex.exec(line);\n    if (match) {\n        return {\n            original: match[0],\n            mediaWithPorts: match[1],\n            codecOrder: match[2]\n        };\n    }\n};\nconst getMediaSection = (sdp, mediaType)=>{\n    let media;\n    const rtpMap = [];\n    const fmtp = [];\n    let isTheRequiredMediaSection = false;\n    sdp.split(/(\\r\\n|\\r|\\n)/).forEach((line)=>{\n        const isValidLine = /^([a-z])=(.*)/.test(line);\n        if (!isValidLine) return;\n        /*\n          NOTE: according to https://www.rfc-editor.org/rfc/rfc8866.pdf\n          Each media description starts with an \"m=\" line and continues to the next media description or the end of the whole session description, whichever comes first\n        */ const type = line[0];\n        if (type === \"m\") {\n            const _media = getMedia(line, mediaType);\n            isTheRequiredMediaSection = !!_media;\n            if (_media) {\n                media = _media;\n            }\n        } else if (isTheRequiredMediaSection && type === \"a\") {\n            const rtpMapLine = getRtpMap(line);\n            const fmtpLine = getFmtp(line);\n            if (rtpMapLine) {\n                rtpMap.push(rtpMapLine);\n            } else if (fmtpLine) {\n                fmtp.push(fmtpLine);\n            }\n        }\n    });\n    if (media) {\n        return {\n            media,\n            rtpMap,\n            fmtp\n        };\n    }\n};\n/**\n * Gets the fmtp line corresponding to opus\n */ const getOpusFmtp = (sdp)=>{\n    const section = getMediaSection(sdp, \"audio\");\n    const rtpMap = section?.rtpMap.find((r)=>r.codec.toLowerCase() === \"opus\");\n    const codecId = rtpMap?.payload;\n    if (codecId) {\n        return section?.fmtp.find((f)=>f.payload === codecId);\n    }\n};\n/**\n * Returns an SDP with DTX enabled or disabled.\n */ const toggleDtx = (sdp, enable)=>{\n    const opusFmtp = getOpusFmtp(sdp);\n    if (opusFmtp) {\n        const matchDtx = /usedtx=(\\d)/.exec(opusFmtp.config);\n        const requiredDtxConfig = `usedtx=${enable ? \"1\" : \"0\"}`;\n        if (matchDtx) {\n            const newFmtp = opusFmtp.original.replace(/usedtx=(\\d)/, requiredDtxConfig);\n            return sdp.replace(opusFmtp.original, newFmtp);\n        } else {\n            const newFmtp = `${opusFmtp.original};${requiredDtxConfig}`;\n            return sdp.replace(opusFmtp.original, newFmtp);\n        }\n    }\n    return sdp;\n};\n/**\n * Enables high-quality audio through SDP munging for the given trackMid.\n *\n * @param sdp the SDP to munge.\n * @param trackMid the trackMid.\n * @param maxBitrate the max bitrate to set.\n */ const enableHighQualityAudio = (sdp, trackMid, maxBitrate = 510000)=>{\n    maxBitrate = Math.max(Math.min(maxBitrate, 510000), 96000);\n    const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_3__.parse(sdp);\n    const audioMedia = parsedSdp.media.find((m)=>m.type === \"audio\" && String(m.mid) === trackMid);\n    if (!audioMedia) return sdp;\n    const opusRtp = audioMedia.rtp.find((r)=>r.codec === \"opus\");\n    if (!opusRtp) return sdp;\n    const opusFmtp = audioMedia.fmtp.find((f)=>f.payload === opusRtp.payload);\n    if (!opusFmtp) return sdp;\n    // enable stereo, if not already enabled\n    if (opusFmtp.config.match(/stereo=(\\d)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/stereo=(\\d)/, \"stereo=1\");\n    } else {\n        opusFmtp.config = `${opusFmtp.config};stereo=1`;\n    }\n    // set maxaveragebitrate, to the given value\n    if (opusFmtp.config.match(/maxaveragebitrate=(\\d*)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/maxaveragebitrate=(\\d*)/, `maxaveragebitrate=${maxBitrate}`);\n    } else {\n        opusFmtp.config = `${opusFmtp.config};maxaveragebitrate=${maxBitrate}`;\n    }\n    return sdp_transform__WEBPACK_IMPORTED_MODULE_3__.write(parsedSdp);\n};\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n *\n * @internal\n */ class Publisher {\n    /**\n     * Constructs a new `Publisher` instance.\n     *\n     * @param connectionConfig the connection configuration to use.\n     * @param sfuClient the SFU client to use.\n     * @param state the call state to use.\n     * @param dispatcher the dispatcher to use.\n     * @param isDtxEnabled whether DTX is enabled.\n     * @param isRedEnabled whether RED is enabled.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.\n     * @param onUnrecoverableError a callback to call when an unrecoverable error occurs.\n     * @param logTag the log tag to use.\n     */ constructor({ connectionConfig, sfuClient, dispatcher, state, isDtxEnabled, isRedEnabled, onUnrecoverableError, logTag }){\n        this.transceiverRegistry = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.publishOptionsPerTrackType = new Map();\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         *\n         * @internal\n         */ this.transceiverInitOrder = [];\n        this.trackKindMapping = {\n            [TrackType.AUDIO]: \"audio\",\n            [TrackType.VIDEO]: \"video\",\n            [TrackType.SCREEN_SHARE]: \"video\",\n            [TrackType.SCREEN_SHARE_AUDIO]: \"audio\",\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.trackLayersCache = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.isIceRestarting = false;\n        this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            pc.addEventListener(\"signalingstatechange\", this.onSignalingStateChange);\n            return pc;\n        };\n        /**\n         * Closes the publisher PeerConnection and cleans up the resources.\n         */ this.close = ({ stopTracks })=>{\n            if (stopTracks) {\n                this.stopPublishing();\n                Object.keys(this.transceiverRegistry).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.transceiverRegistry[trackType] = undefined;\n                });\n                Object.keys(this.trackLayersCache).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.trackLayersCache[trackType] = undefined;\n                });\n            }\n            this.detachEventHandlers();\n            this.pc.close();\n        };\n        /**\n         * Detaches the event handlers from the `RTCPeerConnection`.\n         * This is useful when we want to replace the `RTCPeerConnection`\n         * instance with a new one (in case of migration).\n         */ this.detachEventHandlers = ()=>{\n            this.unsubscribeOnIceRestart();\n            this.pc.removeEventListener(\"icecandidate\", this.onIceCandidate);\n            this.pc.removeEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            this.pc.removeEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            this.pc.removeEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            this.pc.removeEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            this.pc.removeEventListener(\"signalingstatechange\", this.onSignalingStateChange);\n        };\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         * @param opts the optional publish options to use.\n         */ this.publishStream = async (mediaStream, track, trackType, opts = {})=>{\n            if (track.readyState === \"ended\") {\n                throw new Error(`Can't publish a track that has ended already.`);\n            }\n            let transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track && t.sender.track?.kind === this.trackKindMapping[trackType]);\n            /**\n             * An event handler which listens for the 'ended' event on the track.\n             * Once the track has ended, it will notify the SFU and update the state.\n             */ const handleTrackEnded = ()=>{\n                this.logger(\"info\", `Track ${TrackType[trackType]} has ended abruptly, notifying the SFU`);\n                // cleanup, this event listener needs to run only once.\n                track.removeEventListener(\"ended\", handleTrackEnded);\n                this.notifyTrackMuteStateChanged(mediaStream, trackType, true).catch((err)=>this.logger(\"warn\", `Couldn't notify track mute state`, err));\n            };\n            if (!transceiver) {\n                const { settings } = this.state;\n                const targetResolution = settings?.video.target_resolution;\n                const screenShareBitrate = settings?.screensharing.target_resolution?.bitrate;\n                const videoEncodings = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution, opts) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, opts, screenShareBitrate) : undefined;\n                // listen for 'ended' event on the track as it might be ended abruptly\n                // by an external factor as permission revokes, device disconnected, etc.\n                // keep in mind that `track.stop()` doesn't trigger this event.\n                track.addEventListener(\"ended\", handleTrackEnded);\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                transceiver = this.pc.addTransceiver(track, {\n                    direction: \"sendonly\",\n                    streams: trackType === TrackType.VIDEO || trackType === TrackType.SCREEN_SHARE ? [\n                        mediaStream\n                    ] : undefined,\n                    sendEncodings: videoEncodings\n                });\n                this.logger(\"debug\", `Added ${TrackType[trackType]} transceiver`);\n                this.transceiverInitOrder.push(trackType);\n                this.transceiverRegistry[trackType] = transceiver;\n                this.publishOptionsPerTrackType.set(trackType, opts);\n                const { preferredCodec } = opts;\n                const codec = isReactNative() && trackType === TrackType.VIDEO && !preferredCodec ? getRNOptimalCodec() : preferredCodec;\n                const codecPreferences = \"setCodecPreferences\" in transceiver ? this.getCodecPreferences(trackType, codec) : undefined;\n                if (codecPreferences) {\n                    this.logger(\"info\", `Setting ${TrackType[trackType]} codec preferences`, codecPreferences);\n                    try {\n                        transceiver.setCodecPreferences(codecPreferences);\n                    } catch (err) {\n                        this.logger(\"warn\", `Couldn't set codec preferences`, err);\n                    }\n                }\n            } else {\n                const previousTrack = transceiver.sender.track;\n                // don't stop the track if we are re-publishing the same track\n                if (previousTrack && previousTrack !== track) {\n                    previousTrack.stop();\n                    previousTrack.removeEventListener(\"ended\", handleTrackEnded);\n                    track.addEventListener(\"ended\", handleTrackEnded);\n                }\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                await transceiver.sender.replaceTrack(track);\n            }\n            await this.notifyTrackMuteStateChanged(mediaStream, trackType, false);\n        };\n        /**\n         * Stops publishing the given track type to the SFU, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         * @param trackType the track type to unpublish.\n         * @param stopTrack specifies whether track should be stopped or just disabled\n         */ this.unpublishStream = async (trackType, stopTrack)=>{\n            const transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track);\n            if (transceiver && transceiver.sender.track && (stopTrack ? transceiver.sender.track.readyState === \"live\" : transceiver.sender.track.enabled)) {\n                stopTrack ? transceiver.sender.track.stop() : transceiver.sender.track.enabled = false;\n                // We don't need to notify SFU if unpublishing in response to remote soft mute\n                if (this.state.localParticipant?.publishedTracks.includes(trackType)) {\n                    await this.notifyTrackMuteStateChanged(undefined, trackType, true);\n                }\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check.\n         */ this.isPublishing = (trackType)=>{\n            const transceiver = this.transceiverRegistry[trackType];\n            if (!transceiver || !transceiver.sender) return false;\n            const track = transceiver.sender.track;\n            return !!track && track.readyState === \"live\" && track.enabled;\n        };\n        this.notifyTrackMuteStateChanged = async (mediaStream, trackType, isMuted)=>{\n            await this.sfuClient.updateMuteState(trackType, isMuted);\n            const audioOrVideoOrScreenShareStream = trackTypeToParticipantStreamKey(trackType);\n            if (!audioOrVideoOrScreenShareStream) return;\n            if (isMuted) {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>({\n                        publishedTracks: p.publishedTracks.filter((t)=>t !== trackType),\n                        [audioOrVideoOrScreenShareStream]: undefined\n                    }));\n            } else {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>{\n                    return {\n                        publishedTracks: p.publishedTracks.includes(trackType) ? p.publishedTracks : [\n                            ...p.publishedTracks,\n                            trackType\n                        ],\n                        [audioOrVideoOrScreenShareStream]: mediaStream\n                    };\n                });\n            }\n        };\n        /**\n         * Stops publishing all tracks and stop all tracks.\n         */ this.stopPublishing = ()=>{\n            this.logger(\"debug\", \"Stopping publishing all tracks\");\n            this.pc.getSenders().forEach((s)=>{\n                s.track?.stop();\n                if (this.pc.signalingState !== \"closed\") {\n                    this.pc.removeTrack(s);\n                }\n            });\n        };\n        this.updateVideoPublishQuality = async (enabledLayers)=>{\n            this.logger(\"info\", \"Update publish quality, requested layers by SFU:\", enabledLayers);\n            const videoSender = this.transceiverRegistry[TrackType.VIDEO]?.sender;\n            if (!videoSender) {\n                this.logger(\"warn\", \"Update publish quality, no video sender found.\");\n                return;\n            }\n            const params = videoSender.getParameters();\n            if (params.encodings.length === 0) {\n                this.logger(\"warn\", \"Update publish quality, No suitable video encoding quality found\");\n                return;\n            }\n            let changed = false;\n            let enabledRids = enabledLayers.filter((ly)=>ly.active).map((ly)=>ly.name);\n            params.encodings.forEach((enc)=>{\n                // flip 'active' flag only when necessary\n                const shouldEnable = enabledRids.includes(enc.rid);\n                if (shouldEnable !== enc.active) {\n                    enc.active = shouldEnable;\n                    changed = true;\n                }\n                if (shouldEnable) {\n                    let layer = enabledLayers.find((vls)=>vls.name === enc.rid);\n                    if (layer !== undefined) {\n                        if (layer.scaleResolutionDownBy >= 1 && layer.scaleResolutionDownBy !== enc.scaleResolutionDownBy) {\n                            this.logger(\"debug\", \"[dynascale]: setting scaleResolutionDownBy from server\", \"layer\", layer.name, \"scale-resolution-down-by\", layer.scaleResolutionDownBy);\n                            enc.scaleResolutionDownBy = layer.scaleResolutionDownBy;\n                            changed = true;\n                        }\n                        if (layer.maxBitrate > 0 && layer.maxBitrate !== enc.maxBitrate) {\n                            this.logger(\"debug\", \"[dynascale] setting max-bitrate from the server\", \"layer\", layer.name, \"max-bitrate\", layer.maxBitrate);\n                            enc.maxBitrate = layer.maxBitrate;\n                            changed = true;\n                        }\n                        if (layer.maxFramerate > 0 && layer.maxFramerate !== enc.maxFramerate) {\n                            this.logger(\"debug\", \"[dynascale]: setting maxFramerate from server\", \"layer\", layer.name, \"max-framerate\", layer.maxFramerate);\n                            enc.maxFramerate = layer.maxFramerate;\n                            changed = true;\n                        }\n                    }\n                }\n            });\n            const activeLayers = params.encodings.filter((e)=>e.active);\n            if (changed) {\n                await videoSender.setParameters(params);\n                this.logger(\"info\", `Update publish quality, enabled rids: `, activeLayers);\n            } else {\n                this.logger(\"info\", `Update publish quality, no change: `, activeLayers);\n            }\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        this.getCodecPreferences = (trackType, preferredCodec)=>{\n            if (trackType === TrackType.VIDEO) {\n                return getPreferredCodecs(\"video\", preferredCodec || \"vp8\");\n            }\n            if (trackType === TrackType.AUDIO) {\n                const defaultAudioCodec = this.isRedEnabled ? \"red\" : \"opus\";\n                const codecToRemove = !this.isRedEnabled ? \"red\" : undefined;\n                return getPreferredCodecs(\"audio\", preferredCodec ?? defaultAudioCodec, codecToRemove);\n            }\n        };\n        this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                this.logger(\"debug\", \"null ice candidate\");\n                return;\n            }\n            this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.PUBLISHER_UNSPECIFIED\n            }).catch((err)=>{\n                this.logger(\"warn\", `ICETrickle failed`, err);\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger(\"debug\", \"Restarting ICE connection\");\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === \"have-local-offer\") {\n                this.logger(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        this.onNegotiationNeeded = ()=>{\n            this.negotiate().catch((err)=>{\n                this.logger(\"error\", `Negotiation failed.`, err);\n                this.onUnrecoverableError?.();\n            });\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            const offer = await this.pc.createOffer(options);\n            let sdp = this.mungeCodecs(offer.sdp);\n            if (sdp && this.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n                sdp = this.enableHighQualityAudio(sdp);\n            }\n            // set the munged SDP back to the offer\n            offer.sdp = sdp;\n            const trackInfos = this.getAnnouncedTracks(offer.sdp);\n            if (trackInfos.length === 0) {\n                throw new Error(`Can't negotiate without announcing any tracks`);\n            }\n            this.isIceRestarting = options?.iceRestart ?? false;\n            await this.pc.setLocalDescription(offer);\n            try {\n                const { response } = await this.sfuClient.setPublisher({\n                    sdp: offer.sdp || \"\",\n                    tracks: trackInfos\n                });\n                if (response.error) throw new Error(response.error.message);\n                await this.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: response.sdp\n                });\n            } finally{\n                this.isIceRestarting = false;\n            }\n            this.sfuClient.iceTrickleBuffer.publisherCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    this.logger(\"warn\", `ICE candidate error`, e, candidate);\n                }\n            });\n        };\n        this.enableHighQualityAudio = (sdp)=>{\n            const transceiver = this.transceiverRegistry[TrackType.SCREEN_SHARE_AUDIO];\n            if (!transceiver) return sdp;\n            const mid = this.extractMid(transceiver, sdp, TrackType.SCREEN_SHARE_AUDIO);\n            return enableHighQualityAudio(sdp, mid);\n        };\n        this.mungeCodecs = (sdp)=>{\n            if (sdp) {\n                sdp = toggleDtx(sdp, this.isDtxEnabled);\n            }\n            return sdp;\n        };\n        this.extractMid = (transceiver, sdp, trackType)=>{\n            if (transceiver.mid) return transceiver.mid;\n            if (!sdp) {\n                this.logger(\"warn\", \"No SDP found. Returning empty mid\");\n                return \"\";\n            }\n            this.logger(\"debug\", `No 'mid' found for track. Trying to find it from the Offer SDP`);\n            const track = transceiver.sender.track;\n            const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_3__.parse(sdp);\n            const media = parsedSdp.media.find((m)=>{\n                return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n                (m.msid?.includes(track.id) ?? true);\n            });\n            if (typeof media?.mid === \"undefined\") {\n                this.logger(\"debug\", `No mid found in SDP for track type ${track.kind} and id ${track.id}. Attempting to find it heuristically`);\n                const heuristicMid = this.transceiverInitOrder.indexOf(trackType);\n                if (heuristicMid !== -1) {\n                    return String(heuristicMid);\n                }\n                this.logger(\"debug\", \"No heuristic mid found. Returning empty mid\");\n                return \"\";\n            }\n            return String(media.mid);\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         *\n         * @internal\n         * @param sdp an optional SDP to extract the `mid` from.\n         */ this.getAnnouncedTracks = (sdp)=>{\n            sdp = sdp || this.pc.localDescription?.sdp;\n            const { settings } = this.state;\n            const targetResolution = settings?.video.target_resolution;\n            return this.pc.getTransceivers().filter((t)=>t.direction === \"sendonly\" && t.sender.track).map((transceiver)=>{\n                const trackType = Number(Object.keys(this.transceiverRegistry).find((key)=>this.transceiverRegistry[key] === transceiver));\n                const track = transceiver.sender.track;\n                let optimalLayers;\n                const isTrackLive = track.readyState === \"live\";\n                if (isTrackLive) {\n                    const publishOpts = this.publishOptionsPerTrackType.get(trackType);\n                    optimalLayers = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution, publishOpts) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, publishOpts) : [];\n                    this.trackLayersCache[trackType] = optimalLayers;\n                } else {\n                    // we report the last known optimal layers for ended tracks\n                    optimalLayers = this.trackLayersCache[trackType] || [];\n                    this.logger(\"debug\", `Track ${TrackType[trackType]} is ended. Announcing last known optimal layers`, optimalLayers);\n                }\n                const layers = optimalLayers.map((optimalLayer)=>({\n                        rid: optimalLayer.rid || \"\",\n                        bitrate: optimalLayer.maxBitrate || 0,\n                        fps: optimalLayer.maxFramerate || 0,\n                        quality: this.ridToVideoQuality(optimalLayer.rid || \"\"),\n                        videoDimension: {\n                            width: optimalLayer.width,\n                            height: optimalLayer.height\n                        }\n                    }));\n                const isAudioTrack = [\n                    TrackType.AUDIO,\n                    TrackType.SCREEN_SHARE_AUDIO\n                ].includes(trackType);\n                const trackSettings = track.getSettings();\n                const isStereo = isAudioTrack && trackSettings.channelCount === 2;\n                return {\n                    trackId: track.id,\n                    layers: layers,\n                    trackType,\n                    mid: this.extractMid(transceiver, sdp, trackType),\n                    stereo: isStereo,\n                    dtx: isAudioTrack && this.isDtxEnabled,\n                    red: isAudioTrack && this.isRedEnabled,\n                    muted: !isTrackLive\n                };\n            });\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            this.logger(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            this.logger(\"debug\", `ICE Connection state changed to`, state);\n            if (this.state.callingState === CallingState.RECONNECTING) return;\n            if (state === \"failed\" || state === \"disconnected\") {\n                this.logger(\"debug\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    this.logger(\"error\", `ICE restart error`, e);\n                    this.onUnrecoverableError?.();\n                });\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            this.logger(\"debug\", `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        this.onSignalingStateChange = ()=>{\n            this.logger(\"debug\", `Signaling state changed`, this.pc.signalingState);\n        };\n        this.ridToVideoQuality = (rid)=>{\n            return rid === \"q\" ? VideoQuality.LOW_UNSPECIFIED : rid === \"h\" ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n        };\n        this.logger = getLogger([\n            \"Publisher\",\n            logTag\n        ]);\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.isDtxEnabled = isDtxEnabled;\n        this.isRedEnabled = isRedEnabled;\n        this.onUnrecoverableError = onUnrecoverableError;\n        this.unsubscribeOnIceRestart = dispatcher.on(\"iceRestart\", (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            this.restartIce().catch((err)=>{\n                this.logger(\"warn\", `ICERestart failed`, err);\n                this.onUnrecoverableError?.();\n            });\n        });\n    }\n}\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n *\n * @internal\n */ class Subscriber {\n    /**\n     * Constructs a new `Subscriber` instance.\n     *\n     * @param sfuClient the SFU client to use.\n     * @param dispatcher the dispatcher to use.\n     * @param state the state of the call.\n     * @param connectionConfig the connection configuration to use.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.\n     * @param onUnrecoverableError a callback to call when an unrecoverable error occurs.\n     * @param logTag a tag to use for logging.\n     */ constructor({ sfuClient, dispatcher, state, connectionConfig, onUnrecoverableError, logTag }){\n        this.isIceRestarting = false;\n        /**\n         * Creates a new `RTCPeerConnection` instance with the given configuration.\n         *\n         * @param connectionConfig the connection configuration to use.\n         */ this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"track\", this.handleOnTrack);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            return pc;\n        };\n        /**\n         * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.\n         */ this.close = ()=>{\n            this.detachEventHandlers();\n            this.pc.close();\n        };\n        /**\n         * Detaches the event handlers from the `RTCPeerConnection`.\n         * This is useful when we want to replace the `RTCPeerConnection`\n         * instance with a new one (in case of migration).\n         */ this.detachEventHandlers = ()=>{\n            this.unregisterOnSubscriberOffer();\n            this.unregisterOnIceRestart();\n            this.pc.removeEventListener(\"icecandidate\", this.onIceCandidate);\n            this.pc.removeEventListener(\"track\", this.handleOnTrack);\n            this.pc.removeEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            this.pc.removeEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            this.pc.removeEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger(\"debug\", \"Restarting ICE connection\");\n            if (this.pc.signalingState === \"have-remote-offer\") {\n                this.logger(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            if (this.pc.connectionState === \"new\") {\n                this.logger(\"debug\", `ICE connection is not yet established, skipping restart.`);\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            try {\n                this.isIceRestarting = true;\n                await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, rawTrackType] = primaryStream.id.split(\":\");\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            this.logger(\"debug\", `[onTrack]: Got remote ${rawTrackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            const trackDebugInfo = `${participantToUpdate?.userId} ${rawTrackType}:${trackId}`;\n            e.track.addEventListener(\"mute\", ()=>{\n                this.logger(\"info\", `[onTrack]: Track muted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener(\"unmute\", ()=>{\n                this.logger(\"info\", `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener(\"ended\", ()=>{\n                this.logger(\"info\", `[onTrack]: Track ended: ${trackDebugInfo}`);\n                this.state.removeOrphanedTrack(primaryStream.id);\n            });\n            const trackType = toTrackType(rawTrackType);\n            if (!trackType) {\n                return this.logger(\"error\", `Unknown track type: ${rawTrackType}`);\n            }\n            if (!participantToUpdate) {\n                this.logger(\"warn\", `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                this.state.registerOrphanedTrack({\n                    id: primaryStream.id,\n                    trackLookupPrefix: trackId,\n                    track: primaryStream,\n                    trackType\n                });\n                return;\n            }\n            const streamKindProp = trackTypeToParticipantStreamKey(trackType);\n            if (!streamKindProp) {\n                this.logger(\"error\", `Unknown track type: ${rawTrackType}`);\n                return;\n            }\n            const previousStream = participantToUpdate[streamKindProp];\n            if (previousStream) {\n                this.logger(\"info\", `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n        };\n        this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                this.logger(\"debug\", \"null ice candidate\");\n                return;\n            }\n            this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.SUBSCRIBER\n            }).catch((err)=>{\n                this.logger(\"warn\", `ICETrickle failed`, err);\n            });\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            this.logger(\"info\", `Received subscriberOffer`, subscriberOffer);\n            await this.pc.setRemoteDescription({\n                type: \"offer\",\n                sdp: subscriberOffer.sdp\n            });\n            this.sfuClient.iceTrickleBuffer.subscriberCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    this.logger(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n            const answer = await this.pc.createAnswer();\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || \"\"\n            });\n            this.isIceRestarting = false;\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            this.logger(\"debug\", `ICE connection state changed`, state);\n            if (this.state.callingState === CallingState.RECONNECTING) return;\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            if (state === \"failed\" || state === \"disconnected\") {\n                this.logger(\"debug\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    this.logger(\"error\", `ICE restart failed`, e);\n                    this.onUnrecoverableError?.();\n                });\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            this.logger(\"debug\", `ICE gathering state changed`, this.pc.iceGatheringState);\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            this.logger(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.logger = getLogger([\n            \"Subscriber\",\n            logTag\n        ]);\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.onUnrecoverableError = onUnrecoverableError;\n        this.pc = this.createPeerConnection(connectionConfig);\n        const subscriberOfferConcurrencyTag = Symbol(\"subscriberOffer\");\n        this.unregisterOnSubscriberOffer = dispatcher.on(\"subscriberOffer\", (subscriberOffer)=>{\n            withoutConcurrency(subscriberOfferConcurrencyTag, ()=>{\n                return this.negotiate(subscriberOffer);\n            }).catch((err)=>{\n                this.logger(\"error\", `Negotiation failed.`, err);\n            });\n        });\n        const iceRestartConcurrencyTag = Symbol(\"iceRestart\");\n        this.unregisterOnIceRestart = dispatcher.on(\"iceRestart\", (iceRestart)=>{\n            withoutConcurrency(iceRestartConcurrencyTag, async ()=>{\n                if (iceRestart.peerType !== PeerType.SUBSCRIBER) return;\n                await this.restartIce();\n            }).catch((err)=>{\n                this.logger(\"error\", `ICERestart failed`, err);\n                this.onUnrecoverableError?.();\n            });\n        });\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const { endpoint, onMessage, logTag } = opts;\n    const logger = getLogger([\n        \"SfuClientWS\",\n        logTag\n    ]);\n    const ws = new WebSocket(endpoint);\n    ws.binaryType = \"arraybuffer\"; // do we need this?\n    ws.addEventListener(\"error\", (e)=>{\n        logger(\"error\", \"Signaling WS channel error\", e);\n    });\n    ws.addEventListener(\"close\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is closed\", e);\n    });\n    ws.addEventListener(\"open\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is open\", e);\n    });\n    ws.addEventListener(\"message\", (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            logger(\"error\", \"Failed to decode a message. Check whether the Proto models match.\", {\n                event: e,\n                error: err\n            });\n        }\n    });\n    return ws;\n};\n/**\n * Creates a new promise with resolvers.\n *\n * Based on:\n * - https://github.com/tc39/proposal-promise-with-resolvers/blob/main/polyfills.js\n */ const promiseWithResolvers = ()=>{\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    let isResolved = false;\n    let isRejected = false;\n    const resolver = (value)=>{\n        isResolved = true;\n        resolve(value);\n    };\n    const rejecter = (reason)=>{\n        isRejected = true;\n        reject(reason);\n    };\n    return {\n        promise,\n        resolve: resolver,\n        reject: rejecter,\n        isResolved,\n        isRejected\n    };\n};\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     */ constructor({ dispatcher, credentials, sessionId, logTag, joinResponseTimeout = 5000, onSignalClose, streamClient }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the Publisher and Subscriber Peer Connections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * Flag to indicate if the client is in the process of leaving the call.\n         * This is set to `true` when the user initiates the leave process.\n         */ this.isLeaving = false;\n        this.pingIntervalInMs = 10 * 1000;\n        this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n        this.restoreWebSocketConcurrencyTag = Symbol(\"recoverWebSocket\");\n        /**\n         * Promise that resolves when the JoinResponse is received.\n         * Rejects after a certain threshold if the response is not received.\n         */ this.joinResponseTask = promiseWithResolvers();\n        /**\n         * A controller to abort the current requests.\n         */ this.abortController = new AbortController();\n        this.createWebSocket = ()=>{\n            this.signalWs = createWebSocketSignalChannel({\n                logTag: this.logTag,\n                endpoint: `${this.credentials.server.ws_endpoint}?tag=${this.logTag}`,\n                onMessage: (message)=>{\n                    this.lastMessageTimestamp = new Date();\n                    this.scheduleConnectionCheck();\n                    this.dispatcher.dispatch(message, this.logTag);\n                }\n            });\n            this.signalWs.addEventListener(\"close\", this.handleWebSocketClose);\n            this.signalWs.addEventListener(\"error\", this.restoreWebSocket);\n            this.signalReady = new Promise((resolve)=>{\n                const onOpen = ()=>{\n                    this.signalWs.removeEventListener(\"open\", onOpen);\n                    resolve(this.signalWs);\n                };\n                this.signalWs.addEventListener(\"open\", onOpen);\n            });\n        };\n        this.cleanUpWebSocket = ()=>{\n            this.signalWs.removeEventListener(\"error\", this.restoreWebSocket);\n            this.signalWs.removeEventListener(\"close\", this.handleWebSocketClose);\n        };\n        this.restoreWebSocket = ()=>{\n            withoutConcurrency(this.restoreWebSocketConcurrencyTag, async ()=>{\n                await this.networkAvailableTask?.promise;\n                this.logger(\"debug\", \"Restoring SFU WS connection\");\n                this.cleanUpWebSocket();\n                await sleep(500);\n                this.createWebSocket();\n            }).catch((err)=>this.logger(\"debug\", `Can't restore WS connection`, err));\n        };\n        this.handleWebSocketClose = ()=>{\n            this.signalWs.removeEventListener(\"close\", this.handleWebSocketClose);\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            this.onSignalClose?.();\n        };\n        this.close = (code = StreamSfuClient.NORMAL_CLOSURE, reason)=>{\n            if (this.signalWs.readyState === WebSocket.OPEN) {\n                this.logger(\"debug\", `Closing SFU WS connection: ${code} - ${reason}`);\n                this.signalWs.close(code, `js-client: ${reason}`);\n                this.cleanUpWebSocket();\n            }\n            this.dispose();\n        };\n        this.dispose = ()=>{\n            this.logger(\"debug\", \"Disposing SFU client\");\n            this.unsubscribeIceTrickle();\n            this.unsubscribeNetworkChanged();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            clearTimeout(this.migrateAwayTimeout);\n            this.abortController.abort();\n            this.migrationTask?.resolve();\n        };\n        this.leaveAndClose = async (reason)=>{\n            await this.joinTask;\n            try {\n                this.isLeaving = true;\n                await this.notifyLeave(reason);\n            } catch (err) {\n                this.logger(\"debug\", \"Error notifying SFU about leaving call\", err);\n            }\n            this.close(StreamSfuClient.NORMAL_CLOSURE, reason.substring(0, 115));\n        };\n        this.updateSubscriptions = async (tracks)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks\n                }), this.abortController.signal);\n        };\n        this.setPublisher = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendAnswer = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceTrickle = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceRestart = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.updateMuteState = async (trackType, muted)=>{\n            await this.joinTask;\n            return this.updateMuteStates({\n                muteStates: [\n                    {\n                        trackType,\n                        muted\n                    }\n                ]\n            });\n        };\n        this.updateMuteStates = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateMuteStates({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendStats = async (stats)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.sendStats({\n                    ...stats,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.startNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.startNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.stopNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.stopNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.enterMigration = async (opts = {})=>{\n            this.isLeaving = true;\n            const { timeout = 7 * 1000 } = opts;\n            this.migrationTask?.reject(new Error(\"Cancelled previous migration\"));\n            const task = this.migrationTask = promiseWithResolvers();\n            const unsubscribe = this.dispatcher.on(\"participantMigrationComplete\", ()=>{\n                unsubscribe();\n                clearTimeout(this.migrateAwayTimeout);\n                task.resolve();\n            });\n            this.migrateAwayTimeout = setTimeout(()=>{\n                unsubscribe();\n                task.reject(new Error(`Migration (${this.logTag}) failed to complete in ${timeout}ms`));\n            }, timeout);\n            return task.promise;\n        };\n        this.join = async (data)=>{\n            // wait for the signal web socket to be ready before sending \"joinRequest\"\n            await this.signalReady;\n            if (this.joinResponseTask.isResolved || this.joinResponseTask.isRejected) {\n                // we need to lock the RPC requests until we receive a JoinResponse.\n                // that's why we have this primitive lock mechanism.\n                // the client starts with already initialized joinResponseTask,\n                // and this code creates a new one for the next join request.\n                this.joinResponseTask = promiseWithResolvers();\n            }\n            // capture a reference to the current joinResponseTask as it might\n            // be replaced with a new one in case a second join request is made\n            const current = this.joinResponseTask;\n            let timeoutId;\n            const unsubscribe = this.dispatcher.on(\"joinResponse\", (joinResponse)=>{\n                this.logger(\"debug\", \"Received joinResponse\", joinResponse);\n                clearTimeout(timeoutId);\n                unsubscribe();\n                this.keepAlive();\n                current.resolve(joinResponse);\n            });\n            timeoutId = setTimeout(()=>{\n                unsubscribe();\n                current.reject(new Error('Waiting for \"joinResponse\" has timed out'));\n            }, this.joinResponseTimeout);\n            await this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"joinRequest\",\n                    joinRequest: JoinRequest.create({\n                        ...data,\n                        sessionId: this.sessionId,\n                        token: this.credentials.token\n                    })\n                }\n            }));\n            return current.promise;\n        };\n        this.ping = async ()=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"healthCheckRequest\",\n                    healthCheckRequest: {}\n                }\n            }));\n        };\n        this.notifyLeave = async (reason)=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"leaveCallRequest\",\n                    leaveCallRequest: {\n                        sessionId: this.sessionId,\n                        reason\n                    }\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            await this.signalReady; // wait for the signal ws to be open\n            const msgJson = SfuRequest.toJson(message);\n            if (this.signalWs.readyState !== WebSocket.OPEN) {\n                this.logger(\"debug\", \"Signal WS is not open. Skipping message\", msgJson);\n                return;\n            }\n            this.logger(\"debug\", `Sending message to: ${this.edgeName}`, msgJson);\n            this.signalWs.send(SfuRequest.toBinary(message));\n        };\n        this.keepAlive = ()=>{\n            clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = setInterval(()=>{\n                this.ping().catch((e)=>{\n                    this.logger(\"error\", \"Error sending healthCheckRequest to SFU\", e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.dispatcher = dispatcher;\n        this.sessionId = sessionId || generateUUIDv4();\n        this.onSignalClose = onSignalClose;\n        this.credentials = credentials;\n        const { server, token } = credentials;\n        this.edgeName = server.edge_name;\n        this.joinResponseTimeout = joinResponseTimeout;\n        this.logTag = logTag;\n        this.logger = getLogger([\n            \"SfuClient\",\n            logTag\n        ]);\n        this.rpc = createSignalClient({\n            baseUrl: server.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                getLogLevel() === \"trace\" && withRequestLogger(this.logger, \"trace\")\n            ].filter((v)=>!!v)\n        });\n        // Special handling for the ICETrickle kind of events.\n        // The SFU might trigger these events before the initial RTC\n        // connection is established or \"JoinResponse\" received.\n        // In that case, those events (ICE candidates) need to be buffered\n        // and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on(\"iceTrickle\", (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        // listen to network changes to handle offline state\n        // we shouldn't attempt to recover websocket connection when offline\n        this.unsubscribeNetworkChanged = streamClient.on(\"network.changed\", (e)=>{\n            if (!e.online) {\n                this.networkAvailableTask = promiseWithResolvers();\n            } else {\n                this.networkAvailableTask?.resolve();\n            }\n        });\n        this.createWebSocket();\n    }\n    get isHealthy() {\n        return this.signalWs.readyState === WebSocket.OPEN;\n    }\n    get joinTask() {\n        return this.joinResponseTask.promise;\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is disposed because a new\n * connection is established or is about to be established.\n * Here, we don't use 1000 (normal closure) because we don't want the\n * SFU to clean up the resources associated with the current participant.\n */ StreamSfuClient.DISPOSE_OLD_SOCKET = 4002;\nconst toRtcConfiguration = (config)=>{\n    return {\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n};\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger(\"warn\", \"No call session provided. Ignoring call.rejected event.\", event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger(\"info\", \"Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.\", event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger(\"info\", \"everyone rejected, leaving the call\");\n                await call.leave({\n                    reason: \"ring: everyone rejected\"\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger(\"info\", \"call creator rejected, leaving call\");\n                await call.leave({\n                    reason: \"ring: creator rejected\"\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState === CallingState.RINGING || callingState === CallingState.JOINED || callingState === CallingState.JOINING) {\n            call.leave({\n                reason: \"call.ended event received\"\n            }).catch((err)=>{\n                call.logger(\"error\", \"Failed to leave call after call.ended \", err);\n            });\n        }\n    };\n};\n/**\n * Watches for `callEnded` events.\n */ const watchSfuCallEnded = (call)=>{\n    return call.on(\"callEnded\", async (e)=>{\n        if (call.state.callingState === CallingState.LEFT) return;\n        try {\n            // `call.ended` event arrived after the call is already left\n            // and all event handlers are detached. We need to manually\n            // update the call state to reflect the call has ended.\n            call.state.setEndedAt(new Date());\n            const reason = CallEndedReason[e.reason];\n            await call.leave({\n                reason: `callEnded received: ${reason}`\n            });\n        } catch (err) {\n            call.logger(\"error\", \"Failed to leave call after being ended by the SFU\", err);\n        }\n    });\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\n/**\n * An event responder which handles the `changePublishQuality` event.\n */ const watchChangePublishQuality = (dispatcher, call)=>{\n    return dispatcher.on(\"changePublishQuality\", (e)=>{\n        const { videoSenders } = e;\n        videoSenders.forEach((videoSender)=>{\n            const { layers } = videoSender;\n            call.updatePublishQuality(layers.filter((l)=>l.active));\n        });\n    });\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"connectionQualityChanged\", (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"healthCheckResponse\", (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                reason: \"live ended\"\n            }).catch((err)=>{\n                call.logger(\"error\", \"Failed to leave call after live ended\", err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (!e.error) return;\n        const logger = getLogger([\n            \"SfuClient\"\n        ]);\n        const { error, reconnectStrategy } = e;\n        logger(\"error\", \"SFU reported error\", {\n            code: ErrorCode[error.code],\n            reconnectStrategy: WebsocketReconnectStrategy[reconnectStrategy],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on(\"trackUnpublished\", async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger(\"info\", `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else if (type === TrackType.SCREEN_SHARE || type === TrackType.SCREEN_SHARE_AUDIO) {\n                    await call.screenShare.disable();\n                } else {\n                    logger(\"warn\", \"Unsupported track type to soft mute\", TrackType[type]);\n                }\n            } catch (error) {\n                logger(\"error\", \"Failed to stop publishing\", error);\n            }\n        }\n    });\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow`.\n        // The SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        const orphanedTracks = reconcileOrphanedTracks(state, participant);\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, orphanedTracks, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `participantUpdated` event.\n */ const watchParticipantUpdated = (state)=>{\n    return function onParticipantUpdated(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.updateParticipant(participant.sessionId, participant);\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: [\n                        ...p.publishedTracks,\n                        type\n                    ].filter(unique)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\nconst unique = (v, i, arr)=>arr.indexOf(v) === i;\n/**\n * Reconciles orphaned tracks (if any) for the given participant.\n *\n * @param state the call state.\n * @param participant the participant.\n */ const reconcileOrphanedTracks = (state, participant)=>{\n    const orphanTracks = state.takeOrphanedTracks(participant.trackLookupPrefix);\n    if (!orphanTracks.length) return;\n    const reconciledTracks = {};\n    for (const orphan of orphanTracks){\n        const key = trackTypeToParticipantStreamKey(orphan.trackType);\n        if (!key) continue;\n        reconciledTracks[key] = orphan.track;\n    }\n    return reconciledTracks;\n};\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"dominantSpeakerChanged\", (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"audioLevelChanged\", (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, dispatcher)=>{\n    const state = call.state;\n    const eventHandlers = [\n        call.on(\"call.ended\", watchCallEnded(call)),\n        watchSfuCallEnded(call),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchChangePublishQuality(dispatcher, call),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on(\"participantJoined\", watchParticipantJoined(state)),\n        call.on(\"participantLeft\", watchParticipantLeft(state)),\n        call.on(\"participantUpdated\", watchParticipantUpdated(state)),\n        call.on(\"trackPublished\", watchTrackPublished(state)),\n        call.on(\"trackUnpublished\", watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on(\"callGrantsUpdated\", watchCallGrantsUpdated(state)),\n        call.on(\"pinsUpdated\", watchPinsUpdated(state)),\n        handleRemoteSoftMute(call)\n    ];\n    if (call.ringing) {\n        // these events are only relevant when the call is ringing\n        eventHandlers.push(registerRingingCallEventHandlers(call));\n    }\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        \"call.accepted\": watchCallAccepted(call),\n        \"call.rejected\": watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\nconst getSdkSignature = (clientDetails)=>{\n    const { sdk, ...platform } = clientDetails;\n    const sdkName = getSdkName(sdk);\n    const sdkVersion = getSdkVersion(sdk);\n    return {\n        sdkName,\n        sdkVersion,\n        ...platform\n    };\n};\nconst getSdkName = (sdk)=>{\n    return sdk && sdk.type === SdkType.REACT ? \"stream-react\" : sdk && sdk.type === SdkType.REACT_NATIVE ? \"stream-react-native\" : \"stream-js\";\n};\nconst getSdkVersion = (sdk)=>{\n    return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : \"0.0.0-development\";\n};\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, datacenter, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        \"stats\"\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === \"subscriber\" && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === \"publisher\" && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, mediaStream)=>{\n        const pc = kind === \"subscriber\" ? subscriber : publisher;\n        if (!pc) return [];\n        const statsForStream = [];\n        for (let track of mediaStream.getTracks()){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                // @ts-ignore\n                trackKind: track.kind,\n                kind\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        const sessionIds = new Set(sessionIdsToTrack);\n        if (sessionIds.size > 0) {\n            for (let participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const kind = participant.isLocalParticipant ? \"publisher\" : \"subscriber\";\n                try {\n                    const mergedStream = new MediaStream([\n                        ...participant.videoStream?.getVideoTracks() || [],\n                        ...participant.audioStream?.getAudioTracks() || []\n                    ]);\n                    participantStats[participant.sessionId] = await getStatsForStream(kind, mergedStream);\n                    mergedStream.getTracks().forEach((t)=>{\n                        mergedStream.removeTrack(t);\n                    });\n                } catch (e) {\n                    logger(\"error\", `Failed to collect stats for ${kind} of ${participant.userId}`, e);\n                }\n            }\n        }\n        const [subscriberStats, publisherStats] = await Promise.all([\n            subscriber.getStats().then((report)=>transform(report, {\n                    kind: \"subscriber\",\n                    trackKind: \"video\"\n                })).then(aggregate),\n            publisher ? publisher.getStats().then((report)=>transform(report, {\n                    kind: \"publisher\",\n                    trackKind: \"video\"\n                })).then(aggregate) : getEmptyStats()\n        ]);\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack(\"subscriber\"),\n            publisher ? getRawStatsForTrack(\"publisher\") : undefined\n        ]);\n        state.setCallStatsReport({\n            datacenter,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            await run().catch((e)=>{\n                logger(\"debug\", \"Failed to collect stats\", e);\n            });\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind } = opts;\n    const direction = kind === \"subscriber\" ? \"inbound-rtp\" : \"outbound-rtp\";\n    const stats = flatten(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === \"codec\" && s.id === rtcStreamStats.codecId);\n        const transport = stats.find((s)=>s.type === \"transport\" && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === \"connected\") {\n            const candidatePair = stats.find((s)=>s.type === \"candidate-pair\" && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            // @ts-ignore: available in Chrome only, TS doesn't recognize this\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\nconst getEmptyStats = (stats)=>{\n    return {\n        rawReport: stats ?? {\n            streams: [],\n            timestamp: Date.now()\n        },\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: \"none\",\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        codec: \"\",\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = getEmptyStats(stats);\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || \"\");\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n        // we take the first codec we find, as it should be the same for all streams\n        report.codec = streams[0].codec || \"\";\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has(\"cpu\") && \"cpu\",\n        qualityLimitationReasons.has(\"bandwidth\") && \"bandwidth\",\n        qualityLimitationReasons.has(\"other\") && \"other\"\n    ].filter(Boolean).join(\", \");\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher }){\n        this.logger = getLogger([\n            \"SfuStatsReporter\"\n        ]);\n        this.run = async ()=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.getStats().then(flatten).then(JSON.stringify),\n                this.publisher?.getStats().then(flatten).then(JSON.stringify) ?? \"[]\"\n            ]);\n            await this.sfuClient.sendStats({\n                sdk: this.sdkName,\n                sdkVersion: this.sdkVersion,\n                webrtcVersion: this.webRTCVersion,\n                subscriberStats,\n                publisherStats\n            });\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            clearInterval(this.intervalId);\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger(\"warn\", \"Failed to report stats\", err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        const webRTCInfo = getWebRTCInfo();\n        const { sdk, browser } = clientDetails;\n        this.sdkName = getSdkName(sdk);\n        this.sdkVersion = getSdkVersion(sdk);\n        // The WebRTC version if passed from the SDK, it is taken else the browser info is sent.\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || \"\"}-${browser?.version || \"\"}` || \"N/A\";\n    }\n}\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || \"\");\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Firefox\");\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Chrome\");\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari\n});\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     *\n     * @param call the call to manage.\n     */ constructor(call){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            \"DynascaleManager\"\n        ]);\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger(\"debug\", `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.call.updateSubscriptionsPartial(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                }, debounceType);\n            };\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((participant)=>participant.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = `${videoElement.clientWidth},${videoElement.clientHeight}`;\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions === currentDimensions || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                requestTrackWithDimensions(DebounceType.SLOW, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(\"publishedTracks\"), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((p)=>trackType === \"videoTrack\" ? hasVideo(p) : hasScreenShare(p)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.FAST, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(trackType === \"videoTrack\" ? \"videoStream\" : \"screenShareStream\")).subscribe((p)=>{\n                const source = trackType === \"videoTrack\" ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((participants)=>participants.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(trackType === \"screenShareAudioTrack\" ? \"screenShareAudioStream\" : \"audioStream\")).subscribe((p)=>{\n                const source = trackType === \"screenShareAudioTrack\" ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (audioElement.srcObject) {\n                        audioElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                        // audio output device shall be set after the audio element is played\n                        // otherwise, the browser will not pick it up, and will always\n                        // play audio through the system's default device\n                        const { selectedDevice } = this.call.speaker.state;\n                        if (selectedDevice && \"setSinkId\" in audioElement) {\n                            audioElement.setSinkId(selectedDevice);\n                        }\n                    }\n                });\n            });\n            const sinkIdSubscription = !(\"setSinkId\" in audioElement) ? null : this.call.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                if (deviceId) {\n                    audioElement.setSinkId(deviceId);\n                }\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n                this.call.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilKeyChanged)(\"audioVolume\"))\n            ]).subscribe(([volume, p])=>{\n                audioElement.volume = p.audioVolume ?? volume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n            };\n        };\n        this.call = call;\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType(\"default\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"development\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"livestream\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType(\"audio_room\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\nclass BrowserPermission {\n    constructor(permission){\n        this.permission = permission;\n        this.disposeController = new AbortController();\n        this.wasPrompted = false;\n        this.listeners = new Set();\n        this.logger = getLogger([\n            \"permissions\"\n        ]);\n        const signal = this.disposeController.signal;\n        this.ready = (async ()=>{\n            const assumeGranted = (error)=>{\n                this.setState(\"granted\");\n            };\n            if (!canQueryPermissions()) {\n                return assumeGranted();\n            }\n            try {\n                const status = await navigator.permissions.query({\n                    name: permission.queryName\n                });\n                if (!signal.aborted) {\n                    this.setState(status.state);\n                    status.addEventListener(\"change\", ()=>this.setState(status.state), {\n                        signal\n                    });\n                }\n            } catch (err) {\n                assumeGranted();\n            }\n        })();\n    }\n    dispose() {\n        this.state = undefined;\n        this.disposeController.abort();\n    }\n    async getState() {\n        await this.ready;\n        if (!this.state) {\n            throw new Error(\"BrowserPermission instance possibly disposed\");\n        }\n        return this.state;\n    }\n    async prompt({ forcePrompt = false, throwOnNotAllowed = false } = {}) {\n        await withoutConcurrency(`permission-prompt-${this.permission.queryName}`, async ()=>{\n            if (await this.getState() !== \"prompt\" || this.wasPrompted && !forcePrompt) {\n                const isGranted = this.state === \"granted\";\n                if (!isGranted && throwOnNotAllowed) {\n                    throw new DOMException(\"Permission was not granted previously, and prompting again is not allowed\", \"NotAllowedError\");\n                }\n                return isGranted;\n            }\n            try {\n                this.wasPrompted = true;\n                const stream = await navigator.mediaDevices.getUserMedia(this.permission.constraints);\n                disposeOfMediaStream(stream);\n                return true;\n            } catch (e) {\n                if (e instanceof DOMException && e.name === \"NotAllowedError\") {\n                    this.logger(\"info\", \"Browser permission was not granted\", {\n                        permission: this.permission\n                    });\n                    if (throwOnNotAllowed) {\n                        throw e;\n                    }\n                    return false;\n                }\n                this.logger(\"error\", `Failed to getUserMedia`, {\n                    error: e,\n                    permission: this.permission\n                });\n                throw e;\n            }\n        });\n    }\n    listen(cb) {\n        this.listeners.add(cb);\n        if (this.state) cb(this.state);\n        return ()=>this.listeners.delete(cb);\n    }\n    asObservable() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__.fromEventPattern)((handler)=>this.listen(handler), (handler, unlisten)=>unlisten()).pipe(// In some browsers, the 'change' event doesn't reliably emit and hence,\n        // permissionState stays in 'prompt' state forever.\n        // Typically, this happens when a user grants one-time permission.\n        // Instead of checking if a permission is granted, we check if it isn't denied\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((state)=>state !== \"denied\"));\n    }\n    setState(state) {\n        if (this.state !== state) {\n            this.state = state;\n            this.listeners.forEach((listener)=>listener(state));\n        }\n    }\n}\nfunction canQueryPermissions() {\n    return !isReactNative() && typeof navigator !== \"undefined\" && !!navigator.permissions?.query;\n}\nconst uninitialized = Symbol(\"uninitialized\");\n/**\n * Lazily creates a value using a provided factory\n */ function lazy(factory) {\n    let value = uninitialized;\n    return ()=>{\n        if (value === uninitialized) {\n            value = factory();\n        }\n        return value;\n    };\n}\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param permission a BrowserPermission instance.\n * @param kind the kind of devices to enumerate.\n */ const getDevices = (permission, kind)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.from)((async ()=>{\n        let devices = await navigator.mediaDevices.enumerateDevices();\n        // for privacy reasons, most browsers don't give you device labels\n        // unless you have a corresponding camera or microphone permission\n        const shouldPromptForBrowserPermission = devices.some((device)=>device.kind === kind && device.label === \"\");\n        if (shouldPromptForBrowserPermission) {\n            await permission.prompt({\n                throwOnNotAllowed: true\n            });\n            devices = await navigator.mediaDevices.enumerateDevices();\n        }\n        return devices.filter((d)=>d.kind === kind);\n    })());\n};\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === \"undefined\") return false;\n    const element = document.createElement(\"audio\");\n    return \"setSinkId\" in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */ const getAudioBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: audioDeviceConstraints,\n        queryName: \"microphone\"\n    }));\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */ const getVideoBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: videoDeviceConstraints,\n        queryName: \"camera\"\n    }));\nconst getDeviceChangeObserver = lazy(()=>{\n    // 'addEventListener' is not available in React Native, returning\n    // an observable that will never fire\n    if (!navigator.mediaDevices.addEventListener) return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.from)([]);\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__.fromEvent)(navigator.mediaDevices, \"devicechange\").pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)(()=>undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__.debounceTime)(500));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioDevices = lazy(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getAudioBrowserPermission(), \"audioinput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getVideoDevices = ()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getVideoBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getVideoBrowserPermission(), \"videoinput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n};\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioOutputDevices = ()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>getDevices(getAudioBrowserPermission(), \"audiooutput\")), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1));\n};\nconst getStream = async (constraints)=>{\n    return await navigator.mediaDevices.getUserMedia(constraints);\n};\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getAudioBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return getStream(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get audio stream\", {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getVideoBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return getStream(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get video stream\", {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */ const getScreenShareStream = async (options)=>{\n    try {\n        return await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false\n            },\n            // @ts-expect-error - not present in types yet\n            systemAudio: \"include\",\n            ...options\n        });\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get screen share stream\", e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== \"undefined\" && typeof navigator.mediaDevices !== \"undefined\" ? getDeviceChangeObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.concatMap)(()=>navigator.mediaDevices.enumerateDevices()), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1)) : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n        stream.removeTrack(track);\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === \"function\") {\n        // @ts-expect-error\n        stream.release();\n    }\n};\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.filters = [];\n        this.statusChangeConcurrencyTag = Symbol(\"statusChangeConcurrencyTag\");\n        this.filterRegistrationConcurrencyTag = Symbol(\"filterRegistrationConcurrencyTag\");\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s());\n        };\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Returns `true` when this device is in enabled state.\n     */ get enabled() {\n        return this.state.status === \"enabled\";\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        if (this.state.optimisticStatus === \"enabled\") {\n            return;\n        }\n        this.state.setPendingStatus(\"enabled\");\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                await this.unmuteStream();\n                this.state.setStatus(\"enabled\");\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.status;\n        if (!forceStop && this.state.optimisticStatus === \"disabled\") {\n            return;\n        }\n        this.state.setPendingStatus(\"disabled\");\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                const stopTracks = forceStop || this.state.disableMode === \"stop-tracks\";\n                await this.muteStream(stopTracks);\n                this.state.setStatus(\"disabled\");\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Returns a promise that resolves when all pe\n     */ async statusChangeSettled() {\n        await settled(this.statusChangeConcurrencyTag);\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === \"enabled\" && this.state.status === \"disabled\") {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.optimisticStatus === \"enabled\") {\n            return await this.disable();\n        } else {\n            return await this.enable();\n        }\n    }\n    /**\n     * Registers a filter that will be applied to the stream.\n     *\n     * The registered filter will get the existing stream, and it should return\n     * a new stream with the applied filter.\n     *\n     * @param filter the filter to register.\n     * @returns MediaStreamFilterRegistrationResult\n     */ registerFilter(filter) {\n        const entry = {\n            start: filter,\n            stop: undefined\n        };\n        const registered = withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n            this.filters.push(entry);\n            await this.applySettingsToStream();\n        });\n        return {\n            registered,\n            unregister: ()=>withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n                    entry.stop?.();\n                    this.filters = this.filters.filter((f)=>f !== entry);\n                    await this.applySettingsToStream();\n                })\n        };\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.\");\n        }\n        if (deviceId === this.state.selectedDevice) {\n            return;\n        }\n        this.state.setDevice(deviceId);\n        await this.applySettingsToStream();\n    }\n    async applySettingsToStream() {\n        await withCancellation(this.statusChangeConcurrencyTag, async ()=>{\n            if (this.enabled) {\n                await this.muteStream();\n                await this.unmuteStream();\n            }\n        });\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        if (!this.state.mediaStream) return;\n        this.logger(\"debug\", `${stopTracks ? \"Stopping\" : \"Disabling\"} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream(stopTracks);\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === \"ended\");\n        if (allEnded) {\n            if (this.state.mediaStream && // @ts-expect-error release() is present in react-native-webrtc\n            typeof this.state.mediaStream.release === \"function\") {\n                // @ts-expect-error called to dispose the stream in RN\n                this.state.mediaStream.release();\n            }\n            this.state.setMediaStream(undefined, undefined);\n            this.filters.forEach((entry)=>entry.stop?.());\n        }\n    }\n    muteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    unmuteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === \"live\") track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.muteTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger(\"debug\", \"Starting stream\");\n        let stream;\n        let rootStream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === \"live\")) {\n            stream = this.state.mediaStream;\n            this.unmuteTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice\n            };\n            /**\n             * Chains two media streams together.\n             *\n             * In our case, filters MediaStreams are derived from their parent MediaStream.\n             * However, once a child filter's track is stopped,\n             * the tracks of the parent MediaStream aren't automatically stopped.\n             * This leads to a situation where the camera indicator light is still on\n             * even though the user stopped publishing video.\n             *\n             * This function works around this issue by stopping the parent MediaStream's tracks\n             * as well once the child filter's tracks are stopped.\n             *\n             * It works by patching the stop() method of the child filter's tracks to also stop\n             * the parent MediaStream's tracks of the same type. Here we assume that\n             * the parent MediaStream has only one track of each type.\n             *\n             * @param parentStream the parent MediaStream. Omit for the root stream.\n             */ const chainWith = (parentStream)=>async (filterStream)=>{\n                    if (!parentStream) return filterStream;\n                    // TODO OL: take care of track.enabled property as well\n                    const parent = await parentStream;\n                    filterStream.getTracks().forEach((track)=>{\n                        const originalStop = track.stop;\n                        track.stop = function stop() {\n                            originalStop.call(track);\n                            parent.getTracks().forEach((parentTrack)=>{\n                                if (parentTrack.kind === track.kind) {\n                                    parentTrack.stop();\n                                }\n                            });\n                        };\n                    });\n                    parent.getTracks().forEach((parentTrack)=>{\n                        // When the parent stream abruptly ends, we propagate the event\n                        // to the filter stream.\n                        // This usually happens when the camera/microphone permissions\n                        // are revoked or when the device is disconnected.\n                        const handleParentTrackEnded = ()=>{\n                            filterStream.getTracks().forEach((track)=>{\n                                if (parentTrack.kind !== track.kind) return;\n                                track.stop();\n                                track.dispatchEvent(new Event(\"ended\")); // propagate the event\n                            });\n                        };\n                        parentTrack.addEventListener(\"ended\", handleParentTrackEnded);\n                        this.subscriptions.push(()=>{\n                            parentTrack.removeEventListener(\"ended\", handleParentTrackEnded);\n                        });\n                    });\n                    return filterStream;\n                };\n            // the rootStream represents the stream coming from the actual device\n            // e.g. camera or microphone stream\n            rootStream = this.getStream(constraints);\n            // we publish the last MediaStream of the chain\n            stream = await this.filters.reduce((parent, entry)=>parent.then((inputStream)=>{\n                    const { stop, output } = entry.start(inputStream);\n                    entry.stop = stop;\n                    return output;\n                }).then(chainWith(parent), (error)=>{\n                    this.logger(\"warn\", \"Filter failed to start and will be ignored\", error);\n                    return parent;\n                }), rootStream);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream, await rootStream);\n            const handleTrackEnded = async ()=>{\n                await this.statusChangeSettled();\n                if (this.enabled) {\n                    this.isTrackStoppedDueToTrackEnd = true;\n                    setTimeout(()=>{\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    }, 2000);\n                    await this.disable();\n                }\n            };\n            this.getTracks().forEach((track)=>{\n                track.addEventListener(\"ended\", handleTrackEnded);\n                this.subscriptions.push(()=>track.removeEventListener(\"ended\", handleTrackEnded));\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return \"audioinput\";\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return \"videoinput\";\n        }\n        return \"\";\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__.pairwise)()),\n            this.state.selectedDevice$\n        ]), async ([[prevDevices, currentDevices], deviceId])=>{\n            try {\n                if (!deviceId) return;\n                await this.statusChangeSettled();\n                let isDeviceDisconnected = false;\n                let isDeviceReplaced = false;\n                const currentDevice = this.findDeviceInList(currentDevices, deviceId);\n                const prevDevice = this.findDeviceInList(prevDevices, deviceId);\n                if (!currentDevice && prevDevice) {\n                    isDeviceDisconnected = true;\n                } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                    isDeviceReplaced = true;\n                }\n                if (isDeviceDisconnected) {\n                    await this.disable();\n                    await this.select(undefined);\n                }\n                if (isDeviceReplaced) {\n                    if (this.isTrackStoppedDueToTrackEnd && this.state.status === \"disabled\") {\n                        await this.enable();\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    } else {\n                        await this.applySettingsToStream();\n                    }\n                }\n            } catch (err) {\n                this.logger(\"warn\", \"Unexpected error while handling disconnected or replaced device\", err);\n            }\n        }));\n    }\n    findDeviceInList(devices, deviceId) {\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === this.mediaDeviceKind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permission the BrowserPermission to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = \"stop-tracks\", permission){\n        this.disableMode = disableMode;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.optimisticStatusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable the reflects the requested device status. Useful for optimistic UIs\n         */ this.optimisticStatus$ = this.optimisticStatusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.hasBrowserPermission$ = permission ? permission.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__.of)(true);\n    }\n    /**\n     * The device status\n     */ get status() {\n        return this.getCurrentValue(this.status$);\n    }\n    /**\n     * The requested device status. Useful for optimistic UIs\n     */ get optimisticStatus() {\n        return this.getCurrentValue(this.optimisticStatus$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return this.getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        this.setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param pendingStatus\n     */ setPendingStatus(pendingStatus) {\n        this.setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n    }\n    /**\n     * Updates the `mediaStream` state variable.\n     *\n     * @internal\n     * @param stream the stream to set.\n     * @param rootStream the root stream, applicable when filters are used\n     * as this is the stream that holds the actual deviceId information.\n     */ setMediaStream(stream, rootStream) {\n        this.setCurrentValue(this.mediaStreamSubject, stream);\n        if (rootStream) {\n            this.setDevice(this.getDeviceIdFromStream(rootStream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return this.getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"stop-tracks\", getVideoBrowserPermission());\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return this.getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        this.setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream, rootStream) {\n        super.setMediaStream(stream, rootStream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === \"environment\" ? \"back\" : \"front\";\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getVideoTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    /**\n     * Constructs a new CameraManager.\n     *\n     * @param call the call instance.\n     */ constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        await this.applySettingsToStream();\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === \"front\" ? \"back\" : \"front\";\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.state.optimisticStatus === \"enabled\") {\n            try {\n                await this.statusChangeSettled();\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger(\"warn\", \"could not apply target resolution\", error);\n            }\n        }\n        if (this.enabled) {\n            const { width, height } = this.state.mediaStream.getVideoTracks()[0]?.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger(\"debug\", `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Sets the preferred codec for encoding the video.\n     *\n     * @internal internal use only, not part of the public API.\n     * @param codec the codec to use for encoding the video.\n     */ setPreferredCodec(codec) {\n        this.updatePublishOptions({\n            preferredCodec: codec\n        });\n    }\n    /**\n     * Updates the preferred publish options for the video stream.\n     *\n     * @internal\n     * @param options the options to use.\n     */ updatePublishOptions(options) {\n        this.publishOptions = {\n            ...this.publishOptions,\n            ...options\n        };\n    }\n    /**\n     * Returns the capture resolution of the camera.\n     */ getCaptureResolution() {\n        const { mediaStream } = this.state;\n        if (!mediaStream) return;\n        const [videoTrack] = mediaStream.getVideoTracks();\n        if (!videoTrack) return;\n        const settings = videoTrack.getSettings();\n        return {\n            width: settings.width,\n            height: settings.height,\n            frameRate: settings.frameRate\n        };\n    }\n    getDevices() {\n        return getVideoDevices();\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction) {\n            constraints.facingMode = this.state.direction === \"front\" ? \"user\" : \"environment\";\n        }\n        return getVideoStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishVideoStream(stream, this.publishOptions);\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.VIDEO, stopTracks);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(disableMode){\n        super(disableMode, getAudioBrowserPermission());\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return this.getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getAudioTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD$1 = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD$1, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        if (audioContext.state !== \"closed\") {\n            await audioContext.close();\n        }\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\nclass RNSpeechDetector {\n    constructor(){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n    }\n    /**\n     * Starts the speech detection.\n     */ async start() {\n        try {\n            const audioStream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            this.pc1.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const audioTracks = audioStream.getAudioTracks();\n            // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n            audioTracks.forEach((track)=>track.enabled = false);\n        } catch (error) {\n            console.error(\"Error connecting and negotiating between PeerConnections:\", error);\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        this.intervalId = setInterval(async ()=>{\n            const stats = await this.pc1.getStats();\n            const report = flatten(stats);\n            // Audio levels are present inside stats of type `media-source` and of kind `audio`\n            const audioMediaSourceStats = report.find((stat)=>stat.type === \"media-source\" && stat.kind === \"audio\");\n            if (audioMediaSourceStats) {\n                const { audioLevel } = audioMediaSourceStats;\n                if (audioLevel) {\n                    if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: true,\n                            audioLevel\n                        });\n                    } else {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: false,\n                            audioLevel: 0\n                        });\n                    }\n                }\n            }\n        }, 1000);\n        return ()=>{\n            clearInterval(this.intervalId);\n        };\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call, disableMode = isReactNative() ? \"disable-tracks\" : \"stop-tracks\"){\n        super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n        this.speakingWhileMutedNotificationEnabled = true;\n        this.soundDetectorConcurrencyTag = Symbol(\"soundDetectorConcurrencyTag\");\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]), async ([callingState, ownCapabilities, deviceId, status])=>{\n            try {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                if (callingState !== CallingState.JOINED) return;\n                if (!this.speakingWhileMutedNotificationEnabled) return;\n                if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                    if (status === \"disabled\") {\n                        await this.startSpeakingWhileMutedDetection(deviceId);\n                    } else {\n                        await this.stopSpeakingWhileMutedDetection();\n                    }\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } catch (err) {\n                this.logger(\"warn\", \"Could not enable speaking while muted\", err);\n            }\n        }));\n        this.subscriptions.push(createSubscription(this.call.state.callingState$, (callingState)=>{\n            // do nothing when noise filtering isn't turned on\n            if (!this.noiseCancellationRegistration || !this.noiseCancellation) return;\n            const autoOn = this.call.state.settings?.audio.noise_cancellation?.mode === NoiseCancellationSettingsModeEnum.AUTO_ON;\n            if (autoOn && callingState === CallingState.JOINED) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.enable()).catch((err)=>{\n                    this.logger(\"warn\", `Failed to enable noise cancellation`, err);\n                    return this.call.notifyNoiseCancellationStopped();\n                });\n            } else if (callingState === CallingState.LEFT) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.disable()).catch((err)=>{\n                    this.logger(\"warn\", `Failed to disable noise cancellation`, err);\n                });\n            }\n        }));\n    }\n    /**\n     * Enables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     * @param noiseCancellation - a noise cancellation instance to use.\n     */ async enableNoiseCancellation(noiseCancellation) {\n        if (isReactNative()) {\n            throw new Error(\"Noise cancellation is not supported in React Native\");\n        }\n        const { ownCapabilities, settings } = this.call.state;\n        const hasNoiseCancellationCapability = ownCapabilities.includes(OwnCapability.ENABLE_NOISE_CANCELLATION);\n        if (!hasNoiseCancellationCapability) {\n            throw new Error(\"Noise cancellation is not available.\");\n        }\n        const noiseCancellationSettings = settings?.audio.noise_cancellation;\n        if (!noiseCancellationSettings || noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.DISABLED) {\n            throw new Error(\"Noise cancellation is disabled for this call type.\");\n        }\n        try {\n            this.noiseCancellation = noiseCancellation;\n            // listen for change events and notify the SFU\n            this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on(\"change\", (enabled)=>{\n                if (enabled) {\n                    this.call.notifyNoiseCancellationStarting().catch((err)=>{\n                        this.logger(\"warn\", `notifyNoiseCancellationStart failed`, err);\n                    });\n                } else {\n                    this.call.notifyNoiseCancellationStopped().catch((err)=>{\n                        this.logger(\"warn\", `notifyNoiseCancellationStop failed`, err);\n                    });\n                }\n            });\n            const registrationResult = this.registerFilter(noiseCancellation.toFilter());\n            this.noiseCancellationRegistration = registrationResult.registered;\n            this.unregisterNoiseCancellation = registrationResult.unregister;\n            await this.noiseCancellationRegistration;\n            // handles an edge case where a noise cancellation is enabled after\n            // the participant as joined the call -> we immediately enable NC\n            if (noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.AUTO_ON && this.call.state.callingState === CallingState.JOINED) {\n                noiseCancellation.enable();\n            }\n        } catch (e) {\n            this.logger(\"warn\", \"Failed to enable noise cancellation\", e);\n            await this.disableNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to disable noise cancellation\", err);\n            });\n        }\n    }\n    /**\n     * Disables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     */ async disableNoiseCancellation() {\n        if (isReactNative()) {\n            throw new Error(\"Noise cancellation is not supported in React Native\");\n        }\n        await (this.unregisterNoiseCancellation?.() ?? Promise.resolve()).then(()=>this.noiseCancellation?.disable()).then(()=>this.noiseCancellationChangeUnsubscribe?.()).catch((err)=>{\n            this.logger(\"warn\", \"Failed to unregister noise cancellation\", err);\n        });\n        await this.call.notifyNoiseCancellationStopped();\n    }\n    /**\n     * Enables speaking while muted notification.\n     */ async enableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = true;\n        if (this.state.status === \"disabled\") {\n            await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n        }\n    }\n    /**\n     * Disables speaking while muted notification.\n     */ async disableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = false;\n        await this.stopSpeakingWhileMutedDetection();\n    }\n    getDevices() {\n        return getAudioDevices();\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishAudioStream(stream);\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.AUDIO, stopTracks);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            await this.stopSpeakingWhileMutedDetection();\n            if (isReactNative()) {\n                this.rnSpeechDetector = new RNSpeechDetector();\n                await this.rnSpeechDetector.start();\n                const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange((event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n                this.soundDetectorCleanup = ()=>{\n                    unsubscribe();\n                    this.rnSpeechDetector?.stop();\n                    this.rnSpeechDetector = undefined;\n                };\n            } else {\n                // Need to start a new stream that's not connected to publisher\n                const stream = await this.getStream({\n                    deviceId\n                });\n                this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n            }\n        });\n    }\n    async stopSpeakingWhileMutedDetection() {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            if (!this.soundDetectorCleanup) return;\n            const soundDetectorCleanup = this.soundDetectorCleanup;\n            this.soundDetectorCleanup = undefined;\n            this.state.setSpeakingWhileMuted(false);\n            await soundDetectorCleanup();\n        });\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return this.getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        this.setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n        this.subscriptions.push(createSubscription(call.state.settings$, (settings)=>{\n            const maybeTargetResolution = settings?.screensharing.target_resolution;\n            if (maybeTargetResolution) {\n                this.setDefaultConstraints({\n                    video: {\n                        width: maybeTargetResolution.width,\n                        height: maybeTargetResolution.height\n                    }\n                });\n            }\n        }));\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, true);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        return getScreenShareStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishScreenShareStream(stream, {\n            screenShareSettings: this.state.settings\n        });\n    }\n    async stopPublishStream(stopTracks) {\n        await this.call.stopPublish(TrackType.SCREEN_SHARE, stopTracks);\n        await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, stopTracks);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     *\n     * @param deviceId ignored.\n     */ async select(deviceId) {\n        throw new Error(\"This method is not supported in for Screen Share\");\n    }\n}\nclass SpeakerState {\n    constructor(){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(\"\");\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return this.getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        this.setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.state = new SpeakerState();\n        this.subscriptions = [];\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.call = call;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === \"audiooutput\");\n                if (!device) {\n                    this.select(\"\");\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        return getAudioOutputDevices();\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1\");\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1, or undefined\");\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The DynascaleManager instance.\n         */ this.dynascaleManager = new DynascaleManager(this);\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.trackSubscriptionsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({\n            type: DebounceType.MEDIUM,\n            data: []\n        });\n        this.sfuClientTag = 0;\n        this.reconnectConcurrencyTag = Symbol(\"reconnectConcurrencyTag\");\n        this.reconnectAttempts = 0;\n        this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n        this.fastReconnectDeadlineSeconds = 0;\n        this.lastOfflineTimestamp = 0;\n        // maintain the order of publishing tracks to restore them after a reconnection\n        // it shouldn't contain duplicates\n        this.trackPublishOrder = [];\n        this.hasJoinedOnce = false;\n        this.deviceSettingsAppliedOnce = false;\n        this.initialized = false;\n        this.joinLeaveConcurrencyTag = Symbol(\"joinLeaveConcurrencyTag\");\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        this.handleOwnCapabilitiesUpdated = async (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (hasPermission) continue;\n                try {\n                    switch(trackType){\n                        case TrackType.AUDIO:\n                            if (this.microphone.enabled) await this.microphone.disable();\n                            break;\n                        case TrackType.VIDEO:\n                            if (this.camera.enabled) await this.camera.disable();\n                            break;\n                        case TrackType.SCREEN_SHARE:\n                            if (this.screenShare.enabled) await this.screenShare.disable();\n                            break;\n                    }\n                } catch (err) {\n                    this.logger(\"error\", `Can't disable mic/camera/screenshare after revoked permissions`, err);\n                }\n            }\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject = false, reason = \"user is leaving the call\" } = {})=>{\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                const callingState = this.state.callingState;\n                if (callingState === CallingState.LEFT) {\n                    throw new Error(\"Cannot leave call that has already been left.\");\n                }\n                if (callingState === CallingState.JOINING) {\n                    const waitUntilCallJoined = ()=>{\n                        return new Promise((resolve)=>{\n                            this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.takeWhile)((state)=>state !== CallingState.JOINED, true)).subscribe(()=>resolve());\n                        });\n                    };\n                    await waitUntilCallJoined();\n                }\n                if (this.ringing) {\n                    // I'm the one who started the call, so I should cancel it.\n                    const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                    if (this.isCreatedByMe && !hasOtherParticipants && callingState === CallingState.RINGING) {\n                        // Signals other users that I have cancelled my call to them\n                        // before they accepted it.\n                        await this.reject();\n                    } else if (reject && callingState === CallingState.RINGING) {\n                        // Signals other users that I have rejected the incoming call.\n                        await this.reject();\n                    }\n                }\n                this.statsReporter?.stop();\n                this.statsReporter = undefined;\n                this.sfuStatsReporter?.stop();\n                this.sfuStatsReporter = undefined;\n                this.subscriber?.close();\n                this.subscriber = undefined;\n                this.publisher?.close({\n                    stopTracks: true\n                });\n                this.publisher = undefined;\n                await this.sfuClient?.leaveAndClose(reason);\n                this.sfuClient = undefined;\n                this.state.setCallingState(CallingState.LEFT);\n                // Call all leave call hooks, e.g. to clean up global event handlers\n                this.leaveCallHooks.forEach((hook)=>hook());\n                this.initialized = false;\n                this.hasJoinedOnce = false;\n                this.clientStore.unregisterCall(this);\n                this.camera.dispose();\n                this.microphone.dispose();\n                this.screenShare.dispose();\n                this.speaker.dispose();\n                const stopOnLeavePromises = [];\n                if (this.camera.stopOnLeave) {\n                    stopOnLeavePromises.push(this.camera.disable(true));\n                }\n                if (this.microphone.stopOnLeave) {\n                    stopOnLeavePromises.push(this.microphone.disable(true));\n                }\n                if (this.screenShare.stopOnLeave) {\n                    stopOnLeavePromises.push(this.screenShare.disable(true));\n                }\n                await Promise.all(stopOnLeavePromises);\n            });\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            await this.setup();\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (params?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(false);\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            await this.setup();\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (data?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(false);\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         *\n         * @param reason the reason for rejecting the call.\n         */ this.reject = async (reason)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`, {\n                reason: reason\n            });\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async (data)=>{\n            await this.setup();\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                throw new Error(`Illegal State: call.join() shall be called only once`);\n            }\n            this.joinCallData = data;\n            this.logger(\"debug\", \"Starting join flow\");\n            this.state.setCallingState(CallingState.JOINING);\n            const performingMigration = this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n            const performingRejoin = this.reconnectStrategy === WebsocketReconnectStrategy.REJOIN;\n            const performingFastReconnect = this.reconnectStrategy === WebsocketReconnectStrategy.FAST;\n            let statsOptions = this.sfuStatsReporter?.options;\n            if (!this.credentials || !statsOptions || performingRejoin || performingMigration) {\n                try {\n                    const joinResponse = await this.doJoinRequest(data);\n                    this.credentials = joinResponse.credentials;\n                    statsOptions = joinResponse.stats_options;\n                } catch (error) {\n                    // restore the previous call state if the join-flow fails\n                    this.state.setCallingState(callingState);\n                    throw error;\n                }\n            }\n            const previousSfuClient = this.sfuClient;\n            const previousSessionId = previousSfuClient?.sessionId;\n            const isWsHealthy = !!previousSfuClient?.isHealthy;\n            const sfuClient = performingRejoin || performingMigration || !isWsHealthy ? new StreamSfuClient({\n                logTag: String(this.sfuClientTag++),\n                dispatcher: this.dispatcher,\n                credentials: this.credentials,\n                streamClient: this.streamClient,\n                // a new session_id is necessary for the REJOIN strategy.\n                // we use the previous session_id if available\n                sessionId: performingRejoin ? undefined : previousSessionId,\n                onSignalClose: ()=>this.handleSfuSignalClose(sfuClient)\n            }) : previousSfuClient;\n            this.sfuClient = sfuClient;\n            const clientDetails = getClientDetails();\n            // we don't need to send JoinRequest if we are re-using an existing healthy SFU client\n            if (previousSfuClient !== sfuClient) {\n                // prepare a generic SDP and send it to the SFU.\n                // this is a throw-away SDP that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                const receivingCapabilitiesSdp = await getGenericSdp(\"recvonly\");\n                const reconnectDetails = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED ? this.getReconnectDetails(data?.migrating_from, previousSessionId) : undefined;\n                const { callState, fastReconnectDeadlineSeconds } = await sfuClient.join({\n                    subscriberSdp: receivingCapabilitiesSdp,\n                    clientDetails,\n                    fastReconnect: performingFastReconnect,\n                    reconnectDetails\n                });\n                this.fastReconnectDeadlineSeconds = fastReconnectDeadlineSeconds;\n                if (callState) {\n                    this.state.updateFromSfuCallState(callState, sfuClient.sessionId, reconnectDetails);\n                }\n            }\n            if (!performingMigration) {\n                // in MIGRATION, `JOINED` state is set in `this.reconnectMigrate()`\n                this.state.setCallingState(CallingState.JOINED);\n            }\n            this.hasJoinedOnce = true;\n            // when performing fast reconnect, or when we reuse the same SFU client,\n            // (ws remained healthy), we just need to restore the ICE connection\n            if (performingFastReconnect) {\n                // the SFU automatically issues an ICE restart on the subscriber\n                // we don't have to do it ourselves\n                await this.restoreICE(sfuClient, {\n                    includeSubscriber: false\n                });\n            } else {\n                const connectionConfig = toRtcConfiguration(this.credentials.ice_servers);\n                this.initPublisherAndSubscriber({\n                    sfuClient,\n                    connectionConfig,\n                    clientDetails,\n                    statsOptions,\n                    closePreviousInstances: !performingMigration\n                });\n            }\n            if (performingRejoin) {\n                const strategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n                await previousSfuClient?.leaveAndClose(`Closing previous WS after reconnect with strategy: ${strategy}`);\n            } else if (!isWsHealthy) {\n                previousSfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, \"Closing unhealthy WS after reconnect\");\n            }\n            // device settings should be applied only once, we don't have to\n            // re-apply them on later reconnections or server-side data fetches\n            if (!this.deviceSettingsAppliedOnce) {\n                await this.applyDeviceConfig(true);\n                this.deviceSettingsAppliedOnce = true;\n            }\n            // We shouldn't persist the `ring` and `notify` state after joining the call\n            // as it's a one-time event and clashes with the potential reconnection attempts.\n            // When reconnecting, if provided with `ring: true` or `notify: true`,\n            // we will spam the other participants with push notifications and `call.ring` events.\n            delete this.joinCallData?.ring;\n            delete this.joinCallData?.notify;\n            this.logger(\"info\", `Joined call ${this.cid}`);\n        };\n        /**\n         * Prepares Reconnect Details object.\n         * @internal\n         */ this.getReconnectDetails = (migratingFromSfuId, previousSessionId)=>{\n            const strategy = this.reconnectStrategy;\n            const performingRejoin = strategy === WebsocketReconnectStrategy.REJOIN;\n            const announcedTracks = this.publisher?.getAnnouncedTracks() || [];\n            const subscribedTracks = getCurrentValue(this.trackSubscriptionsSubject);\n            return {\n                strategy,\n                announcedTracks,\n                subscriptions: subscribedTracks.data || [],\n                reconnectAttempt: this.reconnectAttempts,\n                fromSfuId: migratingFromSfuId || \"\",\n                previousSessionId: performingRejoin ? previousSessionId || \"\" : \"\"\n            };\n        };\n        /**\n         * Performs an ICE restart on both the Publisher and Subscriber Peer Connections.\n         * Uses the provided SFU client to restore the ICE connection.\n         *\n         * This method can throw an error if the ICE restart fails.\n         * This error should be handled by the reconnect loop,\n         * and a new reconnection shall be attempted.\n         *\n         * @internal\n         */ this.restoreICE = async (nextSfuClient, opts = {})=>{\n            const { includeSubscriber = true, includePublisher = true } = opts;\n            if (this.subscriber) {\n                this.subscriber.setSfuClient(nextSfuClient);\n                if (includeSubscriber) {\n                    await this.subscriber.restartIce();\n                }\n            }\n            if (this.publisher) {\n                this.publisher.setSfuClient(nextSfuClient);\n                if (includePublisher) {\n                    await this.publisher.restartIce();\n                }\n            }\n        };\n        /**\n         * Initializes the Publisher and Subscriber Peer Connections.\n         * @internal\n         */ this.initPublisherAndSubscriber = (opts)=>{\n            const { sfuClient, connectionConfig, clientDetails, statsOptions, closePreviousInstances } = opts;\n            if (closePreviousInstances && this.subscriber) {\n                this.subscriber.close();\n            }\n            this.subscriber = new Subscriber({\n                sfuClient,\n                dispatcher: this.dispatcher,\n                state: this.state,\n                connectionConfig,\n                logTag: String(this.sfuClientTag),\n                onUnrecoverableError: ()=>{\n                    this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                        this.logger(\"warn\", \"[Reconnect] Error reconnecting after a subscriber error\", err);\n                    });\n                }\n            });\n            // anonymous users can't publish anything hence, there is no need\n            // to create Publisher Peer Connection for them\n            const isAnonymous = this.streamClient.user?.type === \"anonymous\";\n            if (!isAnonymous) {\n                if (closePreviousInstances && this.publisher) {\n                    this.publisher.close({\n                        stopTracks: false\n                    });\n                }\n                const audioSettings = this.state.settings?.audio;\n                const isDtxEnabled = !!audioSettings?.opus_dtx_enabled;\n                const isRedEnabled = !!audioSettings?.redundant_coding_enabled;\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    isDtxEnabled,\n                    isRedEnabled,\n                    logTag: String(this.sfuClientTag),\n                    onUnrecoverableError: ()=>{\n                        this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                            this.logger(\"warn\", \"[Reconnect] Error reconnecting after a publisher error\", err);\n                        });\n                    }\n                });\n            }\n            this.statsReporter?.stop();\n            this.statsReporter = createStatsReporter({\n                subscriber: this.subscriber,\n                publisher: this.publisher,\n                state: this.state,\n                datacenter: sfuClient.edgeName\n            });\n            this.sfuStatsReporter?.stop();\n            if (statsOptions?.reporting_interval_ms > 0) {\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher\n                });\n                this.sfuStatsReporter.start();\n            }\n        };\n        /**\n         * Retrieves credentials for joining the call.\n         *\n         * @internal\n         *\n         * @param data the join call data.\n         */ this.doJoinRequest = async (data)=>{\n            const location = await this.streamClient.getLocationHint();\n            const request = {\n                ...data,\n                location\n            };\n            const joinResponse = await this.streamClient.post(`${this.streamClientBasePath}/join`, request);\n            this.state.updateFromCallResponse(joinResponse.call);\n            this.state.setMembers(joinResponse.members);\n            this.state.setOwnCapabilities(joinResponse.own_capabilities);\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            if (this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            return joinResponse;\n        };\n        /**\n         * Handles the closing of the SFU signal connection.\n         *\n         * @internal\n         * @param sfuClient the SFU client instance that was closed.\n         */ this.handleSfuSignalClose = (sfuClient)=>{\n            this.logger(\"debug\", \"[Reconnect] SFU signal connection closed\");\n            // normal close, no need to reconnect\n            if (sfuClient.isLeaving) return;\n            this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                this.logger(\"warn\", \"[Reconnect] Error reconnecting\", err);\n            });\n        };\n        /**\n         * Handles the reconnection flow.\n         *\n         * @internal\n         *\n         * @param strategy the reconnection strategy to use.\n         */ this.reconnect = async (strategy)=>{\n            return withoutConcurrency(this.reconnectConcurrencyTag, async ()=>{\n                this.logger(\"info\", `[Reconnect] Reconnecting with strategy ${WebsocketReconnectStrategy[strategy]}`);\n                this.reconnectStrategy = strategy;\n                do {\n                    // we don't increment reconnect attempts for the FAST strategy.\n                    if (this.reconnectStrategy !== WebsocketReconnectStrategy.FAST) {\n                        this.reconnectAttempts++;\n                    }\n                    const current = WebsocketReconnectStrategy[this.reconnectStrategy];\n                    try {\n                        // wait until the network is available\n                        await this.networkAvailableTask?.promise;\n                        switch(this.reconnectStrategy){\n                            case WebsocketReconnectStrategy.UNSPECIFIED:\n                            case WebsocketReconnectStrategy.DISCONNECT:\n                                this.logger(\"debug\", `[Reconnect] No-op strategy ${current}`);\n                                break;\n                            case WebsocketReconnectStrategy.FAST:\n                                await this.reconnectFast();\n                                break;\n                            case WebsocketReconnectStrategy.REJOIN:\n                                await this.reconnectRejoin();\n                                break;\n                            case WebsocketReconnectStrategy.MIGRATE:\n                                await this.reconnectMigrate();\n                                break;\n                            default:\n                                ensureExhausted(this.reconnectStrategy, \"Unknown reconnection strategy\");\n                                break;\n                        }\n                        break; // do-while loop, reconnection worked, exit the loop\n                    } catch (error) {\n                        if (error instanceof ErrorFromResponse && error.unrecoverable) {\n                            this.logger(\"warn\", `[Reconnect] Can't reconnect due to coordinator unrecoverable error`, error);\n                            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                            return;\n                        }\n                        this.logger(\"warn\", `[Reconnect] ${current} (${this.reconnectAttempts}) failed. Attempting with REJOIN`, error);\n                        await sleep(500);\n                        this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n                    }\n                }while (this.state.callingState !== CallingState.JOINED && this.state.callingState !== CallingState.RECONNECTING_FAILED && this.state.callingState !== CallingState.LEFT);\n            });\n        };\n        /**\n         * Initiates the reconnection flow with the \"fast\" strategy.\n         * @internal\n         */ this.reconnectFast = async ()=>{\n            this.reconnectStrategy = WebsocketReconnectStrategy.FAST;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            return this.join(this.joinCallData);\n        };\n        /**\n         * Initiates the reconnection flow with the \"rejoin\" strategy.\n         * @internal\n         */ this.reconnectRejoin = async ()=>{\n            this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            await this.join(this.joinCallData);\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n        };\n        /**\n         * Initiates the reconnection flow with the \"migrate\" strategy.\n         * @internal\n         */ this.reconnectMigrate = async ()=>{\n            const currentSfuClient = this.sfuClient;\n            if (!currentSfuClient) {\n                throw new Error(\"Cannot migrate without an active SFU client\");\n            }\n            this.reconnectStrategy = WebsocketReconnectStrategy.MIGRATE;\n            this.state.setCallingState(CallingState.MIGRATING);\n            const currentSubscriber = this.subscriber;\n            const currentPublisher = this.publisher;\n            currentSubscriber?.detachEventHandlers();\n            currentPublisher?.detachEventHandlers();\n            const migrationTask = currentSfuClient.enterMigration();\n            try {\n                const currentSfu = currentSfuClient.edgeName;\n                await this.join({\n                    ...this.joinCallData,\n                    migrating_from: currentSfu\n                });\n            } finally{\n                // cleanup the migration_from field after the migration is complete or failed\n                // as we don't want to keep dirty data in the join call data\n                delete this.joinCallData?.migrating_from;\n            }\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n            try {\n                // Wait for the migration to complete, then close the previous SFU client\n                // and the peer connection instances. In case of failure, the migration\n                // task would throw an error and REJOIN would be attempted.\n                await migrationTask;\n                // in MIGRATE, we can consider the call as joined only after\n                // `participantMigrationComplete` event is received, signaled by\n                // the `migrationTask`\n                this.state.setCallingState(CallingState.JOINED);\n            } finally{\n                currentSubscriber?.close();\n                currentPublisher?.close({\n                    stopTracks: false\n                });\n                // and close the previous SFU client, without specifying close code\n                currentSfuClient.close();\n            }\n        };\n        /**\n         * Registers the various event handlers for reconnection.\n         *\n         * @internal\n         */ this.registerReconnectHandlers = ()=>{\n            // handles the legacy \"goAway\" event\n            const unregisterGoAway = this.on(\"goAway\", ()=>{\n                this.reconnect(WebsocketReconnectStrategy.MIGRATE).catch((err)=>{\n                    this.logger(\"warn\", \"[Reconnect] Error reconnecting\", err);\n                });\n            });\n            // handles the \"error\" event, through which the SFU can request a reconnect\n            const unregisterOnError = this.on(\"error\", (e)=>{\n                const { reconnectStrategy: strategy } = e;\n                if (strategy === WebsocketReconnectStrategy.UNSPECIFIED) return;\n                if (strategy === WebsocketReconnectStrategy.DISCONNECT) {\n                    this.leave({\n                        reason: \"SFU instructed to disconnect\"\n                    }).catch((err)=>{\n                        this.logger(\"warn\", `Can't leave call after disconnect request`, err);\n                    });\n                } else {\n                    this.reconnect(strategy).catch((err)=>{\n                        this.logger(\"warn\", \"[Reconnect] Error reconnecting\", err);\n                    });\n                }\n            });\n            const unregisterNetworkChanged = this.streamClient.on(\"network.changed\", (e)=>{\n                if (!e.online) {\n                    this.logger(\"debug\", \"[Reconnect] Going offline\");\n                    if (!this.hasJoinedOnce) return;\n                    this.lastOfflineTimestamp = Date.now();\n                    // create a new task that would resolve when the network is available\n                    const networkAvailableTask = promiseWithResolvers();\n                    networkAvailableTask.promise.then(()=>{\n                        let strategy = WebsocketReconnectStrategy.FAST;\n                        if (this.lastOfflineTimestamp) {\n                            const offline = (Date.now() - this.lastOfflineTimestamp) / 1000;\n                            if (offline > this.fastReconnectDeadlineSeconds) {\n                                // We shouldn't attempt FAST if we have exceeded the deadline.\n                                // The SFU would have already wiped out the session.\n                                strategy = WebsocketReconnectStrategy.REJOIN;\n                            }\n                        }\n                        this.reconnect(strategy).catch((err)=>{\n                            this.logger(\"warn\", \"[Reconnect] Error reconnecting after going online\", err);\n                        });\n                    });\n                    this.networkAvailableTask = networkAvailableTask;\n                    this.sfuStatsReporter?.stop();\n                    this.state.setCallingState(CallingState.OFFLINE);\n                } else {\n                    this.logger(\"debug\", \"[Reconnect] Going online\");\n                    this.sfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, \"Closing WS to reconnect after going online\");\n                    // we went online, release the previous waiters and reset the state\n                    this.networkAvailableTask?.resolve();\n                    this.networkAvailableTask = undefined;\n                    this.sfuStatsReporter?.start();\n                }\n            });\n            this.leaveCallHooks.add(unregisterGoAway);\n            this.leaveCallHooks.add(unregisterOnError);\n            this.leaveCallHooks.add(unregisterNetworkChanged);\n        };\n        /**\n         * Restores the published tracks after a reconnection.\n         * @internal\n         */ this.restorePublishedTracks = async ()=>{\n            // the tracks need to be restored in their original order of publishing\n            // otherwise, we might get `m-lines order mismatch` errors\n            for (const trackType of this.trackPublishOrder){\n                switch(trackType){\n                    case TrackType.AUDIO:\n                        const audioStream = this.microphone.state.mediaStream;\n                        if (audioStream) {\n                            await this.publishAudioStream(audioStream);\n                        }\n                        break;\n                    case TrackType.VIDEO:\n                        const videoStream = this.camera.state.mediaStream;\n                        if (videoStream) {\n                            await this.publishVideoStream(videoStream, this.camera.publishOptions);\n                        }\n                        break;\n                    case TrackType.SCREEN_SHARE:\n                        const screenShareStream = this.screenShare.state.mediaStream;\n                        if (screenShareStream) {\n                            await this.publishScreenShareStream(screenShareStream, {\n                                screenShareSettings: this.screenShare.getSettings()\n                            });\n                        }\n                        break;\n                    // screen share audio can't exist without a screen share, so we handle it there\n                    case TrackType.SCREEN_SHARE_AUDIO:\n                    case TrackType.UNSPECIFIED:\n                        break;\n                    default:\n                        ensureExhausted(trackType, \"Unknown track type\");\n                        break;\n                }\n            }\n        };\n        /**\n         * Restores the subscribed tracks after a reconnection.\n         * @internal\n         */ this.restoreSubscribedTracks = ()=>{\n            const { remoteParticipants } = this.state;\n            if (remoteParticipants.length <= 0) return;\n            this.updateSubscriptions(remoteParticipants, DebounceType.FAST);\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the previously published stream.\n         * The previous video stream will be stopped.\n         *\n         * @param videoStream the video stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishVideoStream = async (videoStream, opts = {})=>{\n            if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n            // joining is in progress, and we should wait until the client is ready\n            await this.sfuClient.joinTask;\n            if (!this.permissionsContext.hasPermission(OwnCapability.SEND_VIDEO)) {\n                throw new Error(\"No permission to publish video\");\n            }\n            if (!this.publisher) throw new Error(\"Publisher is not initialized\");\n            const [videoTrack] = videoStream.getVideoTracks();\n            if (!videoTrack) throw new Error(\"There is no video track in the stream\");\n            if (!this.trackPublishOrder.includes(TrackType.VIDEO)) {\n                this.trackPublishOrder.push(TrackType.VIDEO);\n            }\n            await this.publisher.publishStream(videoStream, videoTrack, TrackType.VIDEO, opts);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the audio stream that is currently being published.\n         * The previous audio stream will be stopped.\n         *\n         * @param audioStream the audio stream to publish.\n         */ this.publishAudioStream = async (audioStream)=>{\n            if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n            // joining is in progress, and we should wait until the client is ready\n            await this.sfuClient.joinTask;\n            if (!this.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO)) {\n                throw new Error(\"No permission to publish audio\");\n            }\n            if (!this.publisher) throw new Error(\"Publisher is not initialized\");\n            const [audioTrack] = audioStream.getAudioTracks();\n            if (!audioTrack) throw new Error(\"There is no audio track in the stream\");\n            if (!this.trackPublishOrder.includes(TrackType.AUDIO)) {\n                this.trackPublishOrder.push(TrackType.AUDIO);\n            }\n            await this.publisher.publishStream(audioStream, audioTrack, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         *\n         * Consecutive calls to this method will replace the previous screen-share stream.\n         * The previous screen-share stream will be stopped.\n         *\n         * @param screenShareStream the screen-share stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishScreenShareStream = async (screenShareStream, opts = {})=>{\n            if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n            // joining is in progress, and we should wait until the client is ready\n            await this.sfuClient.joinTask;\n            if (!this.permissionsContext.hasPermission(OwnCapability.SCREENSHARE)) {\n                throw new Error(\"No permission to publish screen share\");\n            }\n            if (!this.publisher) throw new Error(\"Publisher is not initialized\");\n            const [screenShareTrack] = screenShareStream.getVideoTracks();\n            if (!screenShareTrack) {\n                throw new Error(\"There is no screen share track in the stream\");\n            }\n            if (!this.trackPublishOrder.includes(TrackType.SCREEN_SHARE)) {\n                this.trackPublishOrder.push(TrackType.SCREEN_SHARE);\n            }\n            await this.publisher.publishStream(screenShareStream, screenShareTrack, TrackType.SCREEN_SHARE, opts);\n            const [screenShareAudioTrack] = screenShareStream.getAudioTracks();\n            if (screenShareAudioTrack) {\n                if (!this.trackPublishOrder.includes(TrackType.SCREEN_SHARE_AUDIO)) {\n                    this.trackPublishOrder.push(TrackType.SCREEN_SHARE_AUDIO);\n                }\n                await this.publisher.publishStream(screenShareStream, screenShareAudioTrack, TrackType.SCREEN_SHARE_AUDIO, opts);\n            }\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         *\n         * @param trackType the track type to stop publishing.\n         * @param stopTrack if `true` the track will be stopped, else it will be just disabled\n         */ this.stopPublish = async (trackType, stopTrack = true)=>{\n            this.logger(\"info\", `stopPublish ${TrackType[trackType]}, stop tracks: ${stopTrack}`);\n            await this.publisher?.unpublishStream(trackType, stopTrack);\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has started.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStarting = async ()=>{\n            return this.sfuClient?.startNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to notify start of noise cancellation\", err);\n            });\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has stopped.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStopped = async ()=>{\n            return this.sfuClient?.stopNoiseCancellation().catch((err)=>{\n                this.logger(\"warn\", \"Failed to notify stop of noise cancellation\", err);\n            });\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         * @param type the debounce type to use for the update.\n         */ this.updateSubscriptionsPartial = (trackType, changes, type = DebounceType.SLOW)=>{\n            const participants = this.state.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === \"videoTrack\" ? \"videoDimension\" : trackType === \"screenShareTrack\" ? \"screenShareDimension\" : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n            this.updateSubscriptions(participants, type);\n        };\n        this.updateSubscriptions = (participants, type = DebounceType.SLOW)=>{\n            const subscriptions = [];\n            for (const p of participants){\n                // we don't want to subscribe to our own tracks\n                if (p.isLocalParticipant) continue;\n                // NOTE: audio tracks don't have to be requested explicitly\n                // as the SFU will implicitly subscribe us to all of them,\n                // once they become available.\n                if (p.videoDimension && hasVideo(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: p.videoDimension\n                    });\n                }\n                if (p.screenShareDimension && hasScreenShare(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE,\n                        dimension: p.screenShareDimension\n                    });\n                }\n                if (hasScreenShareAudio(p)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE_AUDIO\n                    });\n                }\n            }\n            // schedule update\n            this.trackSubscriptionsSubject.next({\n                type,\n                data: subscriptions\n            });\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Updates the list of video layers to publish.\n         *\n         * @internal\n         * @param enabledLayers the list of layers to enable.\n         */ this.updatePublishQuality = async (enabledLayers)=>{\n            return this.publisher?.updateVideoPublishQuality(enabledLayers);\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            if (userIdsToMute.length > 0) {\n                return this.muteUser(userIdsToMute, type);\n            }\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Starts the transcription of the call.\n         *\n         * @param request the request data.\n         */ this.startTranscription = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_transcription`, request);\n        };\n        /**\n         * Stops the transcription of the call.\n         */ this.stopTranscription = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_transcription`);\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call. The call settings object contains infomration about which permissions can be requested during a call (for example a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(\", \")}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, {});\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post(\"/call/members\", {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.leaveCallHooks.add(createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                // ignore if the call is not ringing\n                if (this.state.callingState !== CallingState.RINGING) return;\n                const timeoutInMs = settings.ring.auto_cancel_timeout_ms;\n                // 0 means no auto-drop\n                if (timeoutInMs <= 0) return;\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = setTimeout(()=>{\n                    this.leave({\n                        reason: \"ring: timeout\"\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to drop call\", err);\n                    });\n                }, timeoutInMs);\n            }));\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieves the list of transcriptions for the current call.\n         *\n         * @returns the list of transcriptions.\n         */ this.queryTranscriptions = async ()=>{\n            return this.streamClient.get(`${this.streamClientBasePath}/transcriptions`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Submit user feedback for the call\n         *\n         * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n         * @param reason The reason/description for the rating\n         * @param custom Custom data\n         * @returns\n         */ this.submitFeedback = async (rating, { reason, custom } = {})=>{\n            if (rating < 1 || rating > 5) {\n                throw new Error(\"Rating must be between 1 and 5\");\n            }\n            const callSessionId = this.state.session?.id;\n            if (!callSessionId) {\n                throw new Error(\"Feedback can be submitted only in the context of a call session\");\n            }\n            const { sdkName, sdkVersion, ...platform } = getSdkSignature(getClientDetails());\n            // user sessionId is not available once the call has been left\n            // until we relax the backend validation, we'll send N/A\n            const userSessionId = this.sfuClient?.sessionId ?? \"N/A\";\n            const endpoint = `${this.streamClientBasePath}/feedback/${callSessionId}`;\n            return this.streamClient.post(endpoint, {\n                rating,\n                reason,\n                user_session_id: userSessionId,\n                sdk: sdkName,\n                sdk_version: sdkVersion,\n                custom: {\n                    ...custom,\n                    \"x-stream-platform-data\": platform\n                }\n            });\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        /**\n         * Applies the device configuration from the backend.\n         *\n         * @internal\n         */ this.applyDeviceConfig = async (status)=>{\n            await this.initCamera({\n                setStatus: status\n            }).catch((err)=>{\n                this.logger(\"warn\", \"Camera init failed\", err);\n            });\n            await this.initMic({\n                setStatus: status\n            }).catch((err)=>{\n                this.logger(\"warn\", \"Mic init failed\", err);\n            });\n        };\n        this.initCamera = async (options)=>{\n            // Wait for any in progress camera operation\n            await this.camera.statusChangeSettled();\n            if (this.state.localParticipant?.videoStream || !this.permissionsContext.hasPermission(\"send-video\")) {\n                return;\n            }\n            // Set camera direction if it's not yet set\n            if (!this.camera.state.direction && !this.camera.state.selectedDevice) {\n                let defaultDirection = \"front\";\n                const backendSetting = this.state.settings?.video.camera_facing;\n                if (backendSetting) {\n                    defaultDirection = backendSetting === \"front\" ? \"front\" : \"back\";\n                }\n                this.camera.state.setDirection(defaultDirection);\n            }\n            // Set target resolution\n            const targetResolution = this.state.settings?.video.target_resolution;\n            if (targetResolution) {\n                await this.camera.selectTargetResolution(targetResolution);\n            }\n            if (options.setStatus) {\n                // Publish already that was set before we joined\n                if (this.camera.enabled && this.camera.state.mediaStream && !this.publisher?.isPublishing(TrackType.VIDEO)) {\n                    await this.publishVideoStream(this.camera.state.mediaStream, this.camera.publishOptions);\n                }\n                // Start camera if backend config specifies, and there is no local setting\n                if (this.camera.state.status === undefined && this.state.settings?.video.camera_default_on) {\n                    await this.camera.enable();\n                }\n            }\n        };\n        this.initMic = async (options)=>{\n            // Wait for any in progress mic operation\n            await this.microphone.statusChangeSettled();\n            if (this.state.localParticipant?.audioStream || !this.permissionsContext.hasPermission(\"send-audio\")) {\n                return;\n            }\n            if (options.setStatus) {\n                // Publish media stream that was set before we joined\n                if (this.microphone.enabled && this.microphone.state.mediaStream && !this.publisher?.isPublishing(TrackType.AUDIO)) {\n                    await this.publishAudioStream(this.microphone.state.mediaStream);\n                }\n                // Start mic if backend config specifies, and there is no local setting\n                if (this.microphone.state.status === undefined && this.state.settings?.audio.mic_default_on) {\n                    await this.microphone.enable();\n                }\n            }\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = \"audioTrack\")=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || \"https://getstream.io/random_svg/?name=x&id=x\";\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener(\"error\", handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set(\"w\", String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set(\"h\", String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener(\"error\", handleError);\n            };\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            \"Call\"\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n    }\n    async setup() {\n        await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n            if (this.initialized) return;\n            this.leaveCallHooks.add(this.on(\"all\", (event)=>{\n                // update state with the latest event data\n                this.state.updateFromEvent(event);\n            }));\n            this.leaveCallHooks.add(registerEventHandlers(this, this.dispatcher));\n            this.registerEffects();\n            this.registerReconnectHandlers();\n            this.leaveCallHooks.add(createSubscription(this.trackSubscriptionsSubject.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__.debounce)((v)=>(0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__.timer)(v.type)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.map)((v)=>v.data)), (subscriptions)=>this.sfuClient?.updateSubscriptions(subscriptions).catch((err)=>{\n                    this.logger(\"debug\", `Failed to update track subscriptions`, err);\n                })));\n            if (this.state.callingState === CallingState.LEFT) {\n                this.state.setCallingState(CallingState.IDLE);\n            }\n            this.initialized = true;\n        });\n    }\n    registerEffects() {\n        this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n        createSubscription(this.state.settings$, (settings)=>{\n            if (!settings) return;\n            this.permissionsContext.setCallSettings(settings);\n        }));\n        this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n        createSafeAsyncSubscription(this.state.ownCapabilities$, this.handleOwnCapabilitiesUpdated));\n        this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n        createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n            if (!blockedUserIds || blockedUserIds.length === 0) return;\n            const currentUserId = this.currentUserId;\n            if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                this.logger(\"info\", \"Leaving call because of being blocked\");\n                await this.leave({\n                    reason: \"user blocked\"\n                }).catch((err)=>{\n                    this.logger(\"error\", \"Error leaving call after being blocked\", err);\n                });\n            }\n        }));\n        this.leaveCallHooks.add(// watch for auto drop cancellation\n        createSubscription(this.state.callingState$, (callingState)=>{\n            if (!this.ringing) return;\n            if (callingState === CallingState.JOINED || callingState === CallingState.JOINING || callingState === CallingState.LEFT) {\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = undefined;\n            }\n        }));\n        this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n        createSubscription(this.ringingSubject, (isRinging)=>{\n            if (!isRinging) return;\n            const callSession = this.state.session;\n            const receiver_id = this.clientStore.connectedUser?.id;\n            const ended_at = callSession?.ended_at;\n            const created_by_id = this.state.createdBy?.id;\n            const rejected_by = callSession?.rejected_by;\n            const accepted_by = callSession?.accepted_by;\n            let leaveCallIdle = false;\n            if (ended_at) {\n                // call was ended before it was accepted or rejected so we should leave it to idle\n                leaveCallIdle = true;\n            } else if (created_by_id && rejected_by) {\n                if (rejected_by[created_by_id]) {\n                    // call was cancelled by the caller\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && rejected_by) {\n                if (rejected_by[receiver_id]) {\n                    // call was rejected by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && accepted_by) {\n                if (accepted_by[receiver_id]) {\n                    // call was accepted by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            }\n            if (leaveCallIdle) {\n                if (this.state.callingState !== CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.IDLE);\n                }\n            } else {\n                if (this.state.callingState === CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.RINGING);\n                }\n                this.scheduleAutoDrop();\n                this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n            }\n        }));\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n}\nclass InsightMetrics {\n    constructor(){\n        this.connectionStartTimestamp = null;\n        this.wsTotalFailures = 0;\n        this.wsConsecutiveFailures = 0;\n        this.instanceClientId = randomId();\n    }\n}\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ const postInsights = async (insightType, insights)=>{\n    const maxAttempts = 3;\n    for(let i = 0; i < maxAttempts; i++){\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_34__[\"default\"].post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n        } catch (e) {\n            await sleep((i + 1) * 3000);\n            continue;\n        }\n        break;\n    }\n};\nfunction buildWsFatalInsight(connection, event) {\n    return {\n        ...event,\n        ...buildWsBaseInsight(connection)\n    };\n}\nfunction buildWsBaseInsight(connection) {\n    const { client } = connection;\n    return {\n        ready_state: connection.ws?.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        // device: client.options.device,\n        device: \"browser\",\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? navigator?.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? navigator?.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res)=>res.code !== undefined;\nconst isErrorEvent = (res)=>res.error !== undefined;\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = \"info\")=>{\n            this.client.logger(level, \"connection:\" + msg, {\n                ...extra\n            });\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            // const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n            // params.set('json', qs);\n            params.set(\"api_key\", this.client.key);\n            params.set(\"stream-auth-type\", this.client.getAuthType());\n            params.set(\"X-Stream-Client\", this.client.getUserAgent());\n            // params.append('authorization', this.client._getToken()!);\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                this._log(\"onlineStatusChanged() - Status changing to offline\");\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger(\"error\", `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger(\"error\", `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = {\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            };\n            this.authenticationSent = true;\n            this.ws?.send(JSON.stringify(authMessage));\n            this._log(\"onopen() - onopen callback\", {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onmessage() - onmessage callback\", {\n                event,\n                wsID\n            });\n            const data = typeof event.data === \"string\" ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isResolved && data && data.type === \"connection.error\") {\n                this.isResolved = true;\n                if (data.error) {\n                    // @ts-expect-error - the types of _errorFromWSEvent are incorrect\n                    this.rejectPromise?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === \"health.check\" || data.type === \"connection.ok\")) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === \"connection.ok\") {\n                this.resolvePromise?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === \"connection.error\" && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                data.received_at = new Date();\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onclose() - onclose callback - \" + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                this.rejectPromise?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectPromise?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this.rejectPromise?.(this._errorFromWSEvent(event));\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         *\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         *\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            }\n            // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            this._log(`_errorFromWSEvent() - WS failed with code ${code}`, {\n                event\n            }, \"warn\");\n            const error = new Error(`WS failed with code ${code} and reason - ${message}`);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpen = new Promise((resolve, reject)=>{\n                this.resolvePromise = resolve;\n                this.rejectPromise = reject;\n            });\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            if (this.healthCheckTimeoutRef) {\n                clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: \"health.check\",\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch (e) {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            if (this.connectionCheckTimeoutRef) {\n                clearTimeout(this.connectionCheckTimeoutRef);\n            }\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** True after the auth payload is sent to the server */ this.authenticationSent = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-ignore\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-ignore\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-ignore\n                        code: error.code,\n                        // @ts-ignore\n                        StatusCode: error.StatusCode,\n                        // @ts-ignore\n                        message: error.message,\n                        // @ts-ignore\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: \"\",\n                    StatusCode: \"\",\n                    message: \"initial WS connection could not be established\",\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        // remove ws handlers...\n        if (this.ws && this.ws.removeAllListeners) {\n            this.ws.removeAllListeners();\n        }\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? \"with\" : \"without\"} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback) return; // simply ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        this.requestID = randomId();\n        this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch (e) {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            let mustSetupConnectionIdPromise = true;\n            if (this.client.connectionIdPromise) {\n                if (await isPromisePending(this.client.connectionIdPromise)) {\n                    mustSetupConnectionIdPromise = false;\n                }\n            }\n            if (mustSetupConnectionIdPromise) {\n                this.client._setupConnectionIdPromise();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`, {\n                wsURL,\n                requestID: this.requestID\n            });\n            this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_5___default())(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                    postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                    this.client.insightMetrics.wsConsecutiveFailures = 0;\n                }\n                return response;\n            }\n        } catch (err) {\n            await this.client._setupConnectionIdPromise();\n            this.isConnecting = false;\n            // @ts-ignore\n            this._log(`_connect() - Error - `, err);\n            if (this.client.options.enableInsights) {\n                this.client.insightMetrics.wsConsecutiveFailures++;\n                this.client.insightMetrics.wsTotalFailures++;\n                const insights = buildWsFatalInsight(this, convertErrorToJson(err));\n                postInsights?.(\"ws_fatal\", insights);\n            }\n            this.client.rejectConnectionId?.(err);\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log(\"_reconnect() - Initiating the reconnect\");\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n            return;\n        }\n        if (this.isDisconnected && this.client.options.enableWSFallback) {\n            this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n            return;\n        }\n        this._log(\"_reconnect() - Destroying current WS connection\");\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log(\"_reconnect() - Waiting for recoverCallBack\");\n            // await this.client.recoverState();\n            this._log(\"_reconnect() - Finished recoverCallBack\");\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                this._reconnect();\n            }\n        }\n        this._log(\"_reconnect() - == END ==\");\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.removeAllListeners();\n            this?.ws?.close();\n        } catch (e) {\n        // we don't care\n        }\n    }\n}\nfunction isString(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString(arrayOrString);\n}\nfunction map(arrayOrString, callback) {\n    const res = [];\n    if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                const kValue = arrayOrString.charAt(k);\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (k in arrayOrString) {\n                const kValue = arrayOrString[k];\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    }\n    return res;\n}\nconst encodeBase64 = (data)=>(0,base64_js__WEBPACK_IMPORTED_MODULE_6__.fromByteArray)(new Uint8Array(map(data, (char)=>char.charCodeAt(0))));\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = \"\";\n    const A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\"\n    ].join(\".\");\n}\nfunction UserFromToken(token) {\n    const fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    /**\n     * Constructor\n     *\n     * @param {Secret} secret\n     */ constructor(secret){\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.validateToken(tokenOrProvider, user, isAnonymous);\n            this.user = user;\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = \"provider\";\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                this.token = tokenOrProvider;\n                this.type = \"static\";\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider, user, isAnonymous)=>{\n            // allow empty token for anon user\n            if (user && isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error(\"UserWithId token can not be empty\");\n            }\n            if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n                throw new Error(\"user token should either be a string or a function\");\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                // Allow empty token for anonymous users\n                if (isAnonymous && tokenOrProvider === \"\") return;\n                const tokenUserId = UserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || !isAnonymous && tokenUserId !== user.id)) {\n                    throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            // eslint-disable-next-line no-async-promise-executor\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === \"static\") {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== \"string\") {\n                    try {\n                        this.token = await this.tokenProvider();\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            throw new Error(`User token is not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === \"static\";\n        this.loadTokenPromise = null;\n        if (secret) {\n            this.secret = secret;\n        }\n        this.type = \"static\";\n    }\n}\nconst APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    const err = APIErrorCodes[`${error.code}`];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nclass WSConnectionFallback {\n    constructor(client){\n        /** @private */ this._onlineStatusChanged = (event)=>{\n            this._log(`_onlineStatusChanged() - ${event.type}`);\n            if (event.type === \"offline\") {\n                this._setState(ConnectionState.Closed);\n                this.cancelToken?.cancel(\"disconnect() is called\");\n                this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && this.state === ConnectionState.Closed) {\n                this.connect(true);\n            }\n        };\n        /** @private */ this._req = async (params, config, retry)=>{\n            if (!this.cancelToken && !params.close) {\n                this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_34__[\"default\"].CancelToken.source();\n            }\n            try {\n                const res = await this.client.doAxiosRequest(\"get\", this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                    config: {\n                        ...config,\n                        cancelToken: this.cancelToken?.token\n                    },\n                    params,\n                    publicEndpoint: true\n                });\n                this.consecutiveFailures = 0; // always reset in case of no error\n                return res;\n            } catch (err) {\n                this.consecutiveFailures += 1;\n                // @ts-ignore\n                if (retry && isErrorRetryable(err)) {\n                    this._log(`_req() - Retryable error, retrying request`);\n                    await sleep(retryInterval(this.consecutiveFailures));\n                    return this._req(params, config, retry);\n                }\n                throw err;\n            }\n        };\n        /** @private */ this._poll = async ()=>{\n            while(this.state === ConnectionState.Connected){\n                try {\n                    const data = await this._req({}, {\n                        timeout: 30000\n                    }, true); // 30s => API responds in 20s if there is no event\n                    if (data.events?.length) {\n                        for(let i = 0; i < data.events.length; i++){\n                            this.client.dispatchEvent(data.events[i]);\n                        }\n                    }\n                } catch (err) {\n                    if (axios__WEBPACK_IMPORTED_MODULE_34__[\"default\"].isCancel(err)) {\n                        this._log(`_poll() - axios canceled request`);\n                        return;\n                    }\n                    /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */ // @ts-ignore\n                    if (isConnectionIDError(err)) {\n                        this._log(`_poll() - ConnectionID error, connecting without ID...`);\n                        this._setState(ConnectionState.Disconnected);\n                        this.connect(true);\n                        return;\n                    }\n                    // @ts-ignore\n                    if (isAPIError(err) && !isErrorRetryable(err)) {\n                        this._setState(ConnectionState.Closed);\n                        return;\n                    }\n                    await sleep(retryInterval(this.consecutiveFailures));\n                }\n            }\n        };\n        /**\n         * connect try to open a longpoll request\n         * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n         */ this.connect = async (reconnect = false)=>{\n            if (this.state === ConnectionState.Connecting) {\n                this._log(\"connect() - connecting already in progress\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            if (this.state === ConnectionState.Connected) {\n                this._log(\"connect() - already connected and polling\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            this._setState(ConnectionState.Connecting);\n            this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n            try {\n                const { event } = await this._req({\n                    json: this.client._buildWSPayload()\n                }, {\n                    timeout: 8000\n                }, reconnect);\n                this._setState(ConnectionState.Connected);\n                this.connectionID = event.connection_id;\n                this.client.resolveConnectionId?.();\n                // @ts-expect-error\n                this.client.dispatchEvent(event);\n                this._poll();\n                return event;\n            } catch (err) {\n                this._setState(ConnectionState.Closed);\n                this.client.rejectConnectionId?.();\n                throw err;\n            }\n        };\n        /**\n         * isHealthy checks if there is a connectionID and connection is in Connected state\n         */ this.isHealthy = ()=>{\n            return !!this.connectionID && this.state === ConnectionState.Connected;\n        };\n        this.disconnect = async (timeout = 2000)=>{\n            removeConnectionEventListeners(this._onlineStatusChanged);\n            this._setState(ConnectionState.Disconnected);\n            this.cancelToken?.cancel(\"disconnect() is called\");\n            this.cancelToken = undefined;\n            const connection_id = this.connectionID;\n            this.connectionID = undefined;\n            try {\n                await this._req({\n                    close: true,\n                    connection_id\n                }, {\n                    timeout\n                }, false);\n                this._log(`disconnect() - Closed connectionID`);\n            } catch (err) {\n                this._log(`disconnect() - Failed`, {\n                    err\n                }, \"error\");\n            }\n        };\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _log(msg, extra = {}, level = \"info\") {\n        this.client.logger(level, \"WSConnectionFallback:\" + msg, {\n            ...extra\n        });\n    }\n    _setState(state) {\n        this._log(`_setState() - ${state}`);\n        // transition from connecting => connected\n        if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: true\n            });\n        }\n        if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: false\n            });\n        }\n        this.state = state;\n    }\n}\nconst logger = getLogger([\n    \"location\"\n]);\nconst HINT_URL = `https://hint.stream-io-video.com/`;\nconst getLocationHint = async (hintUrl = HINT_URL, timeout = 2000)=>{\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n    try {\n        const response = await fetch(hintUrl, {\n            method: \"HEAD\",\n            signal: abortController.signal\n        });\n        const awsPop = response.headers.get(\"x-amz-cf-pop\") || \"ERR\";\n        logger(\"debug\", `Location header: ${awsPop}`);\n        return awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n        logger(\"warn\", `Failed to get location hint from ${hintUrl}`, e);\n        return \"ERR\";\n    } finally{\n        clearTimeout(timeoutId);\n    }\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.devToken = (userID)=>{\n            return DevToken(userID);\n        };\n        this.getAuthType = ()=>{\n            return this.anonymous ? \"anonymous\" : \"jwt\";\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === \"ERR\") {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} userTokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, userTokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.setUserPromise) {\n                this.logger(\"warn\", \"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                return this.setUserPromise;\n            }\n            if (this.userID) {\n                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n            }\n            if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n                this.logger(\"warn\", 'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            const setTokenPromise = this._setToken(user, userTokenOrProvider, this.anonymous);\n            this._setUser(user);\n            const wsPromise = this.openConnection();\n            this.setUserPromise = Promise.all([\n                setTokenPromise,\n                wsPromise\n            ]).then((result)=>result[1]);\n            try {\n                addConnectionEventListeners(this.updateNetworkConnectionStatus);\n                return await this.setUserPromise;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    this.closeConnection();\n                } else {\n                    this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setToken = (user, userTokenOrProvider, isAnonymous)=>this.tokenManager.setTokenOrProvider(userTokenOrProvider, user, isAnonymous);\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            await Promise.all([\n                this.wsConnection?.disconnect(timeout),\n                this.wsFallback?.disconnect(timeout)\n            ]);\n            return Promise.resolve();\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error(\"UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n            }\n            if (this.wsConnection?.isConnecting && this.wsPromise) {\n                this.logger(\"info\", \"client:openConnection() - connection already in progress\");\n                return this.wsPromise;\n            }\n            if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n                this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\");\n                return Promise.resolve();\n            }\n            this._setupConnectionIdPromise();\n            this.clientID = `${this.userID}--${randomId()}`;\n            this.wsPromise = this.connect();\n            return this.wsPromise;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger(\"info\", \"client:disconnect() - Disconnecting the client\");\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            removeConnectionEventListeners(this.updateNetworkConnectionStatus);\n            this.tokenManager.reset();\n            this.connectionIdPromise = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest(\"post\", \"/guest\", {\n                user: {\n                    ...user\n                }\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            addConnectionEventListeners(this.updateNetworkConnectionStatus);\n            this._setupConnectionIdPromise();\n            this.anonymous = true;\n            await this._setToken(user, tokenOrProvider, this.anonymous);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        /**\n         * sets up the this.connectionIdPromise\n         */ this._setupConnectionIdPromise = async ()=>{\n            /** a promise that is resolved once connection id is set */ this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            this.logger(\"trace\", `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            this.logger(\"trace\", `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this._logApiError = (type, url, error)=>{\n            this.logger(\"error\", `client:${type} - Error - url: ${url}`, {\n                url,\n                error\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise\n                ]);\n                // we need to wait for presence of connection id before making requests\n                try {\n                    await this.connectionIdPromise;\n                } catch (e) {\n                    // in case connection id was rejected\n                    // reconnection maybe in progress\n                    // we can wait for healthy connection to resolve, which rejects when 15s timeout is reached\n                    await this.wsConnection?._waitForHealthy();\n                    await this.connectionIdPromise;\n                }\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case \"get\":\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case \"delete\":\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case \"post\":\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case \"put\":\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case \"patch\":\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case \"options\":\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error(\"Invalid request type\");\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return this.handleResponse(response);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.[\"x-client-request-id\"];\n                this.consecutiveFailures += 1;\n                if (e.response) {\n                    this._logApiError(type, url, e.response);\n                    /** connection_fallback depends on this token expiration logic */ if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n                        if (this.consecutiveFailures > 1) {\n                            await sleep(retryInterval(this.consecutiveFailures));\n                        }\n                        await this.tokenManager.loadToken();\n                        return await this.doAxiosRequest(type, url, data, options);\n                    }\n                    return this.handleResponse(e.response);\n                } else {\n                    this._logApiError(type, url, e);\n                    // eslint-disable-next-line no-throw-literal\n                    throw e;\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest(\"get\", url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest(\"put\", url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest(\"post\", url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest(\"patch\", url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest(\"delete\", url, null, {\n                params\n            });\n        };\n        this.errorFromResponse = (response)=>{\n            const { data, status } = response;\n            const err = new ErrorFromResponse();\n            err.message = `Stream error code ${data.code}: ${data.message}`;\n            err.code = data.code;\n            err.unrecoverable = data.unrecoverable;\n            err.response = response;\n            err.status = status;\n            return err;\n        };\n        this.handleResponse = (response)=>{\n            const data = response.data;\n            if (isErrorResponse(response)) {\n                throw this.errorFromResponse(response);\n            }\n            return data;\n        };\n        this.dispatchEvent = (event)=>{\n            this.logger(\"debug\", `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n            }\n            if (!this.wsBaseURL) {\n                throw Error(\"Websocket base url not set\");\n            }\n            if (!this.clientID) {\n                throw Error(\"clientID is not set\");\n            }\n            if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                this._sayHi();\n            }\n            // The StableWSConnection handles all the reconnection logic.\n            if (this.options.wsConnection && this.node) {\n                // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                this.options.wsConnection.setClient(this);\n                this.wsConnection = this.options.wsConnection;\n            } else {\n                this.wsConnection = new StableWSConnection(this);\n            }\n            try {\n                // if fallback is used before, continue using it instead of waiting for WS to fail\n                if (this.wsFallback) {\n                    return await this.wsFallback.connect();\n                }\n                this.logger(\"info\", \"StreamClient.connect: this.wsConnection.connect()\");\n                // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n                return await this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n            } catch (err) {\n                // run fallback only if it's WS/Network error and not a normal API error\n                // make sure browser is online before even trying the longpoll\n                if (this.options.enableWSFallback && // @ts-ignore\n                isWSFailure(err) && isOnline(this.logger)) {\n                    this.logger(\"warn\", \"client:connect() - WS failed, fallback to longpoll\");\n                    this.dispatchEvent({\n                        type: \"transport.changed\",\n                        mode: \"longpoll\"\n                    });\n                    this.wsConnection._destroyCurrentWSConnection();\n                    this.wsConnection.disconnect().then(); // close WS so no retry\n                    this.wsFallback = new WSConnectionFallback(this);\n                    return await this.wsFallback.connect();\n                }\n                throw err;\n            }\n        };\n        /**\n         * Check the connectivity with server for warmup purpose.\n         *\n         * @private\n         */ this._sayHi = ()=>{\n            const client_request_id = randomId();\n            const opts = {\n                headers: axios__WEBPACK_IMPORTED_MODULE_1__.AxiosHeaders.from({\n                    \"x-client-request-id\": client_request_id\n                })\n            };\n            this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch((e)=>{\n                if (this.options.enableInsights) {\n                    postInsights(\"http_hi_failed\", {\n                        api_key: this.key,\n                        err: e,\n                        client_request_id\n                    });\n                }\n            });\n        };\n        this.getUserAgent = ()=>{\n            const version = \"1.7.3\";\n            return this.userAgent || `stream-video-javascript-client-${this.node ? \"node\" : \"browser\"}-${version}`;\n        };\n        this.setUserAgent = (userAgent)=>{\n            this.userAgent = userAgent;\n        };\n        /**\n         * _isUsingServerAuth - Returns true if we're using server side auth\n         */ this._isUsingServerAuth = ()=>!!this.secret;\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            if (!options.headers?.[\"x-client-request-id\"]) {\n                options.headers = {\n                    ...options.headers,\n                    \"x-client-request-id\": randomId()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    \"stream-auth-type\": options.publicEndpoint && !this.user ? \"anonymous\" : this.getAuthType(),\n                    \"X-Stream-Client\": this.getUserAgent(),\n                    ...options.headers\n                },\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        /**\n         * encode ws url payload\n         * @private\n         * @returns json string\n         */ this._buildWSPayload = (client_request_id)=>{\n            return JSON.stringify({\n                user_id: this.userID,\n                user_details: this._user,\n                client_request_id\n            });\n        };\n        this.updateNetworkConnectionStatus = (event)=>{\n            if (event.type === \"offline\") {\n                this.logger(\"debug\", \"device went offline\");\n                this.dispatchEvent({\n                    type: \"network.changed\",\n                    online: false\n                });\n            } else if (event.type === \"online\") {\n                this.logger(\"debug\", \"device went online\");\n                this.dispatchEvent({\n                    type: \"network.changed\",\n                    online: true\n                });\n            }\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== \"undefined\"\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            warmUp: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_4___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || \"https://video.stream-io-api.com/video\");\n        if (typeof process !== \"undefined\" && \"env\" in process && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030/video\");\n        }\n        if (typeof process !== \"undefined\" && \"env\" in process && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(`http://${process.env.STREAM_LOCAL_TEST_HOST}/video`);\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_34__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n}\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.logLevel = \"warn\";\n        this.eventHandlersToUnregister = [];\n        /**\n         * Connects the given user to the client.\n         * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n         * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n         *\n         * @param user the user to connect.\n         * @param token a token or a function that returns a token.\n         */ this.connectUser = async (user, token)=>{\n            if (user.type === \"anonymous\") {\n                user.id = \"!anon\";\n                return this.connectAnonymousUser(user, token);\n            }\n            let connectUser = ()=>{\n                return this.streamClient.connectUser(user, token);\n            };\n            if (user.type === \"guest\") {\n                connectUser = async ()=>{\n                    return this.streamClient.connectGuestUser(user);\n                };\n            }\n            this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectUser()) : connectUser();\n            this.connectionPromise?.finally(()=>this.connectionPromise = undefined);\n            const connectUserResponse = await this.connectionPromise;\n            // connectUserResponse will be void if connectUser called twice for the same user\n            if (connectUserResponse?.me) {\n                this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n            }\n            this.eventHandlersToUnregister.push(this.on(\"connection.changed\", (event)=>{\n                if (event.online) {\n                    const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                    this.logger(\"info\", `Rewatching calls after connection changed ${callsToReWatch.join(\", \")}`);\n                    if (callsToReWatch.length > 0) {\n                        this.queryCalls({\n                            watch: true,\n                            filter_conditions: {\n                                cid: {\n                                    $in: callsToReWatch\n                                }\n                            },\n                            sort: [\n                                {\n                                    field: \"cid\",\n                                    direction: 1\n                                }\n                            ]\n                        }).catch((err)=>{\n                            this.logger(\"error\", \"Failed to re-watch calls\", err);\n                        });\n                    }\n                }\n            }));\n            this.eventHandlersToUnregister.push(this.on(\"call.created\", (event)=>{\n                const { call, members } = event;\n                if (user.id === call.created_by.id) {\n                    this.logger(\"warn\", \"Received `call.created` sent by the current user\");\n                    return;\n                }\n                this.logger(\"info\", `New call created and registered: ${call.cid}`);\n                const newCall = new Call({\n                    streamClient: this.streamClient,\n                    type: call.type,\n                    id: call.id,\n                    members,\n                    clientStore: this.writeableStateStore\n                });\n                newCall.state.updateFromCallResponse(call);\n                this.writeableStateStore.registerCall(newCall);\n            }));\n            this.eventHandlersToUnregister.push(this.on(\"call.ring\", async (event)=>{\n                const { call, members } = event;\n                if (user.id === call.created_by.id) {\n                    this.logger(\"debug\", \"Received `call.ring` sent by the current user so ignoring the event\");\n                    return;\n                }\n                // The call might already be tracked by the client,\n                // if `call.created` was received before `call.ring`.\n                // In that case, we cleanup the already tracked call.\n                const prevCall = this.writeableStateStore.findCall(call.type, call.id);\n                await prevCall?.leave({\n                    reason: \"cleaning-up in call.ring\"\n                });\n                // we create a new call\n                const theCall = new Call({\n                    streamClient: this.streamClient,\n                    type: call.type,\n                    id: call.id,\n                    members,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                theCall.state.updateFromCallResponse(call);\n                // we fetch the latest metadata for the call from the server\n                await theCall.get();\n                this.writeableStateStore.registerCall(theCall);\n            }));\n            return connectUserResponse;\n        };\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            if (!this.streamClient.user && !this.connectionPromise) {\n                return;\n            }\n            const userId = this.streamClient.user?.id;\n            const apiKey = this.streamClient.key;\n            const disconnectUser = ()=>this.streamClient.disconnectUser(timeout);\n            this.disconnectionPromise = this.connectionPromise ? this.connectionPromise.then(()=>disconnectUser()) : disconnectUser();\n            this.disconnectionPromise.finally(()=>this.disconnectionPromise = undefined);\n            await this.disconnectionPromise;\n            if (userId) {\n                StreamVideoClient._instanceMap.delete(apiKey + userId);\n            }\n            this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n            this.eventHandlersToUnregister = [];\n            this.writeableStateStore.setConnectedUser(undefined);\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         */ this.call = (type, id)=>{\n            return new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest(\"post\", \"/guest\", data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post(\"/calls\", data);\n            const calls = [];\n            for (const c of response.calls){\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                await call.applyDeviceConfig(false);\n                if (data.watch) {\n                    this.writeableStateStore.registerCall(call);\n                }\n                calls.push(call);\n            }\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post(\"/devices\", {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         */ this.addVoipDevice = async (id, push_provider, push_provider_name, userID)=>{\n            return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get(\"/devices\", userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete(\"/devices\", {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            // if we find the call and is already ringing, we don't need to create a new call\n            // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n            let call = this.state.calls.find((c)=>c.cid === call_cid && c.ringing);\n            if (!call) {\n                // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                const [callType, callId] = call_cid.split(\":\");\n                call = new Call({\n                    streamClient: this.streamClient,\n                    type: callType,\n                    id: callId,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                await call.get();\n            }\n            return call;\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            const connectAnonymousUser = ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n            this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectAnonymousUser()) : connectAnonymousUser();\n            this.connectionPromise.finally(()=>this.connectionPromise = undefined);\n            return this.connectionPromise;\n        };\n        let logger = logToConsole;\n        let logLevel = \"warn\";\n        if (typeof apiKeyOrArgs === \"string\") {\n            logLevel = opts?.logLevel || logLevel;\n            logger = opts?.logger || logger;\n        } else {\n            logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n            logger = apiKeyOrArgs.options?.logger || logger;\n        }\n        setLogger(logger, logLevel);\n        this.logger = getLogger([\n            \"client\"\n        ]);\n        const coordinatorLogger = getLogger([\n            \"coordinator\"\n        ]);\n        if (typeof apiKeyOrArgs === \"string\") {\n            this.streamClient = new StreamClient(apiKeyOrArgs, {\n                persistUserOnConnectionFailure: true,\n                ...opts,\n                logLevel,\n                logger: coordinatorLogger\n            });\n        } else {\n            this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n                persistUserOnConnectionFailure: true,\n                ...apiKeyOrArgs.options,\n                logLevel,\n                logger: coordinatorLogger\n            });\n            const sdkInfo = getSdkInfo();\n            if (sdkInfo) {\n                const sdkName = SdkType[sdkInfo.type].toLowerCase();\n                const sdkVersion = `${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`;\n                const userAgent = this.streamClient.getUserAgent();\n                this.streamClient.setUserAgent(`${userAgent}-video-${sdkName}-sdk-${sdkVersion}`);\n            }\n        }\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== \"string\") {\n            const user = apiKeyOrArgs.user;\n            const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n            if (user) {\n                let id = user.id;\n                if (user.type === \"anonymous\") {\n                    id = \"!anon\";\n                }\n                if (id) {\n                    if (StreamVideoClient._instanceMap.has(apiKeyOrArgs.apiKey + id)) {\n                        this.logger(\"warn\", `A StreamVideoClient already exists for ${user.type === \"anonymous\" ? \"an anonymous user\" : id}; Prefer using getOrCreateInstance method`);\n                    }\n                    user.id = id;\n                    StreamVideoClient._instanceMap.set(apiKeyOrArgs.apiKey + id, this);\n                }\n                this.connectUser(user, token).catch((err)=>{\n                    this.logger(\"error\", \"Failed to connect\", err);\n                });\n            }\n        }\n    }\n    static getOrCreateInstance(args) {\n        const user = args.user;\n        if (!user.id) {\n            if (args.user.type === \"anonymous\") {\n                user.id = \"!anon\";\n            } else {\n                throw new Error(\"User ID is required for a non-anonymous user\");\n            }\n        }\n        if (!args.token && !args.tokenProvider) {\n            if (args.user.type !== \"anonymous\" && args.user.type !== \"guest\") {\n                throw new Error(\"TokenProvider or token is required for a user that is not a guest or anonymous\");\n            }\n        }\n        let instance = StreamVideoClient._instanceMap.get(args.apiKey + user.id);\n        if (!instance) {\n            instance = new StreamVideoClient({\n                ...args,\n                user\n            });\n        }\n        return instance;\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n}\nStreamVideoClient._instanceMap = new Map();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stream-io/video-filters-web/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SegmentationLevel: () => (/* binding */ SegmentationLevel),\n/* harmony export */   createRenderer: () => (/* binding */ createRenderer),\n/* harmony export */   isPlatformSupported: () => (/* binding */ isPlatformSupported),\n/* harmony export */   loadTFLite: () => (/* binding */ loadTFLite)\n/* harmony export */ });\n/* harmony import */ var wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-feature-detect */ \"(ssr)/./node_modules/wasm-feature-detect/dist/esm/index.js\");\n\n\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */\nconst isMobile = () => /Mobi/i.test(navigator.userAgent);\n/**\n * Runs a check to see if the current platform supports\n * the necessary APIs required for the video filters.\n */\nconst isPlatformSupported = async () => typeof document !== 'undefined' &&\n    typeof window !== 'undefined' &&\n    typeof navigator !== 'undefined' &&\n    !isMobile() && // we don't support mobile devices yet due to performance issues\n    typeof WebAssembly !== 'undefined' &&\n    !!window.WebGL2RenderingContext && // WebGL2 is required for the video filters\n    !!document.createElement('canvas').getContext('webgl2') &&\n    (await (0,wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__.simd)()); // SIMD is required for the wasm module\n\n/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nconst glsl = String.raw;\nfunction createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer) {\n    const program = createProgram(gl, vertexShader, fragmentShader);\n    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord');\n    gl.enableVertexAttribArray(texCoordAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    return program;\n}\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(`Could not link WebGL program: ${gl.getProgramInfoLog(program)}`);\n    }\n    return program;\n}\nfunction compileShader(gl, shaderType, shaderSource) {\n    const shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    }\n    return shader;\n}\nfunction createTexture(gl, internalformat, width, height, minFilter = gl.NEAREST, magFilter = gl.NEAREST) {\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height);\n    return texture;\n}\nasync function readPixelsAsync(gl, x, y, width, height, format, type, dest) {\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, width, height, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest);\n    gl.deleteBuffer(buf);\n    return dest;\n}\nasync function getBufferSubDataAsync(gl, target, buffer, srcByteOffset, dstBuffer, dstOffset, length) {\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    const res = await clientWaitAsync(gl, sync);\n    gl.deleteSync(sync);\n    if (res !== gl.WAIT_FAILED) {\n        gl.bindBuffer(target, buffer);\n        gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length);\n        gl.bindBuffer(target, null);\n    }\n}\nfunction clientWaitAsync(gl, sync) {\n    return new Promise((resolve) => {\n        function test() {\n            const res = gl.clientWaitSync(sync, 0, 0);\n            if (res === gl.WAIT_FAILED) {\n                resolve(res);\n                return;\n            }\n            if (res === gl.TIMEOUT_EXPIRED) {\n                setTimeout(test);\n                return;\n            }\n            resolve(res);\n        }\n        setTimeout(test);\n    });\n}\n\nfunction buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const blurPass = buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel);\n    const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas);\n    function render() {\n        blurPass.render();\n        blendPass.render();\n    }\n    function updateCoverage(coverage) {\n        blendPass.updateCoverage(coverage);\n    }\n    function cleanUp() {\n        blendPass.cleanUp();\n        blurPass.cleanUp();\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\nfunction buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const sigma = typeof blurLevel === 'number'\n        ? blurLevel\n        : blurLevel === 'low'\n            ? 2\n            : blurLevel === 'medium'\n                ? 4\n                : 6;\n    const windowSize = Math.max(1, Math.floor(sigma * 3));\n    const offset = new Array(windowSize).fill(0).map((v, index) => index);\n    const variance = sigma ** 2;\n    const weights = offset.map((x) => {\n        var m = sigma * Math.sqrt(2 * Math.PI);\n        var e = Math.exp(-(x ** 2) / (2 * variance));\n        return e / m;\n    });\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    const float offset[${windowSize}] = float[](${offset.map((i) => i.toFixed(10)).join(', ')});\n    const float weight[${windowSize}] = float[](${weights.map((i) => i.toFixed(10)).join(', ')});\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < ${windowSize}; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord)\n           * weight[i]\n           * (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord)\n          * weight[i]\n          * (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `;\n    const scale = 0.5;\n    const outputWidth = canvas.width * scale;\n    const outputHeight = canvas.height * scale;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const texture1 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const texture2 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const frameBuffer1 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture1, 0);\n    const frameBuffer2 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture2, 0);\n    gl.useProgram(program);\n    gl.uniform1i(personMaskLocation, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.uniform1i(inputFrameLocation, 0);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        for (let i = 0; i < 3; i++) {\n            gl.uniform2f(texelSizeLocation, 0, texelHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, texture1);\n            gl.uniform1i(inputFrameLocation, 2);\n            gl.uniform2f(texelSizeLocation, texelWidth, 0);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.bindTexture(gl.TEXTURE_2D, texture2);\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer2);\n        gl.deleteFramebuffer(frameBuffer1);\n        gl.deleteTexture(texture2);\n        gl.deleteTexture(texture1);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return {\n        render,\n        cleanUp,\n    };\n}\nfunction buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_blurredInputFrame;\n    uniform vec2 u_coverage;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const blurredInputFrame = gl.getUniformLocation(program, 'u_blurredInputFrame');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform1i(blurredInputFrame, 2);\n    gl.uniform2f(coverageLocation, 0, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function cleanUp() {\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\n\nfunction buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap)\n        + (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const outputRatio = outputWidth / outputHeight;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const backgroundScaleLocation = gl.getUniformLocation(program, 'u_backgroundScale');\n    const backgroundOffsetLocation = gl.getUniformLocation(program, 'u_backgroundOffset');\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const backgroundLocation = gl.getUniformLocation(program, 'u_background');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    const lightWrappingLocation = gl.getUniformLocation(program, 'u_lightWrapping');\n    const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode');\n    gl.useProgram(program);\n    gl.uniform2f(backgroundScaleLocation, 1, 1);\n    gl.uniform2f(backgroundOffsetLocation, 0, 0);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform2f(coverageLocation, 0, 1);\n    gl.uniform1f(lightWrappingLocation, 0);\n    gl.uniform1f(blendModeLocation, 0);\n    let backgroundTexture = null;\n    // TODO Find a better to handle background being loaded\n    if (backgroundImage?.complete) {\n        updateBackgroundImage(backgroundImage);\n    }\n    else if (backgroundImage) {\n        backgroundImage.onload = () => {\n            updateBackgroundImage(backgroundImage);\n        };\n    }\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        if (backgroundTexture !== null) {\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, backgroundTexture);\n            // TODO Handle correctly the background not loaded yet\n            gl.uniform1i(backgroundLocation, 2);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateBackgroundImage(bgImage) {\n        backgroundTexture = createTexture(gl, gl.RGBA8, bgImage.naturalWidth, bgImage.naturalHeight, \n        // @ts-expect-error types are incomplete\n        gl.LINEAR, gl.LINEAR);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, bgImage.naturalWidth, bgImage.naturalHeight, gl.RGBA, gl.UNSIGNED_BYTE, bgImage);\n        let xOffset = 0;\n        let yOffset = 0;\n        let backgroundWidth = bgImage.naturalWidth;\n        let backgroundHeight = bgImage.naturalHeight;\n        const backgroundRatio = backgroundWidth / backgroundHeight;\n        if (backgroundRatio < outputRatio) {\n            backgroundHeight = backgroundWidth / outputRatio;\n            yOffset = (bgImage.naturalHeight - backgroundHeight) / 2;\n        }\n        else {\n            backgroundWidth = backgroundHeight * outputRatio;\n            xOffset = (bgImage.naturalWidth - backgroundWidth) / 2;\n        }\n        const xScale = backgroundWidth / bgImage.naturalWidth;\n        const yScale = backgroundHeight / bgImage.naturalHeight;\n        xOffset /= bgImage.naturalWidth;\n        yOffset /= bgImage.naturalHeight;\n        gl.uniform2f(backgroundScaleLocation, xScale, yScale);\n        gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function updateLightWrapping(lightWrapping) {\n        gl.useProgram(program);\n        gl.uniform1f(lightWrappingLocation, lightWrapping);\n    }\n    function updateBlendMode(blendMode) {\n        gl.useProgram(program);\n        gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1);\n    }\n    function cleanUp() {\n        gl.deleteTexture(backgroundTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        updateLightWrapping,\n        updateBlendMode,\n        cleanUp,\n    };\n}\n\nfunction buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, inputTexture, outputTexture, canvas, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const segmentationMaskLocation = gl.getUniformLocation(program, 'u_segmentationMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const stepLocation = gl.getUniformLocation(program, 'u_step');\n    const radiusLocation = gl.getUniformLocation(program, 'u_radius');\n    const offsetLocation = gl.getUniformLocation(program, 'u_offset');\n    const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel');\n    const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor');\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(segmentationMaskLocation, 1);\n    gl.uniform2f(texelSizeLocation, texelWidth, texelHeight);\n    // Ensures default values are configured to prevent infinite\n    // loop in fragment shader\n    updateSigmaSpace(0);\n    updateSigmaColor(0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateSigmaSpace(sigmaSpace) {\n        sigmaSpace *= Math.max(outputWidth / segmentationWidth, outputHeight / segmentationHeight);\n        const kSparsityFactor = 0.66; // Higher is sparser.\n        const step = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor);\n        const radius = sigmaSpace;\n        const offset = step > 1 ? step * 0.5 : 0;\n        const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace;\n        gl.useProgram(program);\n        gl.uniform1f(stepLocation, step);\n        gl.uniform1f(radiusLocation, radius);\n        gl.uniform1f(offsetLocation, offset);\n        gl.uniform1f(sigmaTexelLocation, sigmaTexel);\n    }\n    function updateSigmaColor(sigmaColor) {\n        gl.useProgram(program);\n        gl.uniform1f(sigmaColorLocation, sigmaColor);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, updateSigmaSpace, updateSigmaColor, cleanUp };\n}\n\nfunction buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n    uniform sampler2D u_inputFrame;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    const { width: outputWidth, height: outputHeight } = segmentationConfig;\n    const outputPixelCount = outputWidth * outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    const outputPixels = new Uint8Array(outputPixelCount * 4);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        // Downloads pixels asynchronously from GPU while rendering the current frame.\n        // The pixels will be available in the next frame render which results\n        // in offsets in the segmentation output but increases the frame rate.\n        readPixelsAsync(gl, 0, 0, outputWidth, outputHeight, gl.RGBA, gl.UNSIGNED_BYTE, outputPixels);\n        for (let i = 0; i < outputPixelCount; i++) {\n            const tfliteIndex = tfliteInputMemoryOffset + i * 3;\n            const outputIndex = i * 4;\n            tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255;\n            tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255;\n            tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255;\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(outputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, outputTexture, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation');\n    const inputTexture = createTexture(gl, gl.RG32F, segmentationWidth, segmentationHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputLocation, 1);\n    function render() {\n        gl.viewport(0, 0, segmentationWidth, segmentationHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, segmentationWidth, segmentationHeight, gl.RG, gl.FLOAT, tflite.HEAPF32, tfliteOutputMemoryOffset);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(inputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildWebGL2Pipeline(videoSource, backgroundImage, blurLevel, backgroundFilter, canvas, tflite, segmentationConfig) {\n    const gl = canvas.getContext('webgl2');\n    if (!gl)\n        throw new Error('WebGL2 is not supported');\n    if (gl.isContextLost())\n        throw new Error('WebGL2 context was lost');\n    const { width: frameWidth, height: frameHeight } = videoSource;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const vertexArray = gl.createVertexArray();\n    gl.bindVertexArray(vertexArray);\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    // We don't use texStorage2D here because texImage2D seems faster\n    // to upload video texture than texSubImage2D even though the latter\n    // is supposed to be the recommended way:\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n    const inputFrameTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // TODO Rename segmentation and person mask to be more specific\n    const segmentationTexture = createTexture(gl, gl.RGBA8, segmentationWidth, segmentationHeight);\n    const personMaskTexture = createTexture(gl, gl.RGBA8, frameWidth, frameHeight);\n    const resizingStage = buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig);\n    const loadSegmentationStage = buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationTexture, segmentationConfig);\n    const jointBilateralFilterStage = buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, segmentationTexture, personMaskTexture, canvas, segmentationConfig);\n    const backgroundStage = backgroundFilter === 'blur'\n        ? buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel || 'high')\n        : buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas);\n    function render() {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n        // texImage2D seems faster than texSubImage2D to upload\n        // video texture\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoSource);\n        gl.bindVertexArray(vertexArray);\n        resizingStage.render();\n        tflite._runInference();\n        loadSegmentationStage.render();\n        jointBilateralFilterStage.render();\n        backgroundStage.render();\n    }\n    function updatePostProcessingConfig() {\n        jointBilateralFilterStage.updateSigmaSpace(1);\n        jointBilateralFilterStage.updateSigmaColor(0.1);\n        if (backgroundFilter === 'image') {\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0.5, 0.75]);\n            backgroundImageStage.updateLightWrapping(0.3);\n            backgroundImageStage.updateBlendMode('screen');\n        }\n        else if (backgroundFilter === 'blur') {\n            const backgroundBlurStage = backgroundStage;\n            backgroundBlurStage.updateCoverage([0.5, 0.75]);\n        }\n        else {\n            // TODO Handle no background in a separate pipeline path\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0, 0.9999]);\n            backgroundImageStage.updateLightWrapping(0);\n        }\n    }\n    function cleanUp() {\n        backgroundStage.cleanUp();\n        jointBilateralFilterStage.cleanUp();\n        loadSegmentationStage.cleanUp();\n        resizingStage.cleanUp();\n        gl.deleteTexture(personMaskTexture);\n        gl.deleteTexture(segmentationTexture);\n        gl.deleteTexture(inputFrameTexture);\n        gl.deleteBuffer(texCoordBuffer);\n        gl.deleteBuffer(positionBuffer);\n        gl.deleteVertexArray(vertexArray);\n        gl.deleteShader(vertexShader);\n    }\n    return { render, updatePostProcessingConfig, cleanUp };\n}\n\nvar SegmentationLevel;\n(function (SegmentationLevel) {\n    SegmentationLevel[\"LOW\"] = \"low\";\n    SegmentationLevel[\"HIGH\"] = \"high\";\n})(SegmentationLevel || (SegmentationLevel = {}));\nconst getSegmentationParams = (level) => {\n    if (level === SegmentationLevel.HIGH) {\n        return { width: 256, height: 144 };\n    }\n    return { width: 160, height: 96 };\n};\n\nfunction createRenderer(tflite, videoSource, targetCanvas, options, onError) {\n    const { backgroundFilter, backgroundImage, backgroundBlurLevel, segmentationLevel = SegmentationLevel.HIGH, fps = 30, } = options;\n    if (backgroundFilter === 'image' && !backgroundImage) {\n        throw new Error(`backgroundImage element is required when backgroundFilter is image`);\n    }\n    const pipeline = buildWebGL2Pipeline(videoSource, backgroundImage, backgroundBlurLevel, backgroundFilter, targetCanvas, tflite, getSegmentationParams(segmentationLevel));\n    const id = setInterval(() => {\n        try {\n            pipeline.render();\n            if (backgroundFilter === 'image') {\n                pipeline.updatePostProcessingConfig();\n            }\n        }\n        catch (error) {\n            onError?.(error);\n        }\n    }, 1000 / (fps <= 0 ? 30 : fps));\n    return {\n        dispose: () => {\n            pipeline.cleanUp();\n            clearInterval(id);\n        },\n    };\n}\n\nconst createTFLiteSIMDModule = (__Module) => {\n  __Module = __Module || {};\n\n  var _scriptDir =\n    typeof document !== 'undefined' && document.currentScript\n      ? document.currentScript.src\n      : undefined;\n\n  var Module = typeof __Module != 'undefined' ? __Module : {};\n  var readyPromiseResolve, readyPromiseReject;\n  Module['ready'] = new Promise(function (resolve, reject) {\n    readyPromiseResolve = resolve;\n    readyPromiseReject = reject;\n  });\n  var moduleOverrides = Object.assign({}, Module);\n  var thisProgram = './this.program';\n  var quit_ = (status, toThrow) => {\n    throw toThrow;\n  };\n  var ENVIRONMENT_IS_WEB = true;\n  var scriptDirectory = '';\n\n  function locateFile(path) {\n    if (Module['locateFile']) {\n      return Module['locateFile'](path, scriptDirectory);\n    }\n    return scriptDirectory + path;\n  }\n\n  var readBinary;\n  {\n    if (typeof document != 'undefined' && document.currentScript) {\n      scriptDirectory = document.currentScript.src;\n    }\n    if (_scriptDir) {\n      scriptDirectory = _scriptDir;\n    }\n    if (scriptDirectory.indexOf('blob:') !== 0) {\n      scriptDirectory = scriptDirectory.substr(\n        0,\n        scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n      );\n    } else {\n      scriptDirectory = '';\n    }\n  }\n  var out = Module['print'] || console.log.bind(console);\n  var err = Module['printErr'] || console.warn.bind(console);\n  Object.assign(Module, moduleOverrides);\n  moduleOverrides = null;\n  if (Module['arguments']) Module['arguments'];\n  if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n  if (Module['quit']) quit_ = Module['quit'];\n  var wasmBinary;\n  if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\n  var noExitRuntime = Module['noExitRuntime'] || true;\n  if (typeof WebAssembly != 'object') {\n    abort('no native wasm support detected');\n  }\n  var wasmMemory;\n  var ABORT = false;\n\n  var UTF8Decoder =\n    typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n    var endIdx = idx + maxBytesToRead;\n    var endPtr = idx;\n    while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n    }\n    var str = '';\n    while (idx < endPtr) {\n      var u0 = heapOrArray[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = heapOrArray[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode(((u0 & 31) << 6) | u1);\n        continue;\n      }\n      var u2 = heapOrArray[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        u0 =\n          ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n      }\n    }\n    return str;\n  }\n\n  var buffer, HEAP8, HEAPU8, HEAPU32;\n\n  function updateGlobalBufferAndViews(buf) {\n    buffer = buf;\n    Module['HEAP8'] = HEAP8 = new Int8Array(buf);\n    Module['HEAP16'] = new Int16Array(buf);\n    Module['HEAP32'] = new Int32Array(buf);\n    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);\n    Module['HEAPU16'] = new Uint16Array(buf);\n    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);\n    Module['HEAPF32'] = new Float32Array(buf);\n    Module['HEAPF64'] = new Float64Array(buf);\n  }\n\n  Module['INITIAL_MEMORY'] || 16777216;\n  var __ATPRERUN__ = [];\n  var __ATINIT__ = [];\n  var __ATPOSTRUN__ = [];\n\n  function keepRuntimeAlive() {\n    return noExitRuntime;\n  }\n\n  function preRun() {\n    if (Module['preRun']) {\n      if (typeof Module['preRun'] == 'function')\n        Module['preRun'] = [Module['preRun']];\n      while (Module['preRun'].length) {\n        addOnPreRun(Module['preRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPRERUN__);\n  }\n\n  function initRuntime() {\n    callRuntimeCallbacks(__ATINIT__);\n  }\n\n  function postRun() {\n    if (Module['postRun']) {\n      if (typeof Module['postRun'] == 'function')\n        Module['postRun'] = [Module['postRun']];\n      while (Module['postRun'].length) {\n        addOnPostRun(Module['postRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPOSTRUN__);\n  }\n\n  function addOnPreRun(cb) {\n    __ATPRERUN__.unshift(cb);\n  }\n\n  function addOnInit(cb) {\n    __ATINIT__.unshift(cb);\n  }\n\n  function addOnPostRun(cb) {\n    __ATPOSTRUN__.unshift(cb);\n  }\n\n  var runDependencies = 0;\n  var dependenciesFulfilled = null;\n\n  function addRunDependency(id) {\n    runDependencies++;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n  }\n\n  function removeRunDependency(id) {\n    runDependencies--;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n    if (runDependencies == 0) {\n      if (dependenciesFulfilled) {\n        var callback = dependenciesFulfilled;\n        dependenciesFulfilled = null;\n        callback();\n      }\n    }\n  }\n\n  function abort(what) {\n    {\n      if (Module['onAbort']) {\n        Module['onAbort'](what);\n      }\n    }\n    what = 'Aborted(' + what + ')';\n    err(what);\n    ABORT = true;\n    what += '. Build with -sASSERTIONS for more info.';\n    var e = new WebAssembly.RuntimeError(what);\n    readyPromiseReject(e);\n    throw e;\n  }\n\n  var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n  function isDataURI(filename) {\n    return filename.startsWith(dataURIPrefix);\n  }\n\n  var wasmBinaryFile;\n  wasmBinaryFile = 'tflite-simd.wasm';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n\n  function getBinary(file) {\n    try {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) ;\n      throw 'both async and sync fetching of the wasm failed';\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n    } catch (err) {\n      abort(err);\n    }\n  }\n\n  function getBinaryPromise() {\n    if (!wasmBinary && (ENVIRONMENT_IS_WEB)) {\n      if (typeof fetch == 'function') {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' })\n          .then(function (response) {\n            if (!response['ok']) {\n              throw (\n                \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\"\n              );\n            }\n            return response['arrayBuffer']();\n          })\n          .catch(function () {\n            return getBinary(wasmBinaryFile);\n          });\n      }\n    }\n    return Promise.resolve().then(function () {\n      return getBinary(wasmBinaryFile);\n    });\n  }\n\n  function createWasm() {\n    var info = {\n      env: asmLibraryArg,\n      wasi_snapshot_preview1: asmLibraryArg,\n    };\n\n    function receiveInstance(instance, module) {\n      var exports = instance.exports;\n      Module['asm'] = exports;\n      wasmMemory = Module['asm']['memory'];\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      Module['asm']['__indirect_function_table'];\n      addOnInit(Module['asm']['__wasm_call_ctors']);\n      removeRunDependency();\n    }\n\n    addRunDependency();\n\n    function receiveInstantiationResult(result) {\n      receiveInstance(result['instance']);\n    }\n\n    function instantiateArrayBuffer(receiver) {\n      return getBinaryPromise()\n        .then(function (binary) {\n          return WebAssembly.instantiate(binary, info);\n        })\n        .then(function (instance) {\n          return instance;\n        })\n        .then(receiver, function (reason) {\n          err('failed to asynchronously prepare wasm: ' + reason);\n          abort(reason);\n        });\n    }\n\n    function instantiateAsync() {\n      if (\n        !wasmBinary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(wasmBinaryFile) &&\n        typeof fetch == 'function'\n      ) {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(\n          function (response) {\n            var result = WebAssembly.instantiateStreaming(response, info);\n            return result.then(receiveInstantiationResult, function (reason) {\n              err('wasm streaming compile failed: ' + reason);\n              err('falling back to ArrayBuffer instantiation');\n              return instantiateArrayBuffer(receiveInstantiationResult);\n            });\n          },\n        );\n      } else {\n        return instantiateArrayBuffer(receiveInstantiationResult);\n      }\n    }\n\n    if (Module['instantiateWasm']) {\n      try {\n        var exports = Module['instantiateWasm'](info, receiveInstance);\n        return exports;\n      } catch (e) {\n        err('Module.instantiateWasm callback failed with error: ' + e);\n        readyPromiseReject(e);\n      }\n    }\n    instantiateAsync().catch(readyPromiseReject);\n    return {};\n  }\n\n  function ExitStatus(status) {\n    this.name = 'ExitStatus';\n    this.message = 'Program terminated with exit(' + status + ')';\n    this.status = status;\n  }\n\n  function callRuntimeCallbacks(callbacks) {\n    while (callbacks.length > 0) {\n      callbacks.shift()(Module);\n    }\n  }\n\n  function __dlinit(main_dso_handle) {}\n\n  var dlopenMissingError =\n    'To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking';\n\n  function __dlopen_js(filename, flag) {\n    abort(dlopenMissingError);\n  }\n\n  function __dlsym_js(handle, symbol) {\n    abort(dlopenMissingError);\n  }\n\n  var nowIsMonotonic = true;\n\n  function __emscripten_get_now_is_monotonic() {\n    return nowIsMonotonic;\n  }\n\n  function __mmap_js(len, prot, flags, fd, off, allocated) {\n    return -52;\n  }\n\n  function __munmap_js(addr, len, prot, flags, fd, offset) {}\n\n  function _abort() {\n    abort('');\n  }\n\n  function _emscripten_date_now() {\n    return Date.now();\n  }\n\n  function getHeapMax() {\n    return 2147483648;\n  }\n\n  function _emscripten_get_heap_max() {\n    return getHeapMax();\n  }\n\n  var _emscripten_get_now;\n  _emscripten_get_now = () => performance.now();\n\n  function _emscripten_memcpy_big(dest, src, num) {\n    HEAPU8.copyWithin(dest, src, src + num);\n  }\n\n  function emscripten_realloc_buffer(size) {\n    try {\n      wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      return 1;\n    } catch (e) {}\n  }\n\n  function _emscripten_resize_heap(requestedSize) {\n    var oldSize = HEAPU8.length;\n    requestedSize = requestedSize >>> 0;\n    var maxHeapSize = getHeapMax();\n    if (requestedSize > maxHeapSize) {\n      return false;\n    }\n    let alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n    for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n      var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n      overGrownHeapSize = Math.min(\n        overGrownHeapSize,\n        requestedSize + 100663296,\n      );\n      var newSize = Math.min(\n        maxHeapSize,\n        alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),\n      );\n      var replacement = emscripten_realloc_buffer(newSize);\n      if (replacement) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var ENV = {};\n\n  function getExecutableName() {\n    return thisProgram || './this.program';\n  }\n\n  function getEnvStrings() {\n    if (!getEnvStrings.strings) {\n      var lang =\n        (\n          (typeof navigator == 'object' &&\n            navigator.languages &&\n            navigator.languages[0]) ||\n          'C'\n        ).replace('-', '_') + '.UTF-8';\n      var env = {\n        USER: 'web_user',\n        LOGNAME: 'web_user',\n        PATH: '/',\n        PWD: '/',\n        HOME: '/home/web_user',\n        LANG: lang,\n        _: getExecutableName(),\n      };\n      for (var x in ENV) {\n        if (ENV[x] === undefined) delete env[x];\n        else env[x] = ENV[x];\n      }\n      var strings = [];\n      for (var x in env) {\n        strings.push(x + '=' + env[x]);\n      }\n      getEnvStrings.strings = strings;\n    }\n    return getEnvStrings.strings;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function writeAsciiToMemory(str, buffer, dontAddNull) {\n    for (var i = 0; i < str.length; ++i) {\n      HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n    }\n    HEAP8[buffer >> 0] = 0;\n  }\n\n  function _environ_get(__environ, environ_buf) {\n    var bufSize = 0;\n    getEnvStrings().forEach(function (string, i) {\n      var ptr = environ_buf + bufSize;\n      HEAPU32[(__environ + i * 4) >> 2] = ptr;\n      writeAsciiToMemory(string, ptr);\n      bufSize += string.length + 1;\n    });\n    return 0;\n  }\n\n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n    var strings = getEnvStrings();\n    HEAPU32[penviron_count >> 2] = strings.length;\n    var bufSize = 0;\n    strings.forEach(function (string) {\n      bufSize += string.length + 1;\n    });\n    HEAPU32[penviron_buf_size >> 2] = bufSize;\n    return 0;\n  }\n\n  function _proc_exit(code) {\n    if (!keepRuntimeAlive()) {\n      if (Module['onExit']) Module['onExit'](code);\n      ABORT = true;\n    }\n    quit_(code, new ExitStatus(code));\n  }\n\n  function exitJS(status, implicit) {\n    _proc_exit(status);\n  }\n\n  var _exit = exitJS;\n\n  function _fd_close(fd) {\n    return 52;\n  }\n\n  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n    return 70;\n  }\n\n  var printCharBuffers = [null, [], []];\n\n  function printChar(stream, curr) {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    var buffer = printCharBuffers[stream];\n    if (curr === 0 || curr === 10) {\n      (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n      buffer.length = 0;\n    } else {\n      buffer.push(curr);\n    }\n  }\n\n  function _fd_write(fd, iov, iovcnt, pnum) {\n    var num = 0;\n    for (var i = 0; i < iovcnt; i++) {\n      var ptr = HEAPU32[iov >> 2];\n      var len = HEAPU32[(iov + 4) >> 2];\n      iov += 8;\n      for (var j = 0; j < len; j++) {\n        printChar(fd, HEAPU8[ptr + j]);\n      }\n      num += len;\n    }\n    HEAPU32[pnum >> 2] = num;\n    return 0;\n  }\n\n  function getRandomDevice() {\n    if (\n      typeof crypto == 'object' &&\n      typeof crypto['getRandomValues'] == 'function'\n    ) {\n      var randomBuffer = new Uint8Array(1);\n      return () => {\n        crypto.getRandomValues(randomBuffer);\n        return randomBuffer[0];\n      };\n    } else return () => abort('randomDevice');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function _getentropy(buffer, size) {\n    if (!_getentropy.randomDevice) {\n      _getentropy.randomDevice = getRandomDevice();\n    }\n    for (var i = 0; i < size; i++) {\n      HEAP8[(buffer + i) >> 0] = _getentropy.randomDevice();\n    }\n    return 0;\n  }\n\n  var asmLibraryArg = {\n    _dlinit: __dlinit,\n    _dlopen_js: __dlopen_js,\n    _dlsym_js: __dlsym_js,\n    _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n    _mmap_js: __mmap_js,\n    _munmap_js: __munmap_js,\n    abort: _abort,\n    emscripten_date_now: _emscripten_date_now,\n    emscripten_get_heap_max: _emscripten_get_heap_max,\n    emscripten_get_now: _emscripten_get_now,\n    emscripten_memcpy_big: _emscripten_memcpy_big,\n    emscripten_resize_heap: _emscripten_resize_heap,\n    environ_get: _environ_get,\n    environ_sizes_get: _environ_sizes_get,\n    exit: _exit,\n    fd_close: _fd_close,\n    fd_seek: _fd_seek,\n    fd_write: _fd_write,\n    getentropy: _getentropy,\n  };\n  createWasm();\n  (Module['___wasm_call_ctors'] = function () {\n    return (Module['___wasm_call_ctors'] =\n      Module['asm']['__wasm_call_ctors']).apply(null, arguments);\n  });\n  (Module['_getModelBufferMemoryOffset'] =\n    function () {\n      return (Module[\n        '_getModelBufferMemoryOffset'\n      ] =\n        Module['asm']['getModelBufferMemoryOffset']).apply(null, arguments);\n    });\n  (Module['_getInputMemoryOffset'] = function () {\n    return (Module['_getInputMemoryOffset'] =\n      Module['asm']['getInputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getInputHeight'] = function () {\n    return (Module['_getInputHeight'] =\n      Module['asm']['getInputHeight']).apply(null, arguments);\n  });\n  (Module['_getInputWidth'] = function () {\n    return (Module['_getInputWidth'] =\n      Module['asm']['getInputWidth']).apply(null, arguments);\n  });\n  (Module['_getInputChannelCount'] = function () {\n    return (Module['_getInputChannelCount'] =\n      Module['asm']['getInputChannelCount']).apply(null, arguments);\n  });\n  (Module['_getOutputMemoryOffset'] = function () {\n    return (Module['_getOutputMemoryOffset'] =\n      Module['asm']['getOutputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getOutputHeight'] = function () {\n    return (Module['_getOutputHeight'] =\n      Module['asm']['getOutputHeight']).apply(null, arguments);\n  });\n  (Module['_getOutputWidth'] = function () {\n    return (Module['_getOutputWidth'] =\n      Module['asm']['getOutputWidth']).apply(null, arguments);\n  });\n  (Module['_getOutputChannelCount'] = function () {\n    return (Module['_getOutputChannelCount'] =\n      Module['asm']['getOutputChannelCount']).apply(null, arguments);\n  });\n  (Module['_loadModel'] = function () {\n    return (Module['_loadModel'] =\n      Module['asm']['loadModel']).apply(null, arguments);\n  });\n  (Module['_runInference'] = function () {\n    return (Module['_runInference'] =\n      Module['asm']['runInference']).apply(null, arguments);\n  });\n  (Module['_malloc'] = function () {\n    return (Module['_malloc'] = Module['asm']['malloc']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['___errno_location'] = function () {\n    return (Module['___errno_location'] =\n      Module['asm']['__errno_location']).apply(null, arguments);\n  });\n  (Module['___dl_seterr'] = function () {\n    return (Module['___dl_seterr'] =\n      Module['asm']['__dl_seterr']).apply(null, arguments);\n  });\n  (Module['stackSave'] = function () {\n    return (Module['stackSave'] = Module['asm']['stackSave']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['stackRestore'] = function () {\n    return (Module['stackRestore'] =\n      Module['asm']['stackRestore']).apply(null, arguments);\n  });\n  (Module['stackAlloc'] = function () {\n    return (Module['stackAlloc'] =\n      Module['asm']['stackAlloc']).apply(null, arguments);\n  });\n  (Module['dynCall_jjj'] = function () {\n    return (Module['dynCall_jjj'] =\n      Module['asm']['dynCall_jjj']).apply(null, arguments);\n  });\n  (Module['dynCall_jiii'] = function () {\n    return (Module['dynCall_jiii'] =\n      Module['asm']['dynCall_jiii']).apply(null, arguments);\n  });\n  (Module['dynCall_iiiijj'] = function () {\n    return (Module['dynCall_iiiijj'] =\n      Module['asm']['dynCall_iiiijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viijj'] = function () {\n    return (Module['dynCall_viijj'] =\n      Module['asm']['dynCall_viijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viiijjj'] = function () {\n    return (Module['dynCall_viiijjj'] =\n      Module['asm']['dynCall_viiijjj']).apply(null, arguments);\n  });\n  (Module['dynCall_iijjiiii'] = function () {\n    return (Module['dynCall_iijjiiii'] =\n      Module['asm']['dynCall_iijjiiii']).apply(null, arguments);\n  });\n  (Module['dynCall_jiji'] = function () {\n    return (Module['dynCall_jiji'] =\n      Module['asm']['dynCall_jiji']).apply(null, arguments);\n  });\n  var calledRun;\n  dependenciesFulfilled = function runCaller() {\n    if (!calledRun) run();\n    if (!calledRun) dependenciesFulfilled = runCaller;\n  };\n\n  function run(args) {\n    if (runDependencies > 0) {\n      return;\n    }\n    preRun();\n    if (runDependencies > 0) {\n      return;\n    }\n\n    function doRun() {\n      if (calledRun) return;\n      calledRun = true;\n      Module['calledRun'] = true;\n      if (ABORT) return;\n      initRuntime();\n      readyPromiseResolve(Module);\n      if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n      postRun();\n    }\n\n    if (Module['setStatus']) {\n      Module['setStatus']('Running...');\n      setTimeout(function () {\n        setTimeout(function () {\n          Module['setStatus']('');\n        }, 1);\n        doRun();\n      }, 1);\n    } else {\n      doRun();\n    }\n  }\n\n  if (Module['preInit']) {\n    if (typeof Module['preInit'] == 'function')\n      Module['preInit'] = [Module['preInit']];\n    while (Module['preInit'].length > 0) {\n      Module['preInit'].pop()();\n    }\n  }\n  run();\n\n  return __Module.ready;\n};\n\nconst version = \"0.1.4\";\nconst packageName = \"@stream-io/video-filters-web\";\n\n// @ts-expect-error - module is not declared\n// This is a WebAssembly module compiled from the TensorFlow Lite C++ library.\nconst createTFLite = createTFLiteSIMDModule;\nconst loadTFLite = async (options = {}) => {\n    const { basePath = `https://unpkg.com/${packageName}@${version}/tf`, tfFilePath = `${basePath}/tflite/tflite-simd.wasm`, modelFilePath = `${basePath}/models/segm_full_v679.tflite`, } = options;\n    const [tfLite, model] = await Promise.all([\n        createTFLite({ locateFile: () => tfFilePath }),\n        fetchModel(modelFilePath),\n    ]);\n    const modelBufferOffset = tfLite._getModelBufferMemoryOffset();\n    tfLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tfLite._loadModel(model.byteLength);\n    return tfLite;\n};\nlet lastModelFilePath = '';\nlet modelFileCache;\nconst fetchModel = async (modelFilePath) => {\n    const model = modelFilePath === lastModelFilePath && modelFileCache\n        ? modelFileCache\n        : await fetch(modelFilePath).then((r) => r.arrayBuffer());\n    // Cache the model file for future use.\n    modelFileCache = model;\n    lastModelFilePath = modelFilePath;\n    return model;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-bindings/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* binding */ DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   Restricted: () => (/* binding */ Restricted),\n/* harmony export */   StreamCallProvider: () => (/* binding */ StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* binding */ StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* binding */ StreamI18nProvider),\n/* harmony export */   StreamVideoProvider: () => (/* binding */ StreamVideoProvider),\n/* harmony export */   defaultTranslationFunction: () => (/* binding */ defaultTranslationFunction),\n/* harmony export */   mapToRegistry: () => (/* binding */ mapToRegistry),\n/* harmony export */   useCall: () => (/* binding */ useCall),\n/* harmony export */   useCallStateHooks: () => (/* binding */ useCallStateHooks),\n/* harmony export */   useCalls: () => (/* binding */ useCalls),\n/* harmony export */   useConnectedUser: () => (/* binding */ useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* binding */ useCreateI18n),\n/* harmony export */   useI18n: () => (/* binding */ useI18n),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStreamVideoClient: () => (/* binding */ useStreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n\n\n\n\n\nconst StreamCallContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * A provider for the call object.\n */\nconst StreamCallProvider = (props) => {\n    const { call, children } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamCallContext.Provider, { value: call, children: children }));\n};\n/**\n * A hook to get the call object from the closest provider.\n */\nconst useCall = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamCallContext);\n};\n\nconst mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {\n    acc[lng] = { [namespace]: translations };\n    return acc;\n}, {});\n\nconst DEFAULT_LANGUAGE = 'en';\nconst DEFAULT_NAMESPACE = 'stream-video';\nconst DEFAULT_CONFIG = {\n    debug: false,\n    currentLanguage: DEFAULT_LANGUAGE,\n    fallbackLanguage: false,\n};\nconst DEFAULT_TRANSLATIONS_REGISTRY = mapToRegistry({}, DEFAULT_NAMESPACE);\nconst defaultTranslationFunction = (key) => key;\nclass StreamI18n {\n    /** Simple logger function */\n    constructor(options = {}) {\n        /** Translator function that converts the provided string into its equivalent in the current language. */\n        this.t = defaultTranslationFunction;\n        this.init = async () => {\n            try {\n                this.t = await this.i18nInstance.init();\n            }\n            catch (e) {\n                console.error(`Failed to initialize translations: ${JSON.stringify(e)}`);\n            }\n            return this;\n        };\n        this.changeLanguage = async (language, onChange) => {\n            if (!this._checkIsInitialized())\n                return;\n            // i18next detects the language, if none provided, but it is better\n            // to show this detection here explicitly\n            const browserLanguage = typeof window !== 'undefined' && window.navigator\n                ? window.navigator.language\n                : undefined;\n            await this.i18nInstance.changeLanguage(language || browserLanguage);\n            onChange?.(this.currentLanguage);\n        };\n        this.registerTranslationsForLanguage = ({ lng, translations, }) => {\n            if (!this._checkIsInitialized())\n                return;\n            this.i18nInstance.addResourceBundle(lng, DEFAULT_NAMESPACE, translations, true, true);\n        };\n        this._checkIsInitialized = () => {\n            if (!this.i18nInstance.isInitialized) {\n                console.warn('I18n instance is not initialized. Call yourStreamI18nInstance.init().');\n            }\n            return this.i18nInstance.isInitialized;\n        };\n        const { debug = DEFAULT_CONFIG.debug, currentLanguage = DEFAULT_CONFIG.currentLanguage, fallbackLanguage = DEFAULT_CONFIG.fallbackLanguage, translationsOverrides, } = options;\n        this.i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createInstance({\n            debug,\n            defaultNS: DEFAULT_NAMESPACE,\n            fallbackLng: fallbackLanguage,\n            interpolation: { escapeValue: false },\n            keySeparator: false,\n            lng: currentLanguage,\n            nsSeparator: false,\n            parseMissingKeyHandler: (key) => {\n                return key;\n            },\n            resources: DEFAULT_TRANSLATIONS_REGISTRY,\n        });\n        if (translationsOverrides) {\n            this.i18nInstance.on('initialized', () => {\n                Object.entries(translationsOverrides).forEach(([lng, translations]) => {\n                    this.registerTranslationsForLanguage({ lng, translations });\n                });\n            });\n        }\n    }\n    get currentLanguage() {\n        this._checkIsInitialized();\n        return this.i18nInstance.language;\n    }\n    get isInitialized() {\n        return this.i18nInstance.isInitialized;\n    }\n}\n\nconst StreamI18nContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    t: defaultTranslationFunction,\n});\nconst StreamI18nProvider = ({ children, ...createI18nParams }) => {\n    const { i18n, t } = useCreateI18n(createI18nParams);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nContext.Provider, { value: { t, i18n }, children: children }));\n};\nconst useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {\n    const [i18n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18nInstance ||\n        new StreamI18n({\n            currentLanguage: language,\n            fallbackLanguage,\n            translationsOverrides,\n        }));\n    const [t, setTranslationFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => defaultTranslationFunction);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const { isInitialized } = i18n;\n        if (!isInitialized) {\n            i18n.init().then((_i18n) => setTranslationFn(() => _i18n.i18nInstance.t));\n            return;\n        }\n        if (language && i18n?.currentLanguage !== language) {\n            i18n.changeLanguage(language).catch((err) => {\n                console.log('Error while changing language', err);\n            });\n        }\n    }, [i18n, i18nInstance, language, translationsOverrides]);\n    return { i18n, t };\n};\nconst useI18n = () => (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamI18nContext);\n\nconst StreamVideoContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * StreamVideo is a provider component which should be used to wrap the entire application.\n * It provides the client object to all children components and initializes the i18n instance.\n *  @param PropsWithChildren<StreamVideoProps>\n *  @category Client State\n */\nconst StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamVideoContext.Provider, { value: client, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));\n};\n/**\n *\n * @returns\n *\n * @category Client State\n */\nconst useStreamVideoClient = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamVideoContext);\n};\n\n/**\n * Utility hook which provides the current value of the given observable.\n * @internal\n *\n * @param observable$ the observable to read data from.\n * @param defaultValue a default value. Used when the observable data can't be read or emits an error.\n */\nconst useObservableValue = (observable$, defaultValue) => {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => {\n        try {\n            return _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.getCurrentValue(observable$);\n        }\n        catch (err) {\n            if (typeof defaultValue === 'undefined')\n                throw err;\n            return defaultValue;\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const subscription = observable$.subscribe({\n            next: setValue,\n            error: (err) => {\n                console.log('An error occurred while reading an observable', err);\n                if (defaultValue)\n                    setValue(defaultValue);\n            },\n        });\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [defaultValue, observable$]);\n    return value;\n};\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n    if (typeof navigator === 'undefined')\n        return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n// kind-of memoized, used as a default value\nconst EMPTY_DEVICES_ARRAY = Object.freeze([]);\n/**\n * Utility hook, which provides the current call's state.\n *\n * @category Call State\n */\nconst useCallState = () => {\n    const call = useCall();\n    // return an empty and unlinked CallState object if there is no call in the provider\n    // this ensures that the hooks always return a value and many null checks can be avoided\n    if (!call) {\n        const message = 'You are using useCallState() outside a Call context. ' +\n            'Please wrap your component in <StreamCall /> and provide a \"call\" instance.';\n        console.warn(message);\n        return new _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.CallState();\n    }\n    return call.state;\n};\n/**\n * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.\n *\n * @category Call State\n */\nconst useIsCallRecordingInProgress = () => {\n    const { recording$ } = useCallState();\n    return useObservableValue(recording$);\n};\n/**\n * Utility hook which provides information whether the current call is broadcasting.\n *\n * @category Call State\n */\nconst useIsCallHLSBroadcastingInProgress = () => {\n    const { egress$ } = useCallState();\n    const egress = useObservableValue(egress$);\n    if (!egress)\n        return false;\n    return egress.broadcasting;\n};\n/**\n * Utility hook which provides information whether the current call is live.\n *\n * @category Call State\n */\nconst useIsCallLive = () => {\n    const { backstage$ } = useCallState();\n    const isBackstageOn = useObservableValue(backstage$);\n    return !isBackstageOn;\n};\n/**\n * Returns the list of blocked users in the current call.\n */\nconst useCallBlockedUserIds = () => {\n    const { blockedUserIds$ } = useCallState();\n    return useObservableValue(blockedUserIds$);\n};\n/**\n * Returns the timestamp when this call was created.\n */\nconst useCallCreatedAt = () => {\n    const { createdAt$ } = useCallState();\n    return useObservableValue(createdAt$);\n};\n/**\n * Returns the timestamp when this call was ended.\n */\nconst useCallEndedAt = () => {\n    const { endedAt$ } = useCallState();\n    return useObservableValue(endedAt$);\n};\n/**\n * Returns the timestamp telling when the call is scheduled to start.\n */\nconst useCallStartsAt = () => {\n    const { startsAt$ } = useCallState();\n    return useObservableValue(startsAt$);\n};\n/**\n * Returns the timestamp when this call was updated.\n */\nconst useCallUpdatedAt = () => {\n    const { updatedAt$ } = useCallState();\n    return useObservableValue(updatedAt$);\n};\n/**\n * Returns the information about the call's creator.\n */\nconst useCallCreatedBy = () => {\n    const { createdBy$ } = useCallState();\n    return useObservableValue(createdBy$);\n};\n/**\n * Returns the call's custom data.\n */\nconst useCallCustomData = () => {\n    const { custom$ } = useCallState();\n    return useObservableValue(custom$);\n};\n/**\n * Returns the call's Egress information.\n */\nconst useCallEgress = () => {\n    const { egress$ } = useCallState();\n    return useObservableValue(egress$);\n};\n/**\n * Returns the call's Ingress information.\n */\nconst useCallIngress = () => {\n    const { ingress$ } = useCallState();\n    return useObservableValue(ingress$);\n};\n/**\n * Returns the data for the current call session.\n */\nconst useCallSession = () => {\n    const { session$ } = useCallState();\n    return useObservableValue(session$);\n};\n/**\n * Returns the call's settings.\n */\nconst useCallSettings = () => {\n    const { settings$ } = useCallState();\n    return useObservableValue(settings$);\n};\n/**\n * Returns whether the call has transcribing enabled.\n */\nconst useIsCallTranscribingInProgress = () => {\n    const { transcribing$ } = useCallState();\n    return useObservableValue(transcribing$);\n};\n/**\n * Returns information about the user who has marked this call as ended.\n */\nconst useCallEndedBy = () => {\n    const { endedBy$ } = useCallState();\n    return useObservableValue(endedBy$);\n};\n/**\n * Utility hook which provides a boolean indicating whether there is\n * a participant in the current call which shares their screen.\n *\n * @category Call State\n */\nconst useHasOngoingScreenShare = () => {\n    const { hasOngoingScreenShare$ } = useCallState();\n    return useObservableValue(hasOngoingScreenShare$);\n};\n/**\n * Utility hook which provides the latest stats report of the current call.\n *\n * The latest stats report of the current call.\n * When stats gathering is enabled, this observable will emit a new value\n * at a regular (configurable) interval.\n *\n * Consumers of this observable can implement their own batching logic\n * in case they want to show historical stats data.\n *\n * @category Call State\n */\nconst useCallStatsReport = () => {\n    const { callStatsReport$ } = useCallState();\n    return useObservableValue(callStatsReport$);\n};\n/**\n * Utility hook which provides the dominant speaker of the current call.\n *\n * @category Call State\n */\nconst useDominantSpeaker = () => {\n    const { dominantSpeaker$ } = useCallState();\n    return useObservableValue(dominantSpeaker$);\n};\n/**\n * Utility hook which provides a list of call members.\n *\n * @category Call State\n */\nconst useCallMembers = () => {\n    const { members$ } = useCallState();\n    return useObservableValue(members$);\n};\n/**\n * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.\n *\n * @category Call State\n */\nconst useCallCallingState = () => {\n    const { callingState$ } = useCallState();\n    return useObservableValue(callingState$);\n};\n/**\n * Utility hook providing the actual start time of the current session.\n * Useful for calculating the call duration.\n *\n * @category Call State\n */\nconst useCallStartedAt = () => {\n    const { startedAt$ } = useCallState();\n    return useObservableValue(startedAt$);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n *\n * @category Call State\n *\n * @param options.sortBy - A comparator function to sort the participants by.\n * Make sure to memoize output of the `combineComparators` function\n * (or keep it out of component's scope if possible) before passing it down to this property.\n */\nconst useParticipants = ({ sortBy, } = {}) => {\n    const { participants$ } = useCallState();\n    const participants = useObservableValue(participants$);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (sortBy) {\n            return [...participants].sort(sortBy);\n        }\n        return participants;\n    }, [participants, sortBy]);\n};\n/**\n * A hook which provides a StreamVideoLocalParticipant object.\n * It signals that I have joined a call.\n *\n * @category Call State\n */\nconst useLocalParticipant = () => {\n    const { localParticipant$ } = useCallState();\n    return useObservableValue(localParticipant$);\n};\n/**\n * A hook which provides a list of all other participants than me that have joined an active call.\n *\n * @category Call State\n */\nconst useRemoteParticipants = () => {\n    const { remoteParticipants$ } = useCallState();\n    return useObservableValue(remoteParticipants$);\n};\n/**\n * Returns the approximate participant count of the active call.\n * This includes the anonymous users as well, and it is computed on the server.\n *\n * @category Call State\n */\nconst useParticipantCount = () => {\n    const { participantCount$ } = useCallState();\n    return useObservableValue(participantCount$);\n};\n/**\n * Returns the approximate anonymous participant count of the active call.\n * The regular participants are not included in this count. It is computed on the server.\n *\n * @category Call State\n */\nconst useAnonymousParticipantCount = () => {\n    const { anonymousParticipantCount$ } = useCallState();\n    return useObservableValue(anonymousParticipantCount$);\n};\n/**\n * Returns the generated thumbnail of the current call, if enabled in settings.\n */\nconst useCallThumbnail = () => {\n    const { thumbnails$ } = useCallState();\n    return useObservableValue(thumbnails$);\n};\n/**\n * A hook which returns the local participant's own capabilities.\n */\nconst useOwnCapabilities = () => {\n    const { ownCapabilities$ } = useCallState();\n    return useObservableValue(ownCapabilities$);\n};\n/**\n * Hook that returns true if the local participant has all the given permissions.\n *\n * @param permissions the permissions to check.\n */\nconst useHasPermissions = (...permissions) => {\n    const capabilities = useOwnCapabilities();\n    return permissions.every((permission) => capabilities?.includes(permission));\n};\n/**\n * Returns the camera state of the current call.\n *\n * @category Camera Manager State\n *\n */\nconst useCameraState = () => {\n    const call = useCall();\n    const { camera } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => camera.listDevices(), [camera]);\n    const { state } = camera;\n    const status = useObservableValue(state.status$);\n    const optimisticStatus = useObservableValue(state.optimisticStatus$);\n    const direction = useObservableValue(state.direction$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isMute = status !== 'enabled';\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        camera,\n        status,\n        optimisticStatus,\n        isEnabled: status === 'enabled',\n        direction,\n        mediaStream,\n        devices,\n        hasBrowserPermission,\n        selectedDevice,\n        isMute,\n        optimisticIsMute,\n    };\n};\n/**\n * Returns the microphone state of the current call.\n *\n * @category Microphone Manager State\n */\nconst useMicrophoneState = () => {\n    const call = useCall();\n    const { microphone } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => microphone.listDevices(), [microphone]);\n    const { state } = microphone;\n    const status = useObservableValue(state.status$);\n    const optimisticStatus = useObservableValue(state.optimisticStatus$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);\n    const isMute = status !== 'enabled';\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        microphone,\n        status,\n        optimisticStatus,\n        isEnabled: status === 'enabled',\n        mediaStream,\n        devices,\n        selectedDevice,\n        hasBrowserPermission,\n        isSpeakingWhileMuted,\n        isMute,\n        optimisticIsMute,\n    };\n};\n/**\n * Returns the speaker state of the current call.\n *\n * Note: This hook is not supported in React Native\n */\nconst useSpeakerState = () => {\n    if (isReactNative()) {\n        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    const call = useCall();\n    const { speaker } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => speaker.listDevices(), [speaker]);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);\n    return {\n        speaker,\n        devices,\n        selectedDevice,\n        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,\n    };\n};\n/**\n * Returns the Screen Share state of the current call.\n */\nconst useScreenShareState = () => {\n    const call = useCall();\n    const { screenShare } = call;\n    const status = useObservableValue(screenShare.state.status$);\n    const pendingStatus = useObservableValue(screenShare.state.optimisticStatus$);\n    const mediaStream = useObservableValue(screenShare.state.mediaStream$);\n    const isMute = status !== 'enabled';\n    const optimisticStatus = pendingStatus ?? status;\n    const optimisticIsMute = optimisticStatus !== 'enabled';\n    return {\n        screenShare,\n        mediaStream,\n        status,\n        optimisticStatus,\n        isMute,\n        optimisticIsMute,\n    };\n};\n\nvar CallStateHooks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    useAnonymousParticipantCount: useAnonymousParticipantCount,\n    useCallBlockedUserIds: useCallBlockedUserIds,\n    useCallCallingState: useCallCallingState,\n    useCallCreatedAt: useCallCreatedAt,\n    useCallCreatedBy: useCallCreatedBy,\n    useCallCustomData: useCallCustomData,\n    useCallEgress: useCallEgress,\n    useCallEndedAt: useCallEndedAt,\n    useCallEndedBy: useCallEndedBy,\n    useCallIngress: useCallIngress,\n    useCallMembers: useCallMembers,\n    useCallSession: useCallSession,\n    useCallSettings: useCallSettings,\n    useCallStartedAt: useCallStartedAt,\n    useCallStartsAt: useCallStartsAt,\n    useCallState: useCallState,\n    useCallStatsReport: useCallStatsReport,\n    useCallThumbnail: useCallThumbnail,\n    useCallUpdatedAt: useCallUpdatedAt,\n    useCameraState: useCameraState,\n    useDominantSpeaker: useDominantSpeaker,\n    useHasOngoingScreenShare: useHasOngoingScreenShare,\n    useHasPermissions: useHasPermissions,\n    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,\n    useIsCallLive: useIsCallLive,\n    useIsCallRecordingInProgress: useIsCallRecordingInProgress,\n    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,\n    useLocalParticipant: useLocalParticipant,\n    useMicrophoneState: useMicrophoneState,\n    useOwnCapabilities: useOwnCapabilities,\n    useParticipantCount: useParticipantCount,\n    useParticipants: useParticipants,\n    useRemoteParticipants: useRemoteParticipants,\n    useScreenShareState: useScreenShareState,\n    useSpeakerState: useSpeakerState\n});\n\n/**\n * Utility hook which provides access to client's state store.\n */\nconst useStore = () => {\n    const client = useStreamVideoClient();\n    if (!client) {\n        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);\n    }\n    return client.state;\n};\n/**\n * Utility hook which provides a list of all notifications about created calls.\n * In the ring call settings, these calls can be outgoing (I have called somebody)\n * or incoming (somebody has called me).\n *\n * @category Client State\n */\nconst useCalls = () => {\n    const { calls$ } = useStore();\n    return useObservableValue(calls$);\n};\n/**\n * Returns the current connected user.\n *\n * @category Client State\n */\nconst useConnectedUser = () => {\n    const { connectedUser$ } = useStore();\n    return useObservableValue(connectedUser$);\n};\n\n/**\n * A hook-alike function that exposes all call state hooks.\n *\n * @category Call State\n */\nconst useCallStateHooks = () => CallStateHooks;\n\nconst Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {\n    const call = useCall();\n    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();\n    const ownCapabilities = useOwnCapabilities();\n    const settings = useCallSettings();\n    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));\n    if (hasPermissionsOnly)\n        return hasPermissions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));\n    if (canRequestOnly)\n        return canRequest ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    if (hasPermissions || canRequest)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return null;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcceptCallButton: () => (/* binding */ AcceptCallButton),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   Avatar: () => (/* binding */ Avatar),\n/* harmony export */   AvatarFallback: () => (/* binding */ AvatarFallback),\n/* harmony export */   AxiosError: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AxiosError),\n/* harmony export */   BackgroundFiltersProvider: () => (/* binding */ BackgroundFiltersProvider),\n/* harmony export */   BaseVideo: () => (/* binding */ BaseVideo),\n/* harmony export */   BlockListOptionsBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.BlockListOptionsBehaviorEnum),\n/* harmony export */   Browsers: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers),\n/* harmony export */   Call: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Call),\n/* harmony export */   CallControls: () => (/* binding */ CallControls),\n/* harmony export */   CallParticipantListing: () => (/* binding */ CallParticipantListing),\n/* harmony export */   CallParticipantListingItem: () => (/* binding */ CallParticipantListingItem),\n/* harmony export */   CallParticipantsList: () => (/* binding */ CallParticipantsList),\n/* harmony export */   CallPreview: () => (/* binding */ CallPreview),\n/* harmony export */   CallRecordingList: () => (/* binding */ CallRecordingList),\n/* harmony export */   CallRecordingListHeader: () => (/* binding */ CallRecordingListHeader),\n/* harmony export */   CallRecordingListItem: () => (/* binding */ CallRecordingListItem),\n/* harmony export */   CallState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallState),\n/* harmony export */   CallStats: () => (/* binding */ CallStats),\n/* harmony export */   CallStatsButton: () => (/* binding */ CallStatsButton),\n/* harmony export */   CallType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallType),\n/* harmony export */   CallTypes: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes),\n/* harmony export */   CallingState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState),\n/* harmony export */   CameraManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManager),\n/* harmony export */   CameraManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManagerState),\n/* harmony export */   CancelCallButton: () => (/* binding */ CancelCallButton),\n/* harmony export */   CancelCallConfirmButton: () => (/* binding */ CancelCallConfirmButton),\n/* harmony export */   ChannelConfigWithInfoAutomodBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoAutomodBehaviorEnum),\n/* harmony export */   ChannelConfigWithInfoAutomodEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoAutomodEnum),\n/* harmony export */   ChannelConfigWithInfoBlocklistBehaviorEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ChannelConfigWithInfoBlocklistBehaviorEnum),\n/* harmony export */   CompositeButton: () => (/* binding */ CompositeButton),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NAMESPACE),\n/* harmony export */   DebounceType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DebounceType),\n/* harmony export */   DefaultParticipantViewUI: () => (/* binding */ DefaultParticipantViewUI),\n/* harmony export */   DefaultReactionsMenu: () => (/* binding */ DefaultReactionsMenu),\n/* harmony export */   DefaultScreenShareOverlay: () => (/* binding */ DefaultScreenShareOverlay),\n/* harmony export */   DefaultVideoPlaceholder: () => (/* binding */ DefaultVideoPlaceholder),\n/* harmony export */   DeviceSelector: () => (/* binding */ DeviceSelector),\n/* harmony export */   DeviceSelectorAudioInput: () => (/* binding */ DeviceSelectorAudioInput),\n/* harmony export */   DeviceSelectorAudioOutput: () => (/* binding */ DeviceSelectorAudioOutput),\n/* harmony export */   DeviceSelectorVideo: () => (/* binding */ DeviceSelectorVideo),\n/* harmony export */   DeviceSettings: () => (/* binding */ DeviceSettings),\n/* harmony export */   DropDownSelect: () => (/* binding */ DropDownSelect),\n/* harmony export */   DropDownSelectOption: () => (/* binding */ DropDownSelectOption),\n/* harmony export */   DynascaleManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DynascaleManager),\n/* harmony export */   EmptyCallRecordingListing: () => (/* binding */ EmptyCallRecordingListing),\n/* harmony export */   ErrorFromResponse: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ErrorFromResponse),\n/* harmony export */   GenericMenu: () => (/* binding */ GenericMenu),\n/* harmony export */   GenericMenuButtonItem: () => (/* binding */ GenericMenuButtonItem),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   IconButton: () => (/* binding */ IconButton),\n/* harmony export */   InputMediaDeviceManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManagerState),\n/* harmony export */   LivestreamLayout: () => (/* binding */ LivestreamLayout),\n/* harmony export */   LivestreamPlayer: () => (/* binding */ LivestreamPlayer),\n/* harmony export */   LoadingCallRecordingListing: () => (/* binding */ LoadingCallRecordingListing),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MenuToggle: () => (/* binding */ MenuToggle),\n/* harmony export */   MenuVisualType: () => (/* binding */ MenuVisualType),\n/* harmony export */   MicrophoneManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManagerState),\n/* harmony export */   NoiseCancellationProvider: () => (/* binding */ NoiseCancellationProvider),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum),\n/* harmony export */   Notification: () => (/* binding */ Notification),\n/* harmony export */   OwnCapability: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability),\n/* harmony export */   PaginatedGridLayout: () => (/* binding */ PaginatedGridLayout),\n/* harmony export */   ParticipantActionsContextMenu: () => (/* binding */ ParticipantActionsContextMenu),\n/* harmony export */   ParticipantDetails: () => (/* binding */ ParticipantDetails),\n/* harmony export */   ParticipantView: () => (/* binding */ ParticipantView),\n/* harmony export */   ParticipantViewContext: () => (/* binding */ ParticipantViewContext),\n/* harmony export */   ParticipantsAudio: () => (/* binding */ ParticipantsAudio),\n/* harmony export */   PermissionNotification: () => (/* binding */ PermissionNotification),\n/* harmony export */   PermissionRequestList: () => (/* binding */ PermissionRequestList),\n/* harmony export */   PermissionRequests: () => (/* binding */ PermissionRequests),\n/* harmony export */   ReactionsButton: () => (/* binding */ ReactionsButton),\n/* harmony export */   RecordCallButton: () => (/* binding */ RecordCallButton),\n/* harmony export */   RecordCallConfirmationButton: () => (/* binding */ RecordCallConfirmationButton),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestQualityEnum),\n/* harmony export */   RecordingInProgressNotification: () => (/* binding */ RecordingInProgressNotification),\n/* harmony export */   Restricted: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted),\n/* harmony export */   RingingCall: () => (/* binding */ RingingCall),\n/* harmony export */   RingingCallControls: () => (/* binding */ RingingCallControls),\n/* harmony export */   RxUtils: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RxUtils),\n/* harmony export */   ScreenShareButton: () => (/* binding */ ScreenShareButton),\n/* harmony export */   ScreenShareManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareState),\n/* harmony export */   SearchInput: () => (/* binding */ SearchInput),\n/* harmony export */   SearchResults: () => (/* binding */ SearchResults),\n/* harmony export */   SfuEvents: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuEvents),\n/* harmony export */   SfuModels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels),\n/* harmony export */   SpeakerLayout: () => (/* binding */ SpeakerLayout),\n/* harmony export */   SpeakerManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerState),\n/* harmony export */   SpeakingWhileMutedNotification: () => (/* binding */ SpeakingWhileMutedNotification),\n/* harmony export */   SpeechIndicator: () => (/* binding */ SpeechIndicator),\n/* harmony export */   StatCard: () => (/* binding */ StatCard),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamCallProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18nProvider),\n/* harmony export */   StreamSfuClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamSfuClient),\n/* harmony export */   StreamTheme: () => (/* binding */ StreamTheme),\n/* harmony export */   StreamVideo: () => (/* binding */ StreamVideo),\n/* harmony export */   StreamVideoClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoClient),\n/* harmony export */   StreamVideoProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoWriteableStateStore),\n/* harmony export */   TextButton: () => (/* binding */ TextButton),\n/* harmony export */   ToggleAudioOutputButton: () => (/* binding */ ToggleAudioOutputButton),\n/* harmony export */   ToggleAudioPreviewButton: () => (/* binding */ ToggleAudioPreviewButton),\n/* harmony export */   ToggleAudioPublishingButton: () => (/* binding */ ToggleAudioPublishingButton),\n/* harmony export */   ToggleVideoPreviewButton: () => (/* binding */ ToggleVideoPreviewButton),\n/* harmony export */   ToggleVideoPublishingButton: () => (/* binding */ ToggleVideoPublishingButton),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsResponseModeEnum),\n/* harmony export */   Video: () => (/* binding */ Video$1),\n/* harmony export */   VideoPreview: () => (/* binding */ VideoPreview),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState),\n/* harmony export */   WithTooltip: () => (/* binding */ WithTooltip),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators),\n/* harmony export */   conditional: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.conditional),\n/* harmony export */   createSoundDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.createSoundDetector),\n/* harmony export */   defaultReactions: () => (/* binding */ defaultReactions),\n/* harmony export */   defaultSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset),\n/* harmony export */   defaultTranslationFunction: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.defaultTranslationFunction),\n/* harmony export */   descending: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.descending),\n/* harmony export */   deviceIds$: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioStream),\n/* harmony export */   getClientDetails: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getDeviceInfo),\n/* harmony export */   getLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogLevel),\n/* harmony export */   getLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger),\n/* harmony export */   getOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio),\n/* harmony export */   hasScreenShare: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo),\n/* harmony export */   isPinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logLevels),\n/* harmony export */   logToConsole: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logToConsole),\n/* harmony export */   mapToRegistry: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.mapToRegistry),\n/* harmony export */   name: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name),\n/* harmony export */   noopComparator: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.pinned),\n/* harmony export */   publishingAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingAudio),\n/* harmony export */   publishingVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingVideo),\n/* harmony export */   reactionType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.reactionType),\n/* harmony export */   role: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.role),\n/* harmony export */   screenSharing: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   setLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogger),\n/* harmony export */   setOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speaking),\n/* harmony export */   translations: () => (/* binding */ translations),\n/* harmony export */   useBackgroundFilters: () => (/* binding */ useBackgroundFilters),\n/* harmony export */   useCall: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall),\n/* harmony export */   useCallStateHooks: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks),\n/* harmony export */   useCalls: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCalls),\n/* harmony export */   useConnectedUser: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCreateI18n),\n/* harmony export */   useHorizontalScrollPosition: () => (/* binding */ useHorizontalScrollPosition),\n/* harmony export */   useI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n),\n/* harmony export */   useMenuContext: () => (/* binding */ useMenuContext),\n/* harmony export */   useNoiseCancellation: () => (/* binding */ useNoiseCancellation),\n/* harmony export */   useParticipantViewContext: () => (/* binding */ useParticipantViewContext),\n/* harmony export */   usePersistedDevicePreferences: () => (/* binding */ usePersistedDevicePreferences),\n/* harmony export */   useRequestPermission: () => (/* binding */ useRequestPermission),\n/* harmony export */   useStore: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStore),\n/* harmony export */   useStreamVideoClient: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient),\n/* harmony export */   useTrackElementVisibility: () => (/* binding */ useTrackElementVisibility),\n/* harmony export */   useVerticalScrollPosition: () => (/* binding */ useVerticalScrollPosition)\n/* harmony export */ });\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stream-io/video-react-bindings */ \"(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stream-io/video-filters-web */ \"(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nconst Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [audioElement, setAudioElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { userId, sessionId } = participant;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !audioElement)\n            return;\n        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, sessionId, audioElement, trackType]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"audio\", { autoPlay: true, ...rest, ref: setAudioElement, \"data-user-id\": userId, \"data-session-id\": sessionId, \"data-track-type\": trackType }));\n};\nAudio.displayName = 'Audio';\n\nconst ParticipantsAudio = (props) => {\n    const { participants, audioProps } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: participants.map((participant) => {\n            if (participant.isLocalParticipant)\n                return null;\n            const { audioStream, screenShareAudioStream, sessionId } = participant;\n            const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n            const audioTrackElement = hasAudioTrack && audioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"audioTrack\", participant: participant }));\n            const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n            const screenShareAudioTrackElement = hasScreenShareAudioTrack &&\n                screenShareAudioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"screenShareAudioTrack\", participant: participant }));\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));\n        }) }));\n};\nParticipantsAudio.displayName = 'ParticipantsAudio';\n\nconst ParticipantViewContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\nconst useParticipantViewContext = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ParticipantViewContext);\n\nconst Avatar = ({ imageSrc, name, style, className, ...rest }) => {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(!imageSrc || error) && name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"avatar\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));\n};\nconst AvatarFallback = ({ className, names, style, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar--initials-fallback', className), style: style, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { children: [names[0][0], names[1]?.[0]] }) }));\n};\n\n/**\n * The context for the background filters.\n */\nconst BackgroundFiltersContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\n/**\n * A hook to access the background filters context API.\n */\nconst useBackgroundFilters = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(BackgroundFiltersContext);\n    if (!context) {\n        throw new Error('useBackgroundFilters must be used within a BackgroundFiltersProvider');\n    }\n    return context;\n};\n/**\n * A provider component that enables the use of background filters in your app.\n *\n * Please make sure you have the `@stream-io/video-filters-web` package installed\n * in your project before using this component.\n */\nconst BackgroundFiltersProvider = (props) => {\n    const { children, backgroundImages = [], backgroundFilter: bgFilterFromProps = undefined, backgroundImage: bgImageFromProps = undefined, backgroundBlurLevel: bgBlurLevelFromProps = 'high', tfFilePath, modelFilePath, basePath, onError, } = props;\n    const [backgroundFilter, setBackgroundFilter] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgFilterFromProps);\n    const [backgroundImage, setBackgroundImage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgImageFromProps);\n    const [backgroundBlurLevel, setBackgroundBlurLevel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgBlurLevelFromProps);\n    const applyBackgroundImageFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((imageUrl) => {\n        setBackgroundFilter('image');\n        setBackgroundImage(imageUrl);\n    }, []);\n    const applyBackgroundBlurFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((blurLevel = 'high') => {\n        setBackgroundFilter('blur');\n        setBackgroundBlurLevel(blurLevel);\n    }, []);\n    const disableBackgroundFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        setBackgroundFilter(undefined);\n        setBackgroundImage(undefined);\n        setBackgroundBlurLevel('high');\n    }, []);\n    const [isSupported, setIsSupported] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.isPlatformSupported)().then(setIsSupported);\n    }, []);\n    const [tfLite, setTfLite] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // don't try to load TFLite if the platform is not supported\n        if (!isSupported)\n            return;\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.loadTFLite)({ basePath, modelFilePath, tfFilePath })\n            .then(setTfLite)\n            .catch((err) => console.error('Failed to load TFLite', err));\n    }, [basePath, isSupported, modelFilePath, tfFilePath]);\n    const handleError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((error) => {\n        (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['filters'])('warn', 'Filter encountered an error and will be disabled');\n        disableBackgroundFilter();\n        onError?.(error);\n    }, [disableBackgroundFilter, onError]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(BackgroundFiltersContext.Provider, { value: {\n            isSupported,\n            isReady: !!tfLite,\n            backgroundImage,\n            backgroundBlurLevel,\n            backgroundFilter,\n            disableBackgroundFilter,\n            applyBackgroundBlurFilter,\n            applyBackgroundImageFilter,\n            backgroundImages,\n            tfFilePath,\n            modelFilePath,\n            basePath,\n            onError: handleError,\n        }, children: [children, tfLite && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BackgroundFilters, { tfLite: tfLite })] }));\n};\nconst BackgroundFilters = (props) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { children, start } = useRenderer(props.tfLite);\n    const { backgroundFilter, onError } = useBackgroundFilters();\n    const handleErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    handleErrorRef.current = onError;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !backgroundFilter)\n            return;\n        const { unregister } = call.camera.registerFilter((ms) => start(ms, (error) => handleErrorRef.current?.(error)));\n        return () => {\n            unregister();\n        };\n    }, [backgroundFilter, call, start]);\n    return children;\n};\nconst useRenderer = (tfLite) => {\n    const { backgroundFilter, backgroundBlurLevel, backgroundImage } = useBackgroundFilters();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const bgImageRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [videoSize, setVideoSize] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        width: 1920,\n        height: 1080,\n    });\n    const start = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ms, onError) => {\n        let outputStream;\n        let renderer;\n        const output = new Promise((resolve, reject) => {\n            if (!backgroundFilter) {\n                reject(new Error('No filter specified'));\n                return;\n            }\n            const videoEl = videoRef.current;\n            const canvasEl = canvasRef.current;\n            const bgImageEl = bgImageRef.current;\n            if (!videoEl || !canvasEl || (backgroundImage && !bgImageEl)) {\n                // You should start renderer in effect or event handlers\n                reject(new Error('Renderer started before elements are ready'));\n                return;\n            }\n            videoEl.srcObject = ms;\n            videoEl.play().then(() => {\n                const [track] = ms.getVideoTracks();\n                if (!track) {\n                    reject(new Error('No video tracks in input media stream'));\n                    return;\n                }\n                const trackSettings = track.getSettings();\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_5__.flushSync)(() => setVideoSize({\n                    width: trackSettings.width ?? 0,\n                    height: trackSettings.height ?? 0,\n                }));\n                renderer = (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_6__.createRenderer)(tfLite, videoEl, canvasEl, {\n                    backgroundFilter,\n                    backgroundBlurLevel,\n                    backgroundImage: bgImageEl ?? undefined,\n                }, onError);\n                outputStream = canvasEl.captureStream();\n                resolve(outputStream);\n            }, () => {\n                reject(new Error('Could not play the source video stream'));\n            });\n        });\n        return {\n            output,\n            stop: () => {\n                renderer?.dispose();\n                videoRef.current && (videoRef.current.srcObject = null);\n                outputStream && (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream)(outputStream);\n            },\n        };\n    }, [backgroundBlurLevel, backgroundFilter, backgroundImage, tfLite]);\n    const children = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__background-filters\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__background-filters__video', videoSize.height > videoSize.width &&\n                    'str-video__background-filters__video--tall'), ref: videoRef, playsInline: true, muted: true, controls: false, ...videoSize }), backgroundImage && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: \"str-video__background-filters__background-image\", alt: \"Background\", ref: bgImageRef, src: backgroundImage, ...videoSize })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"canvas\", { className: \"str-video__background-filters__target-canvas\", ...videoSize, ref: canvasRef })] }));\n    return {\n        start,\n        children,\n    };\n};\n\nconst useFloatingUIPreset = ({ middleware = [], placement, strategy, offset: offsetInPx = 10, }) => {\n    const { refs, x, y, update, elements: { domReference, floating }, context, } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        placement,\n        strategy,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.offset)(offsetInPx),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.shift)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.size)({\n                padding: 10,\n                apply: ({ availableHeight, elements }) => {\n                    Object.assign(elements.floating.style, {\n                        maxHeight: `${availableHeight}px`,\n                    });\n                },\n            }),\n            ...middleware,\n        ],\n    });\n    // handle window resizing\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!domReference || !floating)\n            return;\n        const cleanup = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_9__.autoUpdate)(domReference, floating, update);\n        return () => cleanup();\n    }, [domReference, floating, update]);\n    return { refs, x, y, domReference, floating, strategy, context };\n};\n\nconst defaultDevice = 'default';\n/**\n * This hook will persist the device settings to local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistDevicePreferences = (key) => {\n    const { useMicrophoneState, useCameraState, useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const mic = useMicrophoneState();\n    const camera = useCameraState();\n    const speaker = useSpeakerState();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        try {\n            const preferences = {\n                mic: {\n                    selectedDeviceId: mic.selectedDevice || defaultDevice,\n                    muted: mic.isMute,\n                },\n                camera: {\n                    selectedDeviceId: camera.selectedDevice || defaultDevice,\n                    muted: camera.isMute,\n                },\n                speaker: {\n                    selectedDeviceId: speaker.selectedDevice || defaultDevice,\n                    muted: false,\n                },\n            };\n            window.localStorage.setItem(key, JSON.stringify(preferences));\n        }\n        catch (err) {\n            console.warn('Failed to save device preferences', err);\n        }\n    }, [\n        call,\n        camera.isMute,\n        camera.selectedDevice,\n        key,\n        mic.isMute,\n        mic.selectedDevice,\n        speaker.selectedDevice,\n    ]);\n};\n/**\n * This hook will apply the device settings from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst useApplyDevicePreferences = (key) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        const apply = async () => {\n            const initMic = async (setting) => {\n                await call.microphone.select(parseDeviceId(setting.selectedDeviceId));\n                if (setting.muted) {\n                    await call.microphone.disable();\n                }\n                else {\n                    await call.microphone.enable();\n                }\n            };\n            const initCamera = async (setting) => {\n                await call.camera.select(parseDeviceId(setting.selectedDeviceId));\n                if (setting.muted) {\n                    await call.camera.disable();\n                }\n                else {\n                    await call.camera.enable();\n                }\n            };\n            const initSpeaker = (setting) => {\n                call.speaker.select(parseDeviceId(setting.selectedDeviceId) ?? '');\n            };\n            let preferences = null;\n            try {\n                preferences = JSON.parse(window.localStorage.getItem(key));\n            }\n            catch (err) {\n                console.warn('Failed to load device preferences', err);\n            }\n            if (preferences) {\n                await initMic(preferences.mic);\n                await initCamera(preferences.camera);\n                initSpeaker(preferences.speaker);\n            }\n        };\n        apply().catch((err) => {\n            console.warn('Failed to apply device preferences', err);\n        });\n    }, [call, key]);\n};\n/**\n * This hook will apply and persist the device preferences from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {\n    useApplyDevicePreferences(key);\n    usePersistDevicePreferences(key);\n};\nconst parseDeviceId = (deviceId) => deviceId !== defaultDevice ? deviceId : undefined;\n\nconst SCROLL_THRESHOLD = 10;\n/**\n * Hook which observes element's scroll position and returns text value based on the\n * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)\n */\nconst useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n            if (!hasVerticalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheTop = element.scrollTop <= threshold;\n            if (isAtTheTop)\n                return setScrollPosition('top');\n            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;\n            if (isAtTheBottom)\n                return setScrollPosition('bottom');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\nconst useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n            if (!hasHorizontalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheStart = element.scrollLeft <= threshold;\n            if (isAtTheStart)\n                return setScrollPosition('start');\n            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;\n            if (isAtTheEnd)\n                return setScrollPosition('end');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\n\nconst useToggleCallRecording = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useIsCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallRecordingInProgress = useIsCallRecordingInProgress();\n    const [isAwaitingResponse, setIsAwaitingResponse] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    // TODO: add permissions\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // we wait until call.recording_started/stopped event to flips the\n        // `isCallRecordingInProgress` state variable.\n        // Once the flip happens, we remove the loading indicator\n        setIsAwaitingResponse((isAwaiting) => {\n            if (isAwaiting)\n                return false;\n            return isAwaiting;\n        });\n    }, [isCallRecordingInProgress]);\n    const toggleCallRecording = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        try {\n            setIsAwaitingResponse(true);\n            if (isCallRecordingInProgress) {\n                await call?.stopRecording();\n            }\n            else {\n                await call?.startRecording();\n            }\n        }\n        catch (e) {\n            console.error(`Failed start recording`, e);\n        }\n    }, [call, isCallRecordingInProgress]);\n    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };\n};\n\nconst useRequestPermission = (permission) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const [isAwaitingPermission, setIsAwaitingPermission] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false); // TODO: load with possibly pending state\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const reset = () => setIsAwaitingPermission(false);\n        if (hasPermission)\n            reset();\n    }, [hasPermission]);\n    const requestPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        if (hasPermission)\n            return true;\n        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);\n        if (isAwaitingPermission || !canRequestPermission)\n            return false;\n        setIsAwaitingPermission(true);\n        try {\n            await call?.requestPermissions({\n                permissions: [permission],\n            });\n        }\n        catch (error) {\n            setIsAwaitingPermission(false);\n            throw new Error(`requestPermission failed: ${error}`);\n        }\n        return false;\n    }, [call, hasPermission, isAwaitingPermission, permission]);\n    return {\n        requestPermission,\n        hasPermission,\n        canRequestPermission: !!call?.permissionsContext.canRequest(permission),\n        isAwaitingPermission,\n    };\n};\n\nvar MenuVisualType;\n(function (MenuVisualType) {\n    MenuVisualType[\"PORTAL\"] = \"portal\";\n    MenuVisualType[\"MENU\"] = \"menu\";\n})(MenuVisualType || (MenuVisualType = {}));\n/**\n * Used to provide utility APIs to the components rendered inside the portal.\n */\nconst MenuContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\n/**\n * Access to the closes MenuContext.\n */\nconst useMenuContext = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(MenuContext);\n};\nconst MenuPortal = ({ children, refs, }) => {\n    const portalId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { id: portalId, className: \"str-video__portal\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingOverlay, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingPortal, { id: portalId, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__portal-content\", ref: refs.setFloating, children: children }) }) })] }));\n};\nconst MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = MenuVisualType.MENU, children, onToggle, }) => {\n    const [menuShown, setMenuShown] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const toggleHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(onToggle);\n    toggleHandler.current = onToggle;\n    const { floating, domReference, refs, x, y } = useFloatingUIPreset({\n        placement,\n        strategy,\n        offset,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const handleClick = (event) => {\n            if (!floating && domReference?.contains(event.target)) {\n                setMenuShown(true);\n                toggleHandler.current?.(true);\n            }\n            else if (floating && !floating?.contains(event.target)) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        const handleKeyDown = (event) => {\n            if (event.key && // key can be undefined in some browsers\n                event.key.toLowerCase() === 'escape' &&\n                !event.altKey &&\n                !event.ctrlKey) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        document?.addEventListener('click', handleClick, { capture: true });\n        document?.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document?.removeEventListener('click', handleClick, { capture: true });\n            document?.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [floating, domReference]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [menuShown && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === MenuVisualType.PORTAL ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuPortal, { refs: refs, children: children })) : visualType === MenuVisualType.MENU ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__menu-container\", ref: refs.setFloating, style: {\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                        overflowY: 'auto',\n                    }, role: \"menu\", children: children })) : null })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));\n};\n\nconst GenericMenu = ({ children, onItemClick, }) => {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__generic-menu\", ref: ref, onClick: (e) => {\n            if (onItemClick &&\n                e.target !== ref.current &&\n                ref.current?.contains(e.target)) {\n                onItemClick(e);\n            }\n        }, children: children }));\n};\nconst GenericMenuButtonItem = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", { className: \"str-video__generic-menu--item\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, children: children }) }));\n};\n\nconst Icon = ({ className, icon }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__icon', icon && `str-video__icon--${icon}`, className) }));\n\nconst IconButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function IconButton(props, ref) {\n    const { icon, enabled, variant, onClick, className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-controls__button', className, {\n            [`str-video__call-controls__button--variant-${variant}`]: variant,\n            'str-video__call-controls__button--enabled': enabled,\n        }), onClick: (e) => {\n            e.preventDefault();\n            onClick?.(e);\n        }, ref: ref, ...rest, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: icon }) }));\n});\n\nconst isComponentType = (elementOrComponent) => {\n    return elementOrComponent === null\n        ? false\n        : !(0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(elementOrComponent);\n};\n\nconst chunk = (array, size) => {\n    const chunkCount = Math.ceil(array.length / size);\n    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));\n};\n\nconst applyElementToRef = (ref, element) => {\n    if (!ref)\n        return;\n    if (typeof ref === 'function')\n        return ref(element);\n    ref.current = element;\n};\n\nconst CompositeButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CompositeButton({ caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, onMenuToggle, ...restButtonProps }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button', className, {\n            'str-video__composite-button--caption': caption,\n            'str-video__composite-button--menu': Menu,\n        }), title: title, ref: ref, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button__button-group', {\n                    'str-video__composite-button__button-group--active': active,\n                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',\n                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',\n                }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__composite-button__button\", onClick: (e) => {\n                            e.preventDefault();\n                            onClick?.(e);\n                        }, ...restButtonProps, children: children }), Menu && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, onToggle: onMenuToggle, children: isComponentType(Menu) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) : Menu }))] }), caption && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__composite-button__caption\", children: caption }))] }));\n});\nconst DefaultToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultToggleMenuButton({ menuShown }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__menu-toggle-button', {\n            'str-video__menu-toggle-button--active': menuShown,\n        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));\n});\n\nconst TextButton = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, className: \"str-video__text-button\", children: children }));\n};\n\nconst AcceptCallButton = ({ disabled, onAccept, onClick, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.join();\n            onAccept?.();\n        }\n    }, [onClick, onAccept, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-accept\", variant: \"success\", \"data-testid\": \"accept-call-button\", onClick: handleClick }));\n};\n\nconst Notification = (props) => {\n    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isVisible || !visibilityTimeout || !resetIsVisible)\n            return;\n        const timeout = setTimeout(() => {\n            resetIsVisible();\n        }, visibilityTimeout);\n        return () => clearTimeout(timeout);\n    }, [isVisible, resetIsVisible, visibilityTimeout]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: refs.setReference, children: [isVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__notification\", ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, children: [iconClassName && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: iconClassName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__notification__message\", children: message }), close ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: \"str-video__icon str-video__icon--close str-video__notification__close\", onClick: close })) : null] })), children] }));\n};\n\nconst PermissionNotification = (props) => {\n    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const prevHasPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(hasPermission);\n    const [showNotification, setShowNotification] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (hasPermission && !prevHasPermission.current) {\n            setShowNotification('granted');\n            prevHasPermission.current = true;\n        }\n        else if (!hasPermission && prevHasPermission.current) {\n            setShowNotification('revoked');\n            prevHasPermission.current = false;\n        }\n    }, [hasPermission]);\n    const resetIsVisible = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setShowNotification(undefined), []);\n    if (isAwaitingApproval) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));\n};\n\nconst SpeakingWhileMutedNotification = ({ children, text, placement, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isSpeakingWhileMuted } = useMicrophoneState();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const message = text ?? t('You are muted. Unmute to speak.');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));\n};\n\nconst RecordingInProgressNotification = ({ children, text, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { isCallRecordingInProgress } = useToggleCallRecording();\n    const [isVisible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const message = text ?? t('Recording in progress...');\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (isCallRecordingInProgress) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    }, [isCallRecordingInProgress]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, iconClassName: \"str-video__icon str-video__icon--recording-on\", isVisible: isVisible, placement: \"top-start\", close: () => setVisible(false), children: children }));\n};\n\nconst LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator', className), title: tooltip, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator__icon', type) }), text && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__loading-indicator-text\", children: text })] }));\n};\n\nconst Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {\n    const arrowRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { refs, x, y, strategy, context } = useFloatingUIPreset({\n        placement: tooltipPlacement,\n        strategy: 'absolute',\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.arrow)({ element: arrowRef })],\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        refs.setReference(referenceElement);\n    }, [referenceElement, refs]);\n    if (!visible)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n        }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingArrow, { ref: arrowRef, context: context, fill: \"var(--str-video__tooltip--background-color)\" }), children] }));\n};\n\nconst useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(true);\n        onMouseEnter?.(e);\n    }, [onMouseEnter]);\n    const handleMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(false);\n        onMouseLeave?.(e);\n    }, [onMouseLeave]);\n    return { handleMouseEnter, handleMouseLeave, tooltipVisible };\n};\n\n// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component\nconst WithTooltip = ({ title, tooltipClassName, tooltipPlacement, tooltipDisabled, ...props }) => {\n    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [tooltipAnchor, setTooltipAnchor] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const tooltipActuallyVisible = !tooltipDisabled && Boolean(title) && tooltipVisible;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipActuallyVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));\n};\n\nconst RecordEndConfirmation = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse } = useToggleCallRecording();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", { className: \"str-video__end-recording__heading\", children: t('End recording') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__end-recording__description\", children: t('Are you sure you want end the recording?') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__actions\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"secondary\", onClick: close, children: t('Cancel') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"primary\", onClick: toggleCallRecording, children: isAwaitingResponse ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {}) : t('End recording') })] })] }));\n};\nconst ToggleEndRecordingMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleEndRecordingMenuButton(props, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: true, variant: \"secondary\", \"data-testid\": \"recording-stop-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" }) }));\n});\nconst RecordCallConfirmationButton = ({ caption, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    if (isCallRecordingInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: MenuVisualType.PORTAL, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordEndConfirmation, {}) }) }));\n    }\n    const title = isAwaitingResponse\n        ? t('Waiting for recording to start...')\n        : caption ?? t('Record call');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: title, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": \"recording-start-button\", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" })) }) }) }));\n};\nconst RecordCallButton = ({ caption }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    let title = caption ?? t('Record call');\n    if (isAwaitingResponse) {\n        title = isCallRecordingInProgress\n            ? t('Waiting for recording to stop...')\n            : t('Waiting for recording to start...');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": isCallRecordingInProgress\n                ? 'recording-stop-button'\n                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));\n};\n\nconst defaultEmojiReactionMap = {\n    ':like:': '👍',\n    ':raise-hand:': '✋',\n    ':fireworks:': '🎉',\n    ':dislike:': '👎',\n    ':heart:': '❤️',\n    ':smile:': '😀',\n};\nconst Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !reaction)\n            return;\n        const timeoutId = setTimeout(() => {\n            call.resetReaction(sessionId);\n        }, hideAfterTimeoutInMs);\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);\n    if (!reaction)\n        return null;\n    const { emoji_code: emojiCode } = reaction;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__reaction\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__reaction__emoji\", children: emojiCode && emojiReactionMap[emojiCode] }) }));\n};\n\nconst defaultReactions = [\n    {\n        type: 'reaction',\n        emoji_code: ':like:',\n    },\n    {\n        // TODO OL: use `prompt` type?\n        type: 'raised-hand',\n        emoji_code: ':raise-hand:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':fireworks:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':dislike:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':heart:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':smile:',\n    },\n];\nconst ReactionsButton = ({ reactions = defaultReactions, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top\", ToggleButton: ToggleReactionsMenuButton, visualType: MenuVisualType.MENU, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultReactionsMenu, { reactions: reactions }) }) }));\n};\nconst ToggleReactionsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleReactionsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Reactions'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, variant: \"primary\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"reactions\" }) }) }));\n});\nconst DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__reactions-menu', {\n            'str-video__reactions-menu--horizontal': layout === 'horizontal',\n            'str-video__reactions-menu--vertical': layout === 'vertical',\n        }), children: reactions.map((reaction) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__reactions-menu__button\", onClick: () => {\n                call?.sendReaction(reaction);\n                close?.();\n            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));\n};\n\n/**\n * Wraps an event handler, silencing and logging exceptions (excluding the NotAllowedError\n * DOMException, which is a normal situation handled by the SDK)\n *\n * @param props component props, including the onError callback\n * @param handler event handler to wrap\n */\nconst createCallControlHandler = (props, handler) => {\n    const logger = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['react-sdk']);\n    return async () => {\n        try {\n            await handler();\n        }\n        catch (error) {\n            if (props.onError) {\n                props.onError(error);\n                return;\n            }\n            if (!isNotAllowedError(error)) {\n                logger('error', 'Call control handler failed', error);\n            }\n        }\n    };\n};\nfunction isNotAllowedError(error) {\n    return error instanceof DOMException && error.name === 'NotAllowedError';\n}\n\nconst ScreenShareButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption } = props;\n    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isSomeoneScreenSharing = useHasOngoingScreenShare();\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE);\n    const callSettings = useCallSettings();\n    const isScreenSharingAllowed = callSettings?.screensharing.enabled;\n    const { screenShare, optimisticIsMute } = useScreenShareState();\n    const amIScreenSharing = !optimisticIsMute;\n    const disableScreenShareButton = !amIScreenSharing &&\n        (isSomeoneScreenSharing || isScreenSharingAllowed === false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await screenShare.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption ?? t('Share screen'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isSomeoneScreenSharing || amIScreenSharing, caption: caption, variant: \"primary\", \"data-testid\": isSomeoneScreenSharing\n                        ? 'screen-share-stop-button'\n                        : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: handleClick, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }) }));\n};\n\nconst SelectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nconst Select = (props) => {\n    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedIndex);\n    const [selectedLabel, setSelectedLabel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedLabel);\n    const { refs, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        placement: 'bottom-start',\n        open: isOpen,\n        onOpenChange: setIsOpen,\n        whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_9__.autoUpdate,\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.flip)()],\n    });\n    const elementsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const labelsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        setSelectedIndex(index);\n        handleSelectProp(index || 0);\n        setIsOpen(false);\n        if (index !== null) {\n            setSelectedLabel(labelsRef.current[index]);\n        }\n    }, [handleSelectProp]);\n    const handleTypeaheadMatch = (index) => {\n        if (isOpen) {\n            setActiveIndex(index);\n        }\n        else {\n            handleSelect(index);\n        }\n    };\n    const listNav = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useListNavigation)(context, {\n        listRef: elementsRef,\n        activeIndex,\n        selectedIndex,\n        onNavigate: setActiveIndex,\n    });\n    const typeahead = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useTypeahead)(context, {\n        listRef: labelsRef,\n        activeIndex,\n        selectedIndex,\n        onMatch: handleTypeaheadMatch,\n    });\n    const click = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useClick)(context);\n    const dismiss = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useDismiss)(context);\n    const role = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useRole)(context, { role: 'listbox' });\n    const { getReferenceProps, getFloatingProps, getItemProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useInteractions)([listNav, typeahead, click, dismiss, role]);\n    const selectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        activeIndex,\n        selectedIndex,\n        getItemProps,\n        handleSelect,\n    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown-selected\", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: \"str-video__dropdown-selected__label\", children: [icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__icon\", icon: icon })), selectedLabel] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__chevron\", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SelectContext.Provider, { value: selectContext, children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingFocusManager, { context: context, modal: false, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__dropdown-list\", ref: refs.setFloating, ...getFloatingProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));\n};\nconst DropDownSelectOption = (props) => {\n    const { selected, label, icon } = props;\n    const { getItemProps, handleSelect } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectContext);\n    const { ref, index } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useListItem)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__dropdown-option', {\n            'str-video__dropdown-option--selected': selected,\n        }), ref: ref, ...getItemProps({\n            onClick: () => handleSelect(index),\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-icon\", icon: icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__dropdown-label\", children: label })] }));\n};\nconst DropDownSelect = (props) => {\n    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));\n};\n\nconst DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__option', {\n            'str-video__device-settings__option--selected': selected,\n            'str-video__device-settings__option--disabled': disabled,\n        }), htmlFor: id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { type: \"radio\", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));\n};\nconst DeviceSelectorList = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, type, onChange, } = props;\n    const { close } = useMenuContext();\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [title && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title })), !devices.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--default`, label: \"Default\", name: type, defaultChecked: true, value: \"default\" })) : (devices.map((device) => {\n                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {\n                        onChange?.(e.target.value);\n                        close?.();\n                    }, name: type, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n            }))] }));\n};\nconst DeviceSelectorDropdown = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, onChange, icon, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    const selectedIndex = devices.findIndex((d) => d.deviceId === selectedDeviceId);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        onChange?.(devices[index].deviceId);\n    }, [devices, onChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: devices[selectedIndex]?.label, handleSelect: handleSelect, children: devices.map((device) => {\n                    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelectOption, { icon: icon, label: device.label, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n                }) })] }));\n};\nconst DeviceSelector = (props) => {\n    const { visualType = 'list', icon, placeholder, ...rest } = props;\n    if (visualType === 'list') {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorList, { ...rest });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorDropdown, { ...rest, icon: icon, placeholder: placeholder }));\n};\n\nconst DeviceSelectorAudioInput = ({ title, visualType, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, selectedDevice, devices } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: \"audioinput\", onChange: async (deviceId) => {\n            await microphone.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"mic\" }));\n};\nconst DeviceSelectorAudioOutput = ({ title, visualType, }) => {\n    const { useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();\n    if (!isDeviceSelectionSupported)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices, type: \"audiooutput\", selectedDeviceId: selectedDevice, onChange: (deviceId) => {\n            speaker.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"speaker\" }));\n};\n\nconst DeviceSelectorVideo = ({ title, visualType, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, devices, selectedDevice } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], type: \"videoinput\", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {\n            await camera.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"camera\" }));\n};\n\nconst DeviceSettings = ({ visualType = MenuVisualType.MENU, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) }));\n};\nconst Menu = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { title: t('Select a Camera') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { title: t('Select a Mic') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));\n};\nconst ToggleDeviceSettingsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__button', {\n            'str-video__device-settings__button--active': menuShown,\n        }), title: t('Toggle device menu'), icon: \"device-settings\", ref: ref }));\n});\n\nconst ToggleAudioPreviewButton = (props) => {\n    const { caption, onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => microphone.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser audio permissions')\n            : caption ?? t('Mic'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", disabled: !hasBrowserPermission, \"data-testid\": optimisticIsMute\n                ? 'preview-audio-unmute-button'\n                : 'preview-audio-mute-button', onClick: handleClick, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser audio permissions'), children: \"!\" }))] }) }));\n};\nconst ToggleAudioPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO);\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await microphone.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your audio')\n                    : !hasBrowserPermission\n                        ? t('Check your browser mic permissions')\n                        : caption ?? t('Mic'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission || !hasPermission, \"data-testid\": optimisticIsMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }) }));\n};\n\nconst ToggleVideoPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission } = useCameraState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => camera.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser video permissions')\n            : caption ?? t('Video'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", \"data-testid\": optimisticIsMute\n                ? 'preview-video-unmute-button'\n                : 'preview-video-mute-button', onClick: handleClick, disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser video permissions'), children: \"!\" }))] }) }));\n};\nconst ToggleVideoPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO);\n    const { useCameraState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission } = useCameraState();\n    const callSettings = useCallSettings();\n    const isPublishingVideoAllowed = callSettings?.video.enabled;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await camera.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your video')\n                    : !hasBrowserPermission\n                        ? t('Check your browser video permissions')\n                        : !isPublishingVideoAllowed\n                            ? t('Video publishing is disabled by the system')\n                            : caption || t('Video'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission ||\n                        !hasPermission ||\n                        !isPublishingVideoAllowed, \"data-testid\": optimisticIsMute ? 'video-unmute-button' : 'video-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||\n                            !hasPermission ||\n                            !isPublishingVideoAllowed) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }) }));\n};\n\nconst EndCallMenu = (props) => {\n    const { onLeave, onEnd } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-call__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__leave\", type: \"button\", \"data-testid\": \"leave-call-button\", onClick: onLeave, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__leave-icon\", icon: \"logout\" }), t('Leave call')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.END_CALL], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__end\", type: \"button\", \"data-testid\": \"end-call-for-all-button\", onClick: onEnd, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__end-icon\", icon: \"call-end\" }), t('End call for all')] }) })] }));\n};\nconst CancelCallToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CancelCallToggleMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Leave call'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: menuShown ? 'close' : 'call-end', variant: menuShown ? 'active' : 'danger', \"data-testid\": \"leave-call-button\", ref: ref }) }));\n});\nconst CancelCallConfirmButton = ({ onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    const handleEndCall = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.endCall();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-start\", ToggleButton: CancelCallToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));\n};\nconst CancelCallButton = ({ disabled, caption, onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-end\", variant: \"danger\", title: caption ?? t('Leave call'), \"data-testid\": \"cancel-call-button\", onClick: handleClick }));\n};\n\nconst CallControls = ({ onLeave }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-controls\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeakingWhileMutedNotification, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleAudioPublishingButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleVideoPublishingButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ReactionsButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScreenShareButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordCallButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onLeave: onLeave })] }));\n\nconst CallStatsLatencyChart = (0,react__WEBPACK_IMPORTED_MODULE_3__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@stream-io\"), __webpack_require__.e(\"vendor-chunks/chart.js\"), __webpack_require__.e(\"vendor-chunks/react-chartjs-2\"), __webpack_require__.e(\"vendor-chunks/@kurkle\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./latency-chart-Bj5OSYzg.es.js */ \"(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js\")));\nvar Status;\n(function (Status) {\n    Status[\"GOOD\"] = \"Good\";\n    Status[\"OK\"] = \"Ok\";\n    Status[\"BAD\"] = \"Bad\";\n})(Status || (Status = {}));\nconst CallStats = (props) => {\n    const { latencyLowBound = 75, latencyHighBound = 400, showCodecInfo = false, LatencyChartSuspenseFallback = null, } = props;\n    const [latencyBuffer, setLatencyBuffer] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        const now = Date.now();\n        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));\n    });\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [publishBitrate, setPublishBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const [subscribeBitrate, setSubscribeBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const previousStats = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const { useCallStatsReport } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callStatsReport = useCallStatsReport();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!callStatsReport)\n            return;\n        if (!previousStats.current) {\n            previousStats.current = callStatsReport;\n            return;\n        }\n        const previousCallStatsReport = previousStats.current;\n        setPublishBitrate(() => {\n            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setSubscribeBitrate(() => {\n            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setLatencyBuffer((latencyBuf) => {\n            const newLatencyBuffer = latencyBuf.slice(-19);\n            newLatencyBuffer.push({\n                x: callStatsReport.timestamp,\n                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,\n            });\n            return newLatencyBuffer;\n        });\n        previousStats.current = callStatsReport;\n    }, [callStatsReport]);\n    const latencyComparison = {\n        lowBound: latencyLowBound,\n        highBound: latencyHighBound,\n        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats\", children: callStatsReport && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"call-latency\" }), t('Call Latency')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__latencychart\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Suspense, { fallback: LatencyChartSuspenseFallback, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStatsLatencyChart, { values: latencyBuffer }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"network-quality\" }), t('Call performance')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Review the key data points below to assess call performance') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-container\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Region'), value: callStatsReport.datacenter }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Latency'), value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive jitter'), value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.subscriberStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish jitter'), value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.publisherStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: `${t('Publish resolution')}${showCodecInfo ? formatCodec(callStatsReport) : ''}`, value: toFrameSize(callStatsReport.publisherStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish quality drop reason'), value: callStatsReport.publisherStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving resolution'), value: toFrameSize(callStatsReport.subscriberStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive quality drop reason'), value: callStatsReport.subscriberStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish bitrate'), value: publishBitrate }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving bitrate'), value: subscribeBitrate })] })] })) }));\n};\nconst StatCardExplanation = (props) => {\n    const { description } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { refs, floatingStyles, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useFloating)({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const hover = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useHover)(context);\n    const { getReferenceProps, getFloatingProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.useInteractions)([hover]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation\", ref: refs.setReference, ...getReferenceProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-explanation__icon\", icon: \"info\" }) }), isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation__description\", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));\n};\nconst StatsTag = (props) => {\n    const { children, status } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-stats__tag', {\n            'str-video__call-stats__tag--good': status === Status.GOOD,\n            'str-video__call-stats__tag--ok': status === Status.OK,\n            'str-video__call-stats__tag--bad': status === Status.BAD,\n        }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__tag__text\", children: children }) }));\n};\nconst StatCard = (props) => {\n    const { label, value, description, comparison } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const status = comparison ? toStatus(comparison) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-content\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-label\", children: [label, description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCardExplanation, { description: description })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__card-value\", children: value })] }), status && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatsTag, { status: status, children: t(status) })] }));\n};\nconst toStatus = (config) => {\n    const { value, lowBound, highBound } = config;\n    if (value <= lowBound)\n        return Status.GOOD;\n    if (value >= lowBound && value <= highBound)\n        return Status.OK;\n    if (value >= highBound)\n        return Status.BAD;\n    return Status.GOOD;\n};\nconst toFrameSize = (stats) => {\n    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;\n    let size = `-`;\n    if (w && h) {\n        size = `${w}x${h}`;\n        if (fps) {\n            size += `@${fps}fps.`;\n        }\n    }\n    return size;\n};\nconst formatCodec = (callStatsReport) => {\n    const { codec } = callStatsReport.publisherStats;\n    if (!codec)\n        return '';\n    const [, name] = codec.split('/');\n    return name ? ` (${name})` : '';\n};\nconst calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;\n    const bytesSent = totalBytesSent - previousTotalBytesSent;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;\n};\nconst calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;\n    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;\n};\n\nconst CallStatsButton = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-end\", ToggleButton: ToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStats, {}) }));\nconst ToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, menuShown } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), \"data-testid\": \"stats-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"stats\" }) }));\n});\n\nconst ToggleAudioOutputButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', onMenuToggle, } = props;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption || t('Speakers'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, \"data-testid\": \"audio-output-button\", onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"speaker\" }) }) }));\n};\n\nconst BlockedUserListing = ({ data }) => {\n    if (!data.length)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((userId) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUserListingItem, { userId: userId }, userId))) }) }));\n};\nconst BlockedUserListingItem = ({ userId }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const unblockUserClickHandler = () => {\n        if (userId)\n            call?.unblockUser(userId);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing-item__display-name\", children: userId }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: unblockUserClickHandler, children: \"Unblock\" }) })] }));\n};\n\nconst CallParticipantListHeader = ({ onClose, }) => {\n    const { useParticipants, useAnonymousParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const anonymousParticipantCount = useAnonymousParticipantCount();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header__title\", children: [t('Participants'), ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-list-header__title-count\", children: [\"[\", participants.length, \"]\"] }), anonymousParticipantCount > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-list-header__title-anonymous\", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: onClose, className: \"str-video__participant-list-header__close-button\", icon: \"close\" })] }));\n};\n\nconst CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {\n    const isAudioOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const isVideoOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const isPinnedOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned)(participant);\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: participant.name, imageSrc: participant.image }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisplayName, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item__media-indicator-group\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinnedOn && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: t('Pinned'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$2, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu, {}) }) })] })] }));\n};\nconst MediaIndicator = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { ...props }));\nconst DefaultDisplayName = ({ participant }) => {\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';\n    const nameOrId = participant.name || participant.userId || t('Unknown');\n    let displayName;\n    if (!participant.name) {\n        displayName = meFlag || nameOrId || t('Unknown');\n    }\n    else if (meFlag) {\n        displayName = `${nameOrId} (${meFlag})`;\n    }\n    else {\n        displayName = nameOrId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { className: \"str-video__participant-listing-item__display-name\", title: displayName, children: displayName }));\n};\nconst ToggleButton$2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\n\nconst CallParticipantListing = ({ data, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));\n\nconst EmptyParticipantSearchList = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list--empty\", children: t('No participants found') }));\n};\n\nconst SearchInput = ({ exitSearch, isActive, ...rest }) => {\n    const [inputElement, setInputElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!inputElement)\n            return;\n        const handleKeyDown = (e) => {\n            if (e.key.toLowerCase() === 'escape')\n                exitSearch();\n        };\n        inputElement.addEventListener('keydown', handleKeyDown);\n        return () => {\n            inputElement.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [exitSearch, inputElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__search-input__container', {\n            'str-video__search-input__container--active': isActive,\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { placeholder: \"Search\", ...rest, ref: setInputElement }), isActive ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: \"str-video__search-input__clear-btn\", onClick: exitSearch, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon--active\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon\" }))] }));\n};\n\nconst SearchResults = ({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) => {\n    if (searchQueryInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__search-results--loading\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator$1, {}) }));\n    }\n    if (!searchResults.length) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptySearchResultComponent, {});\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResultList, { data: searchResults });\n};\n\nconst useSearch = ({ debounceInterval, searchFn, searchQuery = '', }) => {\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [searchQueryInProgress, setSearchQueryInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!searchQuery.length) {\n            setSearchQueryInProgress(false);\n            setSearchResults([]);\n            return;\n        }\n        setSearchQueryInProgress(true);\n        const timeout = setTimeout(async () => {\n            try {\n                const results = await searchFn(searchQuery);\n                setSearchResults(results);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            finally {\n                setSearchQueryInProgress(false);\n            }\n        }, debounceInterval);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [debounceInterval, searchFn, searchQuery]);\n    return {\n        searchQueryInProgress,\n        searchResults,\n    };\n};\n\nconst UserListTypes = {\n    active: 'Active users',\n    blocked: 'Blocked users',\n};\nconst DEFAULT_DEBOUNCE_SEARCH_INTERVAL = 200;\nconst CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');\n    const [userListType, setUserListType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('active');\n    const exitSearch = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setSearchQuery(''), []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListHeader, { onClose: onClose }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content\", children: [userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));\n};\nconst CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const muteAll = () => {\n        call?.muteAllUsers('audio');\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list__content-header-title\", children: userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: muteAll, children: \"Mute all\" }) })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { \"aria-selected\": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));\n};\nconst ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, }) => {\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants({ sortBy: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name });\n    const activeUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(participants.filter((participant) => {\n            return participant.name.match(queryRegExp);\n        }));\n    }, [participants]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));\n};\nconst BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, searchQuery, }) => {\n    const { useCallBlockedUserIds } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const blockedUsers = useCallBlockedUserIds();\n    const blockedUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(blockedUsers.filter((blockedUser) => {\n            return blockedUser.match(queryRegExp);\n        }));\n    }, [blockedUsers]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));\n};\nconst ToggleButton$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"filter\", ref: ref });\n});\n\nconst CallPreview = (props) => {\n    const { className, style } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallThumbnail } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const thumbnail = useCallThumbnail();\n    const [imageRef, setImageRef] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!imageRef || !call)\n            return;\n        const cleanup = call.bindCallThumbnailElement(imageRef);\n        return () => cleanup();\n    }, [imageRef, call]);\n    if (!thumbnail)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-preview', className), style: style, alt: \"Call Preview Thumbnail\", ref: setImageRef }));\n};\n\nconst CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__title\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { children: t('Call Recordings') }), callRecordings.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { children: [\"(\", callRecordings.length, \")\"] }) : null] }), onRefresh && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"refresh\", title: t('Refresh'), onClick: onRefresh }))] }));\n};\n\nconst dateFormat = (date) => {\n    const format = new Date(date);\n    return format.toTimeString().split(' ')[0];\n};\nconst CallRecordingListItem = ({ recording, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__filename\", children: recording.filename }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.start_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.end_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__download\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"a\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: \"button\", href: recording.url, download: recording.filename, title: \"Download the recording\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"download\" }) }) })] }));\n};\n\nconst EmptyCallRecordingListing = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__listing str-video__call-recording-list__listing--empty\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing--icon-empty\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-recording-list__listing--text-empty\", children: \"No recordings available\" })] }));\n};\n\nconst LoadingCallRecordingListing = ({ callRecordings, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem, { recording: recording }, recording.filename))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { text: \"Recording getting ready\" })] }));\n};\n\nconst CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing\", children: loading ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__filename\", children: \"Name\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"Start time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"End time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__download\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptyCallRecordingList, {})) })] }));\n};\n\nconst NoiseCancellationContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Exposes the NoiseCancellation API.\n * Throws an error if used outside <NoiseCancellationProvider />.\n */\nconst useNoiseCancellation = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(NoiseCancellationContext);\n    if (!context) {\n        throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');\n    }\n    return context;\n};\nconst NoiseCancellationProvider = (props) => {\n    const { children, noiseCancellation } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallSettings, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    const noiseCancellationAllowed = !!(settings &&\n        settings.audio.noise_cancellation &&\n        settings.audio.noise_cancellation.mode !==\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum.DISABLED);\n    const hasCapability = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.ENABLE_NOISE_CANCELLATION);\n    const [isSupportedByBrowser, setIsSupportedByBrowser] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const result = noiseCancellation.isSupported();\n        if (typeof result === 'boolean') {\n            setIsSupportedByBrowser(result);\n        }\n        else {\n            result\n                .then((_isSupportedByBrowser) => setIsSupportedByBrowser(_isSupportedByBrowser))\n                .catch((err) => console.error(`Can't determine if noise cancellation is supported`, err));\n        }\n    }, [noiseCancellation]);\n    const isSupported = isSupportedByBrowser && hasCapability && noiseCancellationAllowed;\n    const [isEnabled, setIsEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const deinit = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !isSupported)\n            return;\n        const unsubscribe = noiseCancellation.on('change', (v) => setIsEnabled(v));\n        const init = (deinit.current || Promise.resolve())\n            .then(() => noiseCancellation.init())\n            .then(() => call.microphone.enableNoiseCancellation(noiseCancellation))\n            .catch((err) => console.error(`Can't initialize noise suppression`, err));\n        return () => {\n            deinit.current = init\n                .then(() => call.microphone.disableNoiseCancellation())\n                .then(() => noiseCancellation.dispose())\n                .then(() => unsubscribe());\n        };\n    }, [call, isSupported, noiseCancellation]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoiseCancellationContext.Provider, { value: {\n            isSupported,\n            isEnabled,\n            setEnabled: (enabledOrSetter) => {\n                if (!noiseCancellation)\n                    return;\n                const enable = typeof enabledOrSetter === 'function'\n                    ? enabledOrSetter(isEnabled)\n                    : enabledOrSetter;\n                if (enable) {\n                    noiseCancellation.enable();\n                }\n                else {\n                    noiseCancellation.disable();\n                }\n            },\n        }, children: children }));\n};\n\nconst RingingCallControls = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallCallingState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callCallingState = useCallCallingState();\n    if (!call)\n        return null;\n    const buttonsDisabled = callCallingState !== _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__pending-call-controls\", children: call.isCreatedByMe ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { disabled: buttonsDisabled })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AcceptCallButton, { disabled: buttonsDisabled }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onClick: () => call.leave({ reject: true }), disabled: buttonsDisabled })] })) }));\n};\n\nconst CALLING_STATE_TO_LABEL = {\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING]: 'Joining',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING]: 'Ringing',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.MIGRATING]: 'Migrating',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING]: 'Re-connecting',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING_FAILED]: 'Failed',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.OFFLINE]: 'No internet connection',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.UNKNOWN]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINED]: 'Joined',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT]: 'Left call',\n};\nconst RingingCall = (props) => {\n    const { includeSelf = false, totalMembersToShow = 3 } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCallCallingState, useCallMembers } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callingState = useCallCallingState();\n    const members = useCallMembers();\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    if (!call)\n        return null;\n    // take the first N members to show their avatars\n    const membersToShow = (members || [])\n        .slice(0, totalMembersToShow)\n        .map(({ user }) => user)\n        .filter((user) => user.id !== connectedUser?.id || includeSelf);\n    if (includeSelf &&\n        !membersToShow.find((user) => user.id === connectedUser?.id)) {\n        // if the current user is not in the initial batch of members,\n        // replace the first item in membersToShow array with the current user\n        const self = members.find(({ user }) => user.id === connectedUser?.id);\n        if (self) {\n            membersToShow.splice(0, 1, self.user);\n        }\n    }\n    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel str-video__call-panel--ringing\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__members-list\", children: membersToShow.map((user) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel__member-box\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: user.name, imageSrc: user.image }), user.name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__member_details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__member_name\", children: user.name }) }))] }, user.id))) }), callingStateLabel && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__calling-state-label\", children: t(callingStateLabel) })), [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING, _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING].includes(callingState) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RingingCallControls, {}))] }));\n};\n\nconst byNameOrId = (a, b) => {\n    if (a.name && b.name && a.name < b.name)\n        return -1;\n    if (a.name && b.name && a.name > b.name)\n        return 1;\n    if (a.id < b.id)\n        return -1;\n    if (a.id > b.id)\n        return 1;\n    return 0;\n};\nconst PermissionRequests = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useLocalParticipant, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const localParticipant = useLocalParticipant();\n    const [expanded, setExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [permissionRequests, setPermissionRequests] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const canUpdateCallPermissions = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS);\n    const localUserId = localParticipant?.userId;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !canUpdateCallPermissions)\n            return;\n        return call.on('call.permission_request', (event) => {\n            if (event.user.id !== localUserId) {\n                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));\n            }\n        });\n    }, [call, canUpdateCallPermissions, localUserId]);\n    const handleUpdatePermission = (request, type) => {\n        return async () => {\n            const { user, permissions } = request;\n            switch (type) {\n                case 'grant':\n                    await call?.grantPermissions(user.id, permissions);\n                    break;\n                case 'revoke':\n                    await call?.revokePermissions(user.id, permissions);\n                    break;\n            }\n            setPermissionRequests((requests) => requests.filter((r) => r !== request));\n        };\n    };\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: 'bottom',\n        strategy: 'absolute',\n    });\n    // don't render anything if there are no permission requests\n    if (permissionRequests.length === 0)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests\", ref: refs.setReference, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests__notification\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__permission-requests__notification__message\", children: [permissionRequests.length, \" pending permission requests\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { type: \"button\", onClick: () => {\n                            setExpanded((e) => !e);\n                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionRequestList, { ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));\n};\nconst PermissionRequestList = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function PermissionRequestList(props, ref) {\n    const { permissionRequests, handleUpdatePermission, ...rest } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-requests-list\", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {\n            const { user, permissions } = request;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: permissions.map((permission) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-request\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-request__message\", children: messageForPermission(user.name || user.id, permission, t) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--allow\", type: \"button\", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));\n        }) }));\n});\nconst Button = (props) => {\n    const { className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__permission-request__button', className), ...rest }));\n};\nconst messageForPermission = (userName, permission, t) => {\n    switch (permission) {\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO:\n            return t('{{ userName }} is requesting to speak', { userName });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO:\n            return t('{{ userName }} is requesting to share their camera', {\n                userName,\n            });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE:\n            return t('{{ userName }} is requesting to present their screen', {\n                userName,\n            });\n        default:\n            return t('{{ userName }} is requesting permission: {{ permission }}', {\n                userName,\n                permission,\n            });\n    }\n};\n\nconst StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, { ...props, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video', className), children: children }));\n};\n\nconst DefaultVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder({ participant, style }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const name = participant.name || participant.userId;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__video-placeholder\", style: style, ref: ref, children: [(!participant.image || error) &&\n                (name ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(InitialsFallback, { name: name })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__no-video-label\", children: t('Video is disabled') }))), participant.image && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"video-placeholder\", className: \"str-video__video-placeholder__avatar\", src: participant.image }))] }));\n});\nconst InitialsFallback = (props) => {\n    const { name } = props;\n    const initials = name\n        .split(' ')\n        .slice(0, 2)\n        .map((n) => n[0])\n        .join('');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__initials-fallback\", children: initials }));\n};\n\nconst Video$1 = ({ trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, refs, ...rest }) => {\n    const { sessionId, videoStream, screenShareStream, viewportVisibilityState, isLocalParticipant, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // start with true, will flip once the video starts playing\n    const [isVideoPaused, setIsVideoPaused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isWideMode, setIsWideMode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const stream = trackType === 'videoTrack'\n        ? videoStream\n        : trackType === 'screenShareTrack'\n            ? screenShareStream\n            : undefined;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        if (!call || !videoElement || trackType === 'none')\n            return;\n        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, trackType, sessionId, videoElement]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!stream || !videoElement)\n            return;\n        const [track] = stream.getVideoTracks();\n        if (!track)\n            return;\n        const handlePlayPause = () => {\n            setIsVideoPaused(videoElement.paused);\n            const { width = 0, height = 0 } = track.getSettings();\n            setIsWideMode(width >= height);\n        };\n        // playback may have started before we had a chance to\n        // attach the 'play/pause' event listener, so we set the state\n        // here to make sure it's in sync\n        setIsVideoPaused(videoElement.paused);\n        videoElement.addEventListener('play', handlePlayPause);\n        videoElement.addEventListener('pause', handlePlayPause);\n        track.addEventListener('unmute', handlePlayPause);\n        return () => {\n            videoElement.removeEventListener('play', handlePlayPause);\n            videoElement.removeEventListener('pause', handlePlayPause);\n            track.removeEventListener('unmute', handlePlayPause);\n            // reset the 'pause' state once we unmount the video element\n            setIsVideoPaused(true);\n        };\n    }, [stream, videoElement]);\n    if (!call)\n        return null;\n    const isPublishingTrack = trackType === 'videoTrack'\n        ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant)\n        : trackType === 'screenShareTrack'\n            ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant)\n            : false;\n    const isInvisible = trackType === 'none' ||\n        viewportVisibilityState?.[trackType] === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState.INVISIBLE;\n    const hasNoVideoOrInvisible = !isPublishingTrack || isInvisible;\n    const mirrorVideo = isLocalParticipant && trackType === 'videoTrack';\n    const isScreenShareTrack = trackType === 'screenShareTrack';\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [!hasNoVideoOrInvisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { ...rest, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video', className, {\n                    'str-video__video--not-playing': isVideoPaused,\n                    'str-video__video--tall': !isWideMode,\n                    'str-video__video--mirror': mirrorVideo,\n                    'str-video__video--screen-share': isScreenShareTrack,\n                }), \"data-user-id\": userId, \"data-session-id\": sessionId, ref: (element) => {\n                    setVideoElement(element);\n                    refs?.setVideoElement?.(element);\n                } })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));\n};\nVideo$1.displayName = 'Video';\n\n/**\n * @description Extends video element with `stream` property\n * (`srcObject`) to reactively handle stream changes\n */\nconst BaseVideo = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function BaseVideo({ stream, ...rest }, ref) {\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement || !stream)\n            return;\n        if (stream === videoElement.srcObject)\n            return;\n        videoElement.srcObject = stream;\n        if (_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isSafari() || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isFirefox()) {\n            // Firefox and Safari have some timing issue\n            setTimeout(() => {\n                videoElement.srcObject = stream;\n                videoElement.play().catch((e) => {\n                    console.error(`Failed to play stream`, e);\n                });\n            }, 0);\n        }\n        return () => {\n            videoElement.pause();\n            videoElement.srcObject = null;\n        };\n    }, [stream, videoElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {\n            applyElementToRef(ref, element);\n            setVideoElement(element);\n        } }));\n});\n\nconst DefaultDisabledVideoPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__disabled-video-preview\", children: t('Video is disabled') }));\n};\nconst DefaultNoCameraPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__no-camera-preview\", children: t('No camera found') }));\n};\nconst VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { devices, status, isMute, mediaStream } = useCameraState();\n    let contents;\n    if (isMute && devices?.length === 0) {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoCameraPreview, {});\n    }\n    else if (status === 'enabled') {\n        const loading = !mediaStream;\n        contents = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [mediaStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideo, { stream: mediaStream, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview', {\n                        'str-video__video-preview--mirror': mirror,\n                        'str-video__video-preview--loading': loading,\n                    }) })), loading && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StartingCameraPreview, {})] }));\n    }\n    else {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisabledVideoPreview, {});\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview-container', className), children: contents }));\n};\n\nconst ParticipantActionsContextMenu = () => {\n    const { participant, participantViewElement, videoElement } = useParticipantViewContext();\n    const [fullscreenModeOn, setFullscreenModeOn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!!document.fullscreenElement);\n    const [pictureInPictureElement, setPictureInPictureElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(document.pictureInPictureElement);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { pin, sessionId, userId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const blockUser = () => call?.blockUser(userId);\n    const muteAudio = () => call?.muteUser(userId, 'audio');\n    const muteVideo = () => call?.muteUser(userId, 'video');\n    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');\n    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');\n    const grantPermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            grant_permissions: [permission],\n        });\n    };\n    const revokePermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            revoke_permissions: [permission],\n        });\n    };\n    const toggleParticipantPin = () => {\n        if (pin) {\n            call?.unpin(sessionId);\n        }\n        else {\n            call?.pin(sessionId);\n        }\n    };\n    const pinForEveryone = () => {\n        call\n            ?.pinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to pin participant ${userId}`, err);\n        });\n    };\n    const unpinForEveryone = () => {\n        call\n            ?.unpinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to unpin participant ${userId}`, err);\n        });\n    };\n    const toggleFullscreenMode = () => {\n        if (!fullscreenModeOn) {\n            return participantViewElement?.requestFullscreen().catch(console.error);\n        }\n        return document.exitFullscreen().catch(console.error);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // handles the case when fullscreen mode is toggled externally,\n        // e.g., by pressing ESC key or some other keyboard shortcut\n        const handleFullscreenChange = () => {\n            setFullscreenModeOn(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement)\n            return;\n        const handlePiP = () => {\n            setPictureInPictureElement(document.pictureInPictureElement);\n        };\n        videoElement.addEventListener('enterpictureinpicture', handlePiP);\n        videoElement.addEventListener('leavepictureinpicture', handlePiP);\n        return () => {\n            videoElement.removeEventListener('enterpictureinpicture', handlePiP);\n            videoElement.removeEventListener('leavepictureinpicture', handlePiP);\n        };\n    }, [videoElement]);\n    const togglePictureInPicture = () => {\n        if (videoElement && pictureInPictureElement !== videoElement) {\n            return videoElement\n                .requestPictureInPicture()\n                .catch(console.error);\n        }\n        return document.exitPictureInPicture().catch(console.error);\n    };\n    const { close } = useMenuContext() || {};\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenu, { onItemClick: close, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), pin ? t('Unpin') : t('Pin')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.PIN_FOR_EVERYONE], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Pin for everyone')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Unpin for everyone')] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: blockUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"not-allowed\" }), t('Block')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], children: [hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteVideo, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"camera-off-outline\" }), t('Turn off video')] })), hasScreenShareTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShare, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), t('Turn off screen share')] })), hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute audio')] })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute screen share audio')] }))] }), participantViewElement && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {\n                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),\n                }) })), videoElement && document.pictureInPictureEnabled && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {\n                    direction: pictureInPictureElement === videoElement\n                        ? t('Leave')\n                        : t('Enter'),\n                }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Allow video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Disable video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));\n};\n\nconst useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const manager = propsDynascaleManager ?? call?.dynascaleManager;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!trackedElement || !manager || !call || trackType === 'none')\n            return;\n        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);\n        return () => {\n            unobserve();\n        };\n    }, [trackedElement, manager, call, sessionId, trackType]);\n};\n\nconst ToggleButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\nconst DefaultScreenShareOverlay = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const stopScreenShare = () => {\n        call?.screenShare.disable();\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__screen-share-overlay\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__screen-share-overlay__title\", children: t('You are presenting your screen') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { onClick: stopScreenShare, className: \"str-video__screen-share-overlay__button\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"close\" }), \" \", t('Stop Screen Sharing')] })] }));\n};\nconst DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const isScreenSharing = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    if (participant.isLocalParticipant &&\n        isScreenSharing &&\n        trackType === 'screenShareTrack') {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultScreenShareOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [showMenuButton && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { strategy: \"fixed\", placement: menuPlacement, ToggleButton: ToggleButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu$1, {}) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Reaction, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n};\nconst ParticipantDetails = ({ indicatorsVisible = true, }) => {\n    const { participant } = useParticipantViewContext();\n    const { isLocalParticipant, connectionQuality, pin, sessionId, name, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const connectionQualityAsString = !!connectionQuality &&\n        _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const canUnpin = !!pin && pin.isLocalPin;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-details__name\", children: [name || userId, indicatorsVisible && !hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--audio-muted\" })), indicatorsVisible && !hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--video-muted\" })), indicatorsVisible && canUnpin && (\n                        // TODO: remove this monstrosity once we have a proper design\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: \"str-video__participant-details__name--pinned\" })), indicatorsVisible && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeechIndicator, {})] }) }), indicatorsVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isLocalParticipant &&\n                    connectionQuality === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));\n};\nconst SpeechIndicator = () => {\n    const { participant } = useParticipantViewContext();\n    const { isSpeaking, isDominantSpeaker } = participant;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" })] }));\n};\n\nconst ParticipantView = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ParticipantView({ participant, trackType = 'videoTrack', muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {\n    const { isLocalParticipant, isSpeaking, isDominantSpeaker, sessionId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const [trackedElement, setTrackedElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoElement, setContextVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // TODO: allow to pass custom ViewportTracker instance from props\n    useTrackElementVisibility({\n        sessionId,\n        trackedElement,\n        trackType,\n    });\n    const participantViewContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        participant,\n        participantViewElement: trackedElement,\n        videoElement: contextVideoElement,\n        videoPlaceholderElement: contextVideoPlaceholderElement,\n        trackType,\n    }), [\n        contextVideoElement,\n        contextVideoPlaceholderElement,\n        participant,\n        trackedElement,\n        trackType,\n    ]);\n    const videoRefs = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        setVideoElement: (element) => {\n            setVideoElement?.(element);\n            setContextVideoElement(element);\n        },\n        setVideoPlaceholderElement: (element) => {\n            setVideoPlaceholderElement?.(element);\n            setContextVideoPlaceholderElement(element);\n        },\n    }), [setVideoElement, setVideoPlaceholderElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { \"data-testid\": \"participant-view\", ref: (element) => {\n            applyElementToRef(ref, element);\n            setTrackedElement(element);\n        }, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideoTrack && 'str-video__participant-view--no-video', !hasAudioTrack && 'str-video__participant-view--no-audio', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"audioTrack\" })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"screenShareAudioTrack\" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Video$1, { VideoPlaceholder: VideoPlaceholder, participant: participant, trackType: trackType, refs: videoRefs, autoPlay: true }), isComponentType(ParticipantViewUI) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));\n});\nParticipantView.displayName = 'ParticipantView';\n\n// re-exporting the StreamCallProvider as StreamCall\nconst StreamCall = _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider;\nStreamCall.displayName = 'StreamCall';\n\nvar Joining = \"Joining\";\nvar Mic = \"Mic\";\nvar Ringing = \"Ringing\";\nvar Speakers = \"Speakers\";\nvar Video = \"Video\";\nvar Live = \"Live\";\nvar Reactions = \"Reactions\";\nvar Statistics = \"Statistics\";\nvar Invite = \"Invite\";\nvar Join = \"Join\";\nvar You = \"You\";\nvar Me = \"Me\";\nvar Unknown = \"Unknown\";\nvar Refresh = \"Refresh\";\nvar Allow = \"Allow\";\nvar Revoke = \"Revoke\";\nvar Dismiss = \"Dismiss\";\nvar Pinned = \"Pinned\";\nvar Unpin = \"Unpin\";\nvar Pin = \"Pin\";\nvar Block = \"Block\";\nvar Enter = \"Enter\";\nvar Leave = \"Leave\";\nvar Participants = \"Participants\";\nvar Anonymous = \", and ({{ count }}) anonymous\";\nvar en = {\n\tJoining: Joining,\n\tMic: Mic,\n\t\"No internet connection\": \"No internet connection\",\n\t\"Re-connecting\": \"Re-connecting\",\n\tRinging: Ringing,\n\t\"Screen Share\": \"Screen Share\",\n\t\"Select a Camera\": \"Select a Camera\",\n\t\"Select a Mic\": \"Select a Mic\",\n\t\"Select Speakers\": \"Select Speakers\",\n\tSpeakers: Speakers,\n\tVideo: Video,\n\t\"You are muted. Unmute to speak.\": \"You are muted. Unmute to speak.\",\n\tLive: Live,\n\t\"You can now speak.\": \"You can now speak.\",\n\t\"Awaiting for an approval to speak.\": \"Awaiting for an approval to speak.\",\n\t\"You can no longer speak.\": \"You can no longer speak.\",\n\t\"You can now share your video.\": \"You can now share your video.\",\n\t\"Awaiting for an approval to share your video.\": \"Awaiting for an approval to share your video.\",\n\t\"You can no longer share your video.\": \"You can no longer share your video.\",\n\t\"Waiting for recording to stop...\": \"Waiting for recording to stop...\",\n\t\"Waiting for recording to start...\": \"Waiting for recording to start...\",\n\t\"Record call\": \"Record call\",\n\tReactions: Reactions,\n\tStatistics: Statistics,\n\t\"You can now share your screen.\": \"You can now share your screen.\",\n\t\"Awaiting for an approval to share screen.\": \"Awaiting for an approval to share screen.\",\n\t\"You can no longer share your screen.\": \"You can no longer share your screen.\",\n\t\"Share screen\": \"Share screen\",\n\t\"Incoming Call...\": \"Incoming Call...\",\n\t\"Calling...\": \"Calling...\",\n\t\"Mute All\": \"Mute All\",\n\tInvite: Invite,\n\tJoin: Join,\n\tYou: You,\n\tMe: Me,\n\tUnknown: Unknown,\n\t\"Toggle device menu\": \"Toggle device menu\",\n\t\"Call Recordings\": \"Call Recordings\",\n\tRefresh: Refresh,\n\t\"Check your browser video permissions\": \"Check your browser video permissions\",\n\t\"Video publishing is disabled by the system\": \"Video publishing is disabled by the system\",\n\t\"You have no permission to share your video\": \"You have no permission to share your video\",\n\t\"You have no permission to share your audio\": \"You have no permission to share your audio\",\n\t\"You are presenting your screen\": \"You are presenting your screen\",\n\t\"Stop Screen Sharing\": \"Stop Screen Sharing\",\n\tAllow: Allow,\n\tRevoke: Revoke,\n\tDismiss: Dismiss,\n\t\"Microphone on\": \"Microphone on\",\n\t\"Microphone off\": \"Microphone off\",\n\t\"Camera on\": \"Camera on\",\n\t\"Camera off\": \"Camera off\",\n\t\"No camera found\": \"No camera found\",\n\t\"Video is disabled\": \"Video is disabled\",\n\tPinned: Pinned,\n\tUnpin: Unpin,\n\tPin: Pin,\n\t\"Pin for everyone\": \"Pin for everyone\",\n\t\"Unpin for everyone\": \"Unpin for everyone\",\n\tBlock: Block,\n\t\"Turn off video\": \"Turn off video\",\n\t\"Turn off screen share\": \"Turn off screen share\",\n\t\"Mute audio\": \"Mute audio\",\n\t\"Mute screen share audio\": \"Mute screen share audio\",\n\t\"Allow audio\": \"Allow audio\",\n\t\"Allow video\": \"Allow video\",\n\t\"Allow screen sharing\": \"Allow screen sharing\",\n\t\"Disable audio\": \"Disable audio\",\n\t\"Disable video\": \"Disable video\",\n\t\"Disable screen sharing\": \"Disable screen sharing\",\n\tEnter: Enter,\n\tLeave: Leave,\n\t\"Leave call\": \"Leave call\",\n\t\"End call for all\": \"End call for all\",\n\t\"{{ direction }} fullscreen\": \"{{ direction }} fullscreen\",\n\t\"{{ direction }} picture-in-picture\": \"{{ direction }} picture-in-picture\",\n\t\"Dominant Speaker\": \"Dominant Speaker\",\n\t\"Poor connection quality\": \"Poor connection quality. Please check your internet connection.\",\n\tParticipants: Participants,\n\tAnonymous: Anonymous,\n\t\"No participants found\": \"No participants found\",\n\t\"Participants ({{ numberOfParticipants }})\": \"Participants ({{ numberOfParticipants }})\",\n\t\"{{ userName }} is sharing their screen\": \"{{ userName }} is sharing their screen\",\n\t\"{{ userName }} is requesting to speak\": \"{{ userName }} is requesting to speak\",\n\t\"{{ userName }} is requesting to share their camera\": \"{{ userName }} is requesting to share their camera\",\n\t\"{{ userName }} is requesting to present their screen\": \"{{ userName }} is requesting to present their screen\",\n\t\"{{ userName }} is requesting permission: {{ permission }}\": \"{{ userName }} is requesting permission: {{ permission }}\"\n};\n\nconst translations = { en };\n\nconst StreamVideo = (props) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider, { translationsOverrides: translations, ...props }));\n};\nStreamVideo.displayName = 'StreamVideo';\n\nconst usePaginatedLayoutSortPreset = (call) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset);\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call]);\n};\nconst useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        // always show the remote participant in the spotlight\n        if (isOneOnOneCall) {\n            call.setSortParticipantsBy((0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators)(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing, loggedIn));\n        }\n        else {\n            call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset);\n        }\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call, isOneOnOneCall]);\n};\nconst resetSortPreset = (call) => {\n    // reset the sorting to the default for the call type\n    const callConfig = _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes.get(call.type);\n    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset);\n};\nconst loggedIn = (a, b) => {\n    if (a.isLocalParticipant)\n        return 1;\n    if (b.isLocalParticipant)\n        return -1;\n    return 0;\n};\n\nconst LivestreamLayout = (props) => {\n    const { useParticipants, useRemoteParticipants, useHasOngoingScreenShare } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const participants = useParticipants();\n    const [currentSpeaker] = participants;\n    const remoteParticipants = useRemoteParticipants();\n    const hasOngoingScreenShare = useHasOngoingScreenShare();\n    const presenter = hasOngoingScreenShare\n        ? participants.find(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)\n        : undefined;\n    usePaginatedLayoutSortPreset(call);\n    const Overlay = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));\n    const { floatingParticipantProps } = props;\n    const FloatingParticipantOverlay = hasOngoingScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay\n    // these elements aren't needed for the video feed\n    , { \n        // these elements aren't needed for the video feed\n        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: \"str-video__livestream-layout__screen-share\", participant: presenter, ParticipantViewUI: Overlay, trackType: \"screenShareTrack\", muteAudio // audio is rendered by ParticipantsAudio\n                : true })), currentSpeaker && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(hasOngoingScreenShare &&\n                    (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: FloatingParticipantOverlay || Overlay, muteAudio // audio is rendered by ParticipantsAudio\n                : true }))] }));\n};\nconst ParticipantOverlay = (props) => {\n    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;\n    const { participant } = useParticipantViewContext();\n    const { useParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const duration = useUpdateCallDuration();\n    const toggleFullScreen = useToggleFullScreen();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__overlay\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__overlay__bar\", children: [showLiveBadge && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__live-badge\", children: t('Live') })), showParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__viewers-count\", children: participantCount })), showSpeakerName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__speaker-name\", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__duration\", children: formatDuration(duration) })), enableFullScreen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__go-fullscreen\", onClick: toggleFullScreen }))] }) }));\n};\nLivestreamLayout.displayName = 'LivestreamLayout';\nconst useUpdateCallDuration = () => {\n    const { useIsCallLive, useCallSession } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallLive = useIsCallLive();\n    const session = useCallSession();\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        if (!session || !session.live_started_at)\n            return 0;\n        const liveStartTime = new Date(session.live_started_at);\n        const now = new Date();\n        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isCallLive)\n            return;\n        const interval = setInterval(() => {\n            setDuration((d) => d + 1);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isCallLive]);\n    return duration;\n};\nconst useToggleFullScreen = () => {\n    const { participantViewElement } = useParticipantViewContext();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        if (isFullscreen) {\n            document.exitFullscreen().then(() => {\n                setIsFullscreen(false);\n            });\n        }\n        else {\n            participantViewElement?.requestFullscreen().then(() => {\n                setIsFullscreen(true);\n            });\n        }\n    }, [isFullscreen, participantViewElement]);\n};\nconst formatDuration = (durationInMs) => {\n    const days = Math.floor(durationInMs / 86400);\n    const hours = Math.floor(durationInMs / 3600);\n    const minutes = Math.floor((durationInMs % 3600) / 60);\n    const seconds = durationInMs % 60;\n    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nconst GROUP_SIZE = 16;\nconst PaginatedGridLayoutGroup = ({ group, VideoPlaceholder, ParticipantViewUI, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__paginated-grid-layout__group', {\n            'str-video__paginated-grid-layout--one': group.length === 1,\n            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,\n            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,\n        }), children: group.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));\n};\nconst PaginatedGridLayout = (props) => {\n    const { groupSize = (props.groupSize || 0) > 0\n        ? props.groupSize || GROUP_SIZE\n        : GROUP_SIZE, excludeLocalParticipant = false, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, } = props;\n    const [page, setPage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!paginatedGridLayoutWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);\n        return () => cleanup();\n    }, [paginatedGridLayoutWrapperElement, call]);\n    // only used to render video elements\n    const participantGroups = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => chunk(excludeLocalParticipant ? remoteParticipants : participants, groupSize), [excludeLocalParticipant, remoteParticipants, participants, groupSize]);\n    const pageCount = participantGroups.length;\n    // update page when page count is reduced and selected page no longer exists\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (page > pageCount - 1) {\n            setPage(Math.max(0, pageCount - 1));\n        }\n    }, [page, pageCount]);\n    const selectedGroup = participantGroups[page];\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout__wrapper\", ref: setPaginatedGridLayoutWrapperElement, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout\", children: [pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"caret-left\", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PaginatedGridLayoutGroup, { group: selectedGroup, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI })), pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: page === pageCount - 1, icon: \"caret-right\", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));\n};\nPaginatedGridLayout.displayName = 'PaginatedGridLayout';\n\nconst useCalculateHardLimit = (\n/**\n * Element that stretches to 100% of the whole layout component\n */\nwrapperElement, \n/**\n * Element that directly hosts individual `ParticipantView` (or wrapper) elements\n */\nhostElement, limit) => {\n    const [calculatedLimit, setCalculatedLimit] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        vertical: typeof limit === 'number' ? limit : null,\n        horizontal: typeof limit === 'number' ? limit : null,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!hostElement ||\n            !wrapperElement ||\n            typeof limit === 'number' ||\n            typeof limit === 'undefined')\n            return;\n        let childWidth = null;\n        let childHeight = null;\n        const resizeObserver = new ResizeObserver((entries, observer) => {\n            // this part should ideally run as little times as possible\n            // get child measurements and disconnect\n            // does not consider dynamically sized children\n            // this hook is for SpeakerLayout use only, where children in the bar are fixed size\n            if (entries.length > 1) {\n                const child = hostElement.firstChild;\n                if (child) {\n                    childHeight = child.clientHeight;\n                    childWidth = child.clientWidth;\n                    observer.unobserve(hostElement);\n                }\n            }\n            // keep the state at { vertical: 1, horizontal: 1 }\n            // until we get the proper child measurements\n            if (childHeight === null || childWidth === null)\n                return;\n            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);\n            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);\n            setCalculatedLimit((pv) => {\n                if (pv.vertical !== vertical || pv.horizontal !== horizontal)\n                    return { vertical, horizontal };\n                return pv;\n            });\n        });\n        resizeObserver.observe(wrapperElement);\n        resizeObserver.observe(hostElement);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, [hostElement, limit, wrapperElement]);\n    return calculatedLimit;\n};\n\nconst DefaultParticipantViewUIBar = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, { menuPlacement: \"top-end\" }));\nconst SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUI, VideoPlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, excludeLocalParticipant = false, pageArrowsVisible = true, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const allParticipants = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const [participantInSpotlight, ...otherParticipants] = excludeLocalParticipant\n        ? remoteParticipants\n        : allParticipants;\n    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [participantsBarElement, setParticipantsBarElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [buttonsWrapperElement, setButtonsWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const isSpeakerScreenSharing = participantInSpotlight && (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participantInSpotlight);\n    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);\n    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';\n    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!participantsBarWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(participantsBarWrapperElement);\n        return () => cleanup();\n    }, [participantsBarWrapperElement, call]);\n    const isOneOnOneCall = allParticipants.length === 2;\n    useSpeakerLayoutSortPreset(call, isOneOnOneCall);\n    let participantsWithAppliedLimit = otherParticipants;\n    const hardLimitToApply = isVertical\n        ? hardLimit.vertical\n        : hardLimit.horizontal;\n    if (typeof participantsBarLimit !== 'undefined' &&\n        hardLimitToApply !== null) {\n        participantsWithAppliedLimit = otherParticipants.slice(0, \n        // subtract 1 if speaker is sharing screen as\n        // that one is rendered independently from otherParticipants array\n        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));\n    }\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__speaker-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speaker-layout', participantsBarPosition &&\n                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__spotlight\", children: participantInSpotlight && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, muteAudio: true, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder })) }), participantsWithAppliedLimit.length > 0 && participantsBarPosition && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setButtonsWrapperElement, className: \"str-video__speaker-layout__participants-bar-buttons-wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participants-bar-wrapper\", ref: setParticipantsBarWrapperElement, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setParticipantsBarElement, className: \"str-video__speaker-layout__participants-bar\", children: [isSpeakerScreenSharing && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participant.sessionId)))] }) }), pageArrowsVisible && isVertical && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), pageArrowsVisible && isHorizontal && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));\n};\nSpeakerLayout.displayName = 'SpeakerLayout';\nconst HorizontalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);\n    const scrollStartClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });\n    };\n    const scrollEndClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollStartClickHandler, icon: \"caret-left\", className: \"str-video__speaker-layout__participants-bar--button-left\" })), scrollPosition && scrollPosition !== 'end' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollEndClickHandler, icon: \"caret-right\", className: \"str-video__speaker-layout__participants-bar--button-right\" }))] }));\n};\nconst VerticalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useVerticalScrollPosition(scrollWrapper);\n    const scrollTopClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });\n    };\n    const scrollBottomClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollTopClickHandler, icon: \"caret-up\", className: \"str-video__speaker-layout__participants-bar--button-top\" })), scrollPosition && scrollPosition !== 'bottom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollBottomClickHandler, icon: \"caret-down\", className: \"str-video__speaker-layout__participants-bar--button-bottom\" }))] }));\n};\n\nconst LivestreamPlayer = (props) => {\n    const { callType, callId, layoutProps } = props;\n    const client = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient)();\n    const [call, setCall] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!client)\n            return;\n        const myCall = client.call(callType, callId);\n        setCall(myCall);\n        myCall.join().catch((e) => {\n            console.error('Failed to join call', e);\n        });\n        return () => {\n            myCall.leave().catch((e) => {\n                console.error('Failed to leave call', e);\n            });\n            setCall(undefined);\n        };\n    }, [callId, callType, client]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StreamCall, { call: call, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LivestreamLayout, { ...layoutProps }) }));\n};\n\nconst [major, minor, patch] = (\"1.4.3\").split('.');\n(0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo)({\n    type: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.SdkType.REACT,\n    major,\n    minor,\n    patch,\n});\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CallStatsLatencyChart)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-chartjs-2 */ \"(ssr)/./node_modules/react-chartjs-2/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\n// NOTE: this is a side effect by definition, but this component is\n// isolated in a separate chunk, and it won't affect the rest of the app.\n// See CallStats.tsx for more details.\nchart_js__WEBPACK_IMPORTED_MODULE_2__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_2__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_2__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_2__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_2__.PointElement);\nconst CallStatsLatencyChart = (props) => {\n    const { values } = props;\n    let max = 0;\n    const data = {\n        labels: values.map((point) => {\n            const date = new Date(point.x * 1000);\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }),\n        datasets: [\n            {\n                data: values.map((point) => {\n                    const { y } = point;\n                    max = Math.max(max, y);\n                    return point;\n                }),\n                borderColor: '#00e2a1',\n                backgroundColor: '#00e2a1',\n            },\n        ],\n    };\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getLineOptions(max), [max]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"str-video__call-stats-line-chart-container\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__.Line, { options: options, data: data, className: \"str-video__call-stats__latencychart\" }) }));\n};\nconst getLineOptions = (max) => ({\n    maintainAspectRatio: false,\n    animation: { duration: 0 },\n    elements: {\n        line: { borderWidth: 1 },\n        point: { radius: 2 },\n    },\n    scales: {\n        y: {\n            position: 'right',\n            stacked: true,\n            min: 0,\n            max: Math.max(180, Math.ceil((max + 10) / 10) * 10),\n            grid: { display: true, color: '#979ca0' },\n            ticks: { stepSize: 30 },\n        },\n        x: {\n            grid: { display: false },\n            ticks: { display: false },\n        },\n    },\n});\n\n\n//# sourceMappingURL=latency-chart-Bj5OSYzg.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9sYXRlbmN5LWNoYXJ0LUJqNU9TWXpnLmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBd0M7QUFDZ0Q7QUFDakQ7QUFDUDs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsMkNBQUssVUFBVSxtREFBYSxFQUFFLGlEQUFXLEVBQUUsaURBQVcsRUFBRSxrREFBWTtBQUNwRTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDM0QsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFPO0FBQzNCLFlBQVksc0RBQUcsVUFBVSxtRUFBbUUsc0RBQUcsQ0FBQyxpREFBSSxJQUFJLGdGQUFnRixHQUFHO0FBQzNMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQyxpQkFBaUIsV0FBVztBQUM1QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlDQUFpQztBQUNyRCxxQkFBcUIsY0FBYztBQUNuQyxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLHFCQUFxQixnQkFBZ0I7QUFDckMsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDOztBQUUyQztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3pvb21pZS8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLXJlYWN0LXNkay9kaXN0L2xhdGVuY3ktY2hhcnQtQmo1T1NZemcuZXMuanM/ZGZkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc3ggfSBmcm9tICdyZWFjdC9qc3gtcnVudGltZSc7XG5pbXBvcnQgeyBDaGFydCwgQ2F0ZWdvcnlTY2FsZSwgTGluZWFyU2NhbGUsIExpbmVFbGVtZW50LCBQb2ludEVsZW1lbnQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbi8vIE5PVEU6IHRoaXMgaXMgYSBzaWRlIGVmZmVjdCBieSBkZWZpbml0aW9uLCBidXQgdGhpcyBjb21wb25lbnQgaXNcbi8vIGlzb2xhdGVkIGluIGEgc2VwYXJhdGUgY2h1bmssIGFuZCBpdCB3b24ndCBhZmZlY3QgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbi8vIFNlZSBDYWxsU3RhdHMudHN4IGZvciBtb3JlIGRldGFpbHMuXG5DaGFydC5yZWdpc3RlcihDYXRlZ29yeVNjYWxlLCBMaW5lYXJTY2FsZSwgTGluZUVsZW1lbnQsIFBvaW50RWxlbWVudCk7XG5jb25zdCBDYWxsU3RhdHNMYXRlbmN5Q2hhcnQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHZhbHVlcyB9ID0gcHJvcHM7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgbGFiZWxzOiB2YWx1ZXMubWFwKChwb2ludCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHBvaW50LnggKiAxMDAwKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtkYXRlLmdldEhvdXJzKCl9OiR7ZGF0ZS5nZXRNaW51dGVzKCl9YDtcbiAgICAgICAgfSksXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogdmFsdWVzLm1hcCgocG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB5IH0gPSBwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0TGluZU9wdGlvbnMobWF4KSwgW21heF0pO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0cy1saW5lLWNoYXJ0LWNvbnRhaW5lclwiLCBjaGlsZHJlbjoganN4KExpbmUsIHsgb3B0aW9uczogb3B0aW9ucywgZGF0YTogZGF0YSwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19fbGF0ZW5jeWNoYXJ0XCIgfSkgfSkpO1xufTtcbmNvbnN0IGdldExpbmVPcHRpb25zID0gKG1heCkgPT4gKHtcbiAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICBhbmltYXRpb246IHsgZHVyYXRpb246IDAgfSxcbiAgICBlbGVtZW50czoge1xuICAgICAgICBsaW5lOiB7IGJvcmRlcldpZHRoOiAxIH0sXG4gICAgICAgIHBvaW50OiB7IHJhZGl1czogMiB9LFxuICAgIH0sXG4gICAgc2NhbGVzOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxuICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTgwLCBNYXRoLmNlaWwoKG1heCArIDEwKSAvIDEwKSAqIDEwKSxcbiAgICAgICAgICAgIGdyaWQ6IHsgZGlzcGxheTogdHJ1ZSwgY29sb3I6ICcjOTc5Y2EwJyB9LFxuICAgICAgICAgICAgdGlja3M6IHsgc3RlcFNpemU6IDMwIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHg6IHtcbiAgICAgICAgICAgIGdyaWQ6IHsgZGlzcGxheTogZmFsc2UgfSxcbiAgICAgICAgICAgIHRpY2tzOiB7IGRpc3BsYXk6IGZhbHNlIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBDYWxsU3RhdHNMYXRlbmN5Q2hhcnQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF0ZW5jeS1jaGFydC1CajVPU1l6Zy5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6726bac0cc5d\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3pvb21pZS8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLXJlYWN0LXNkay9kaXN0L2Nzcy9zdHlsZXMuY3NzPzA0MTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI2NzI2YmFjMGNjNWRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@stream-io/node-sdk/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stream-io/node-sdk/dist/index.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamChannel: () => (/* binding */ StreamChannel),\n/* harmony export */   StreamChatClient: () => (/* binding */ StreamChatClient),\n/* harmony export */   StreamClient: () => (/* binding */ StreamClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(action-browser)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nconst OwnCapability = {\n    BLOCK_USERS: 'block-users',\n    CHANGE_MAX_DURATION: 'change-max-duration',\n    CREATE_CALL: 'create-call',\n    CREATE_REACTION: 'create-reaction',\n    ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n    END_CALL: 'end-call',\n    JOIN_BACKSTAGE: 'join-backstage',\n    JOIN_CALL: 'join-call',\n    JOIN_ENDED_CALL: 'join-ended-call',\n    MUTE_USERS: 'mute-users',\n    PIN_FOR_EVERYONE: 'pin-for-everyone',\n    READ_CALL: 'read-call',\n    REMOVE_CALL_MEMBER: 'remove-call-member',\n    SCREENSHARE: 'screenshare',\n    SEND_AUDIO: 'send-audio',\n    SEND_VIDEO: 'send-video',\n    START_BROADCAST_CALL: 'start-broadcast-call',\n    START_RECORD_CALL: 'start-record-call',\n    START_TRANSCRIPTION_CALL: 'start-transcription-call',\n    STOP_BROADCAST_CALL: 'stop-broadcast-call',\n    STOP_RECORD_CALL: 'stop-record-call',\n    STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n    UPDATE_CALL: 'update-call',\n    UPDATE_CALL_MEMBER: 'update-call-member',\n    UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n    UPDATE_CALL_SETTINGS: 'update-call-settings',\n};\n\nfunction JWTUserToken(apiSecret, payload) {\n    // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if ((jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default()) == null || (jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign) == null) {\n        throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);\n    }\n    const opts = Object.assign({\n        algorithm: 'HS256',\n        noTimestamp: true,\n    });\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret, jwtOptions = {}) {\n    const payload = {\n        server: true,\n    };\n    const opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign(payload, apiSecret, opts);\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nclass StreamError extends Error {\n    constructor(message, metadata, code, errorOptions) {\n        super(message, errorOptions);\n        this.metadata = metadata;\n        this.code = code;\n    }\n}\n\nconst getRateLimitFromResponseHeader = (responseHeaders) => {\n    const rateLimit = responseHeaders.has('x-ratelimit-limit')\n        ? +responseHeaders.get('x-ratelimit-limit')\n        : undefined;\n    const rateLimitRemaining = responseHeaders.has('x-ratelimit-remaining')\n        ? +responseHeaders.get('x-ratelimit-remaining')\n        : undefined;\n    const rateLimitReset = responseHeaders.has('x-ratelimit-reset')\n        ? new Date(+responseHeaders.get('x-ratelimit-reset') * 1000)\n        : undefined;\n    const result = {\n        rateLimit,\n        rateLimitRemaining,\n        rateLimitReset,\n    };\n    return result;\n};\n\nclass BaseApi {\n    constructor(apiConfig) {\n        this.apiConfig = apiConfig;\n        this.sendRequest = (method, url, pathParams, queryParams, body) => __awaiter(this, void 0, void 0, function* () {\n            queryParams = queryParams !== null && queryParams !== void 0 ? queryParams : {};\n            queryParams.api_key = this.apiConfig.apiKey;\n            const encodedParams = this.queryParamsStringify(queryParams);\n            if (pathParams) {\n                Object.keys(pathParams).forEach((paramName) => {\n                    url = url.replace(`{${paramName}}`, pathParams[paramName]);\n                });\n            }\n            url += `?${encodedParams}`;\n            const clientRequestId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const headers = {\n                Authorization: this.apiConfig.token,\n                'stream-auth-type': 'jwt',\n                'Content-Type': 'application/json',\n                'X-Stream-Client': 'stream-node-' + \"0.4.3\",\n                'Accept-Encoding': 'gzip',\n                'x-client-request-id': clientRequestId,\n            };\n            const signal = AbortSignal.timeout(this.apiConfig.timeout);\n            try {\n                const response = yield fetch(`${this.apiConfig.baseUrl}${url}`, {\n                    signal,\n                    method,\n                    body: JSON.stringify(body),\n                    headers,\n                });\n                const responseHeaders = response.headers;\n                const metadata = {\n                    clientRequestId,\n                    responseHeaders,\n                    responseCode: response.status,\n                    rateLimit: getRateLimitFromResponseHeader(responseHeaders),\n                };\n                if (response.status < 200 || response.status >= 300) {\n                    let error;\n                    try {\n                        error = (yield response.json());\n                    }\n                    catch (_) {\n                        throw new StreamError(`Stream error: ${response.status} - ${response.statusText}`, metadata, response.status);\n                    }\n                    throw new StreamError(`Stream error code ${error.code}: ${error.message}`, metadata, error.code, undefined);\n                }\n                const responseBody = (yield response.json());\n                return { body: responseBody, metadata };\n            }\n            catch (error) {\n                if (error instanceof StreamError) {\n                    throw error;\n                }\n                const metadata = {\n                    clientRequestId,\n                    responseCode: error.status,\n                };\n                if (error.name === 'AbortError' || error.name === 'TimeoutError') {\n                    throw new StreamError(`The request was aborted due to to the ${this.apiConfig.timeout}ms timeout, you can set the timeout in the StreamClient constructor`, metadata, undefined, error);\n                }\n                else {\n                    throw new StreamError(`The request failed due to an unexpected error`, metadata, error);\n                }\n            }\n        });\n        this.queryParamsStringify = (params) => {\n            const newParams = [];\n            for (const k in params) {\n                const param = params[k];\n                if (Array.isArray(param)) {\n                    newParams.push(`${k}=${encodeURIComponent(param.join(','))}`);\n                }\n                else if (param instanceof Date) {\n                    newParams.push(param.toISOString());\n                }\n                else if (typeof param === 'object') {\n                    newParams.push(`${k}=${encodeURIComponent(JSON.stringify(param))}`);\n                }\n                else {\n                    if (typeof param === 'string' ||\n                        typeof param === 'number' ||\n                        typeof param === 'boolean') {\n                        newParams.push(`${k}=${encodeURIComponent(param)}`);\n                    }\n                }\n            }\n            return newParams.join('&');\n        };\n    }\n}\n\nconst decoders = {};\nconst decodeDatetimeType = (input) => new Date(Math.floor(input / 1000000));\ndecoders.DatetimeType = decodeDatetimeType;\nconst decode = (typeMappings, input) => {\n    if (!input || Object.keys(typeMappings).length === 0)\n        return input;\n    Object.keys(typeMappings).forEach((key) => {\n        if (input[key] != null) {\n            if (typeMappings[key]) {\n                const decoder = decoders[typeMappings[key].type];\n                if (decoder) {\n                    if (typeMappings[key].isSingle) {\n                        input[key] = decoder(input[key]);\n                    }\n                    else {\n                        Object.keys(input[key]).forEach((k) => {\n                            input[key][k] = decoder(input[key][k]);\n                        });\n                    }\n                }\n            }\n        }\n    });\n    return input;\n};\ndecoders.ActionLog = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        review_queue_item: { type: 'ReviewQueueItem', isSingle: true },\n        target_user: { type: 'UserObject', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActionLogResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        review_queue_item: { type: 'ReviewQueueItem', isSingle: true },\n        target_user: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AppResponseFields = (input) => {\n    const typeMappings = {\n        call_types: { type: 'CallType', isSingle: false },\n        channel_configs: { type: 'ChannelConfig', isSingle: false },\n        push_notifications: { type: 'PushNotificationFields', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AutomodDetails = (input) => {\n    const typeMappings = {\n        result: { type: 'MessageModerationResult', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Ban = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'Channel', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        target: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BanResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        banned_by: { type: 'UserResponse', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockListResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockUsersResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockedUserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        blocked_user: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallParticipantResponse = (input) => {\n    const typeMappings = {\n        joined_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecording = (input) => {\n    const typeMappings = {\n        end_time: { type: 'DatetimeType', isSingle: true },\n        start_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        ended_at: { type: 'DatetimeType', isSingle: true },\n        starts_at: { type: 'DatetimeType', isSingle: true },\n        session: { type: 'CallSessionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionResponse = (input) => {\n    const typeMappings = {\n        participants: { type: 'CallParticipantResponse', isSingle: false },\n        accepted_by: { type: 'DatetimeType', isSingle: false },\n        missed_by: { type: 'DatetimeType', isSingle: false },\n        rejected_by: { type: 'DatetimeType', isSingle: false },\n        ended_at: { type: 'DatetimeType', isSingle: true },\n        live_ended_at: { type: 'DatetimeType', isSingle: true },\n        live_started_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        timer_ends_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallStateResponseFields = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallStatsReportSummaryResponse = (input) => {\n    const typeMappings = {\n        first_stats_time: { type: 'DatetimeType', isSingle: true },\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscription = (input) => {\n    const typeMappings = {\n        end_time: { type: 'DatetimeType', isSingle: true },\n        start_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallType = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Channel = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        invites: { type: 'ChannelMember', isSingle: false },\n        members: { type: 'ChannelMember', isSingle: false },\n        config: { type: 'ChannelConfig', isSingle: true },\n        config_overrides: { type: 'ChannelConfig', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        truncated_by: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelConfig = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelConfigWithInfo = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMember = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        invite_accepted_at: { type: 'DatetimeType', isSingle: true },\n        invite_rejected_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMemberResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        invite_accepted_at: { type: 'DatetimeType', isSingle: true },\n        invite_rejected_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMute = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        mute_expires_at: { type: 'DatetimeType', isSingle: true },\n        truncated_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'ChannelMember', isSingle: false },\n        config: { type: 'ChannelConfigWithInfo', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        truncated_by: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelStateResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        messages: { type: 'MessageResponse', isSingle: false },\n        pinned_messages: { type: 'MessageResponse', isSingle: false },\n        threads: { type: 'ThreadState', isSingle: false },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        pending_messages: { type: 'PendingMessageResponse', isSingle: false },\n        read: { type: 'ReadStateResponse', isSingle: false },\n        watchers: { type: 'UserResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        membership: { type: 'ChannelMember', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelStateResponseFields = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        messages: { type: 'MessageResponse', isSingle: false },\n        pinned_messages: { type: 'MessageResponse', isSingle: false },\n        threads: { type: 'ThreadState', isSingle: false },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        pending_messages: { type: 'PendingMessageResponse', isSingle: false },\n        read: { type: 'ReadStateResponse', isSingle: false },\n        watchers: { type: 'UserResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        membership: { type: 'ChannelMember', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelTypeConfig = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CheckResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItem', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Command = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ConfigResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        velocity_filter_config: { type: 'VelocityFilterConfig', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateCommandResponse = (input) => {\n    const typeMappings = {\n        command: { type: 'Command', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateGuestResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateImportResponse = (input) => {\n    const typeMappings = {\n        import_task: { type: 'ImportTask', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateRoleResponse = (input) => {\n    const typeMappings = {\n        role: { type: 'Role', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CustomCheckResponse = (input) => {\n    const typeMappings = {\n        scored_at: { type: 'DatetimeType', isSingle: true },\n        reviewed_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeactivateUserResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteCallResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteChannelResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Device = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EgressRTMPResponse = (input) => {\n    const typeMappings = {\n        started_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EventResponse = (input) => {\n    const typeMappings = {\n        event: { type: 'WSEvent', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ExportUserResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'Message', isSingle: false },\n        reactions: { type: 'Reaction', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Flag2 = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FlagDetails = (input) => {\n    const typeMappings = {\n        automod: { type: 'AutomodDetails', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FlagFeedback = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FullUserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        devices: { type: 'Device', isSingle: false },\n        mutes: { type: 'UserMuteResponse', isSingle: false },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        push_notifications: {\n            type: 'PushNotificationSettingsResponse',\n            isSingle: true,\n        },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetApplicationResponse = (input) => {\n    const typeMappings = {\n        app: { type: 'AppResponseFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklist: { type: 'BlockListResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetBlockedUsersResponse = (input) => {\n    const typeMappings = {\n        blocks: { type: 'BlockedUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCommandResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetConfigResponse = (input) => {\n    const typeMappings = {\n        config: { type: 'ConfigResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetExportChannelsStatusResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetImportResponse = (input) => {\n    const typeMappings = {\n        import_task: { type: 'ImportTask', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetManyMessagesResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'Message', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageWithChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetOrCreateCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'Reaction', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetRepliesResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'MessageResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetReviewQueueItemResponse = (input) => {\n    const typeMappings = {\n        history: { type: 'ReviewQueueItem', isSingle: false },\n        item: { type: 'ReviewQueueItem', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetTaskResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetThreadResponse = (input) => {\n    const typeMappings = {\n        thread: { type: 'ThreadStateResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetUserModerationReportResponse = (input) => {\n    const typeMappings = {\n        user_blocks: { type: 'UserBlock', isSingle: false },\n        user_mutes: { type: 'UserMute', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GoLiveResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ImportTask = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        history: { type: 'ImportTaskHistory', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ImportTaskHistory = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklists: { type: 'BlockListResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListCallTypeResponse = (input) => {\n    const typeMappings = {\n        call_types: { type: 'CallTypeResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListChannelTypesResponse = (input) => {\n    const typeMappings = {\n        channel_types: { type: 'ChannelTypeConfig', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListCommandsResponse = (input) => {\n    const typeMappings = {\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListDevicesResponse = (input) => {\n    const typeMappings = {\n        devices: { type: 'Device', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListImportsResponse = (input) => {\n    const typeMappings = {\n        import_tasks: { type: 'ImportTask', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListPushProvidersResponse = (input) => {\n    const typeMappings = {\n        push_providers: { type: 'PushProviderResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListRecordingsResponse = (input) => {\n    const typeMappings = {\n        recordings: { type: 'CallRecording', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListRolesResponse = (input) => {\n    const typeMappings = {\n        roles: { type: 'Role', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListTranscriptionsResponse = (input) => {\n    const typeMappings = {\n        transcriptions: { type: 'CallTranscription', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MarkReadResponse = (input) => {\n    const typeMappings = {\n        event: { type: 'MessageReadEvent', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MemberResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Message = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'Reaction', isSingle: false },\n        mentioned_users: { type: 'UserObject', isSingle: false },\n        own_reactions: { type: 'Reaction', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserObject', isSingle: false },\n        pinned_by: { type: 'UserObject', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        quoted_message: { type: 'Message', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageFlagResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        approved_at: { type: 'DatetimeType', isSingle: true },\n        rejected_at: { type: 'DatetimeType', isSingle: true },\n        reviewed_at: { type: 'DatetimeType', isSingle: true },\n        details: { type: 'FlagDetails', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        moderation_feedback: { type: 'FlagFeedback', isSingle: true },\n        moderation_result: { type: 'MessageModerationResult', isSingle: true },\n        reviewed_by: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageHistoryEntryResponse = (input) => {\n    const typeMappings = {\n        message_updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageModerationResult = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageReadEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread: { type: 'ThreadResponse', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'ReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'ReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserResponse', isSingle: false },\n        pinned_by: { type: 'UserResponse', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        quoted_message: { type: 'Message', isSingle: true },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageWithChannelResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'ReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'ReactionResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserResponse', isSingle: false },\n        pinned_by: { type: 'UserResponse', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        quoted_message: { type: 'Message', isSingle: true },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationUsageStats = (input) => {\n    const typeMappings = {\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MuteChannelResponse = (input) => {\n    const typeMappings = {\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        channel_mute: { type: 'ChannelMute', isSingle: true },\n        own_user: { type: 'OwnUser', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MuteResponse = (input) => {\n    const typeMappings = {\n        mutes: { type: 'UserMute', isSingle: false },\n        own_user: { type: 'OwnUser', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.NullTime = (input) => {\n    const typeMappings = {\n        value: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.OwnUser = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        devices: { type: 'Device', isSingle: false },\n        mutes: { type: 'UserMute', isSingle: false },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        push_notifications: { type: 'PushNotificationSettings', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PendingMessageResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Poll = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_answers: { type: 'PollVote', isSingle: false },\n        own_votes: { type: 'PollVote', isSingle: false },\n        created_by: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollResponse = (input) => {\n    const typeMappings = {\n        poll: { type: 'PollResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        own_votes: { type: 'PollVoteResponseData', isSingle: false },\n        created_by: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVote = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVoteResponse = (input) => {\n    const typeMappings = {\n        vote: { type: 'PollVoteResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVoteResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVotesResponse = (input) => {\n    const typeMappings = {\n        votes: { type: 'PollVoteResponseData', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushNotificationFields = (input) => {\n    const typeMappings = {\n        providers: { type: 'PushProvider', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushNotificationSettings = (input) => {\n    const typeMappings = {\n        disabled_until: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushNotificationSettingsResponse = (input) => {\n    const typeMappings = {\n        disabled_until: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushProvider = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        disabled_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushProviderResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        disabled_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryBannedUsersResponse = (input) => {\n    const typeMappings = {\n        bans: { type: 'BanResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallMembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallStatsResponse = (input) => {\n    const typeMappings = {\n        reports: { type: 'CallStatsReportSummaryResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallsResponse = (input) => {\n    const typeMappings = {\n        calls: { type: 'CallStateResponseFields', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryChannelsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'ChannelStateResponseFields', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedModerationTemplate = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedModerationTemplatesResponse = (input) => {\n    const typeMappings = {\n        templates: { type: 'QueryFeedModerationTemplate', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryMessageFlagsResponse = (input) => {\n    const typeMappings = {\n        flags: { type: 'MessageFlagResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryMessageHistoryResponse = (input) => {\n    const typeMappings = {\n        message_history: { type: 'MessageHistoryEntryResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryModerationLogsResponse = (input) => {\n    const typeMappings = {\n        l_og_s: { type: 'ActionLogResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryPollsResponse = (input) => {\n    const typeMappings = {\n        polls: { type: 'PollResponseData', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'ReactionResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryReviewQueueResponse = (input) => {\n    const typeMappings = {\n        items: { type: 'ReviewQueueItem', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryThreadsResponse = (input) => {\n    const typeMappings = {\n        threads: { type: 'ThreadStateResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryUsageStatsResponse = (input) => {\n    const typeMappings = {\n        items: { type: 'ModerationUsageStats', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryUsersResponse = (input) => {\n    const typeMappings = {\n        users: { type: 'FullUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Reaction = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionGroupResponse = (input) => {\n    const typeMappings = {\n        first_reaction_at: { type: 'DatetimeType', isSingle: true },\n        last_reaction_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionRemovalResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'Message', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactivateUserResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Read = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReadStateResponse = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReviewQueueItem = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        actions: { type: 'ActionLog', isSingle: false },\n        bans: { type: 'Ban', isSingle: false },\n        flags: { type: 'Flag2', isSingle: false },\n        completed_at: { type: 'NullTime', isSingle: true },\n        reviewed_at: { type: 'NullTime', isSingle: true },\n        assigned_to: { type: 'UserObject', isSingle: true },\n        entity_creator: { type: 'UserObject', isSingle: true },\n        feeds_v2_reaction: { type: 'Reaction', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Role = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SearchResult = (input) => {\n    const typeMappings = {\n        message: { type: 'SearchResultMessage', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SearchResultMessage = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'Reaction', isSingle: false },\n        mentioned_users: { type: 'UserObject', isSingle: false },\n        own_reactions: { type: 'Reaction', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserObject', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        pinned_by: { type: 'UserObject', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        quoted_message: { type: 'Message', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SendMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SendReactionResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n        reaction: { type: 'ReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.StopLiveResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SubmitActionResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItem', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadParticipant = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        last_read_at: { type: 'DatetimeType', isSingle: true },\n        last_thread_message_at: { type: 'DatetimeType', isSingle: true },\n        left_thread_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'ThreadParticipant', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        parent_message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadState = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_replies: { type: 'Message', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        read: { type: 'Read', isSingle: false },\n        thread_participants: { type: 'ThreadParticipant', isSingle: false },\n        channel: { type: 'Channel', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        parent_message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadStateResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_replies: { type: 'MessageResponse', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        read: { type: 'Read', isSingle: false },\n        thread_participants: { type: 'ThreadParticipant', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        parent_message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.TruncateChannelResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsBatchResponse = (input) => {\n    const typeMappings = {\n        counts_by_user: { type: 'UnreadCountsResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsChannel = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'UnreadCountsChannel', isSingle: false },\n        threads: { type: 'UnreadCountsThread', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsThread = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallMembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelPartialResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMemberResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCommandResponse = (input) => {\n    const typeMappings = {\n        command: { type: 'Command', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMemberPartialResponse = (input) => {\n    const typeMappings = {\n        channel_member: { type: 'ChannelMemberResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMessagePartialResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateThreadPartialResponse = (input) => {\n    const typeMappings = {\n        thread: { type: 'ThreadResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateUsersResponse = (input) => {\n    const typeMappings = {\n        users: { type: 'FullUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertConfigResponse = (input) => {\n    const typeMappings = {\n        config: { type: 'ConfigResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertModerationTemplateResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertPushProviderResponse = (input) => {\n    const typeMappings = {\n        push_provider: { type: 'PushProviderResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserBlock = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMute = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        target: { type: 'UserObject', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMuteResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        target: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserObject = (input) => {\n    const typeMappings = {\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        created_at: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        push_notifications: { type: 'PushNotificationSettings', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        devices: { type: 'Device', isSingle: false },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        push_notifications: {\n            type: 'PushNotificationSettingsResponse',\n            isSingle: true,\n        },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.VelocityFilterConfig = (input) => {\n    const typeMappings = {\n        rule: { type: 'VelocityFilterConfigRule', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.VelocityFilterConfigRule = (input) => {\n    const typeMappings = {\n        timeout: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.WSEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserObject', isSingle: true },\n        me: { type: 'OwnUser', isSingle: true },\n        member: { type: 'ChannelMember', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        poll_vote: { type: 'PollVote', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n        thread: { type: 'ThreadResponse', isSingle: true },\n        user: { type: 'UserObject', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.WrappedUnreadCountsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'UnreadCountsChannel', isSingle: false },\n        threads: { type: 'UnreadCountsThread', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\n\nclass CommonApi extends BaseApi {\n    constructor() {\n        super(...arguments);\n        this.getApp = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const response = yield this.sendRequest('GET', '/api/v2/app', undefined, undefined);\n            (_a = decoders.GetApplicationResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateApp = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            const body = {\n                async_url_enrich_enabled: request === null || request === void 0 ? void 0 : request.async_url_enrich_enabled,\n                auto_translation_enabled: request === null || request === void 0 ? void 0 : request.auto_translation_enabled,\n                before_message_send_hook_url: request === null || request === void 0 ? void 0 : request.before_message_send_hook_url,\n                cdn_expiration_seconds: request === null || request === void 0 ? void 0 : request.cdn_expiration_seconds,\n                channel_hide_members_only: request === null || request === void 0 ? void 0 : request.channel_hide_members_only,\n                custom_action_handler_url: request === null || request === void 0 ? void 0 : request.custom_action_handler_url,\n                disable_auth_checks: request === null || request === void 0 ? void 0 : request.disable_auth_checks,\n                disable_permissions_checks: request === null || request === void 0 ? void 0 : request.disable_permissions_checks,\n                enforce_unique_usernames: request === null || request === void 0 ? void 0 : request.enforce_unique_usernames,\n                feeds_moderation_enabled: request === null || request === void 0 ? void 0 : request.feeds_moderation_enabled,\n                feeds_v2_region: request === null || request === void 0 ? void 0 : request.feeds_v2_region,\n                image_moderation_enabled: request === null || request === void 0 ? void 0 : request.image_moderation_enabled,\n                migrate_permissions_to_v2: request === null || request === void 0 ? void 0 : request.migrate_permissions_to_v2,\n                moderation_enabled: request === null || request === void 0 ? void 0 : request.moderation_enabled,\n                moderation_webhook_url: request === null || request === void 0 ? void 0 : request.moderation_webhook_url,\n                multi_tenant_enabled: request === null || request === void 0 ? void 0 : request.multi_tenant_enabled,\n                permission_version: request === null || request === void 0 ? void 0 : request.permission_version,\n                reminders_interval: request === null || request === void 0 ? void 0 : request.reminders_interval,\n                reminders_max_members: request === null || request === void 0 ? void 0 : request.reminders_max_members,\n                revoke_tokens_issued_before: request === null || request === void 0 ? void 0 : request.revoke_tokens_issued_before,\n                sns_key: request === null || request === void 0 ? void 0 : request.sns_key,\n                sns_secret: request === null || request === void 0 ? void 0 : request.sns_secret,\n                sns_topic_arn: request === null || request === void 0 ? void 0 : request.sns_topic_arn,\n                sqs_key: request === null || request === void 0 ? void 0 : request.sqs_key,\n                sqs_secret: request === null || request === void 0 ? void 0 : request.sqs_secret,\n                sqs_url: request === null || request === void 0 ? void 0 : request.sqs_url,\n                video_provider: request === null || request === void 0 ? void 0 : request.video_provider,\n                webhook_url: request === null || request === void 0 ? void 0 : request.webhook_url,\n                allowed_flag_reasons: request === null || request === void 0 ? void 0 : request.allowed_flag_reasons,\n                image_moderation_block_labels: request === null || request === void 0 ? void 0 : request.image_moderation_block_labels,\n                image_moderation_labels: request === null || request === void 0 ? void 0 : request.image_moderation_labels,\n                user_search_disallowed_roles: request === null || request === void 0 ? void 0 : request.user_search_disallowed_roles,\n                webhook_events: request === null || request === void 0 ? void 0 : request.webhook_events,\n                agora_options: request === null || request === void 0 ? void 0 : request.agora_options,\n                apn_config: request === null || request === void 0 ? void 0 : request.apn_config,\n                async_moderation_config: request === null || request === void 0 ? void 0 : request.async_moderation_config,\n                datadog_info: request === null || request === void 0 ? void 0 : request.datadog_info,\n                file_upload_config: request === null || request === void 0 ? void 0 : request.file_upload_config,\n                firebase_config: request === null || request === void 0 ? void 0 : request.firebase_config,\n                grants: request === null || request === void 0 ? void 0 : request.grants,\n                hms_options: request === null || request === void 0 ? void 0 : request.hms_options,\n                huawei_config: request === null || request === void 0 ? void 0 : request.huawei_config,\n                image_upload_config: request === null || request === void 0 ? void 0 : request.image_upload_config,\n                push_config: request === null || request === void 0 ? void 0 : request.push_config,\n                xiaomi_config: request === null || request === void 0 ? void 0 : request.xiaomi_config,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/app', undefined, undefined, body);\n            (_b = decoders.Response) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listBlockLists = () => __awaiter(this, void 0, void 0, function* () {\n            var _c;\n            const response = yield this.sendRequest('GET', '/api/v2/blocklists', undefined, undefined);\n            (_c = decoders.ListBlockListResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createBlockList = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _d;\n            const body = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n                words: request === null || request === void 0 ? void 0 : request.words,\n                type: request === null || request === void 0 ? void 0 : request.type,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/blocklists', undefined, undefined, body);\n            (_d = decoders.Response) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteBlockList = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _e;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/blocklists/{name}', pathParams, undefined);\n            (_e = decoders.Response) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getBlockList = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _f;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/blocklists/{name}', pathParams, undefined);\n            (_f = decoders.GetBlockListResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateBlockList = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _g;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {\n                words: request === null || request === void 0 ? void 0 : request.words,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/blocklists/{name}', pathParams, undefined, body);\n            (_g = decoders.Response) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.checkPush = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _h;\n            const body = {\n                apn_template: request === null || request === void 0 ? void 0 : request.apn_template,\n                firebase_data_template: request === null || request === void 0 ? void 0 : request.firebase_data_template,\n                firebase_template: request === null || request === void 0 ? void 0 : request.firebase_template,\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n                push_provider_name: request === null || request === void 0 ? void 0 : request.push_provider_name,\n                push_provider_type: request === null || request === void 0 ? void 0 : request.push_provider_type,\n                skip_devices: request === null || request === void 0 ? void 0 : request.skip_devices,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/check_push', undefined, undefined, body);\n            (_h = decoders.CheckPushResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.checkSNS = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _j;\n            const body = {\n                sns_key: request === null || request === void 0 ? void 0 : request.sns_key,\n                sns_secret: request === null || request === void 0 ? void 0 : request.sns_secret,\n                sns_topic_arn: request === null || request === void 0 ? void 0 : request.sns_topic_arn,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/check_sns', undefined, undefined, body);\n            (_j = decoders.CheckSNSResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.checkSQS = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _k;\n            const body = {\n                sqs_key: request === null || request === void 0 ? void 0 : request.sqs_key,\n                sqs_secret: request === null || request === void 0 ? void 0 : request.sqs_secret,\n                sqs_url: request === null || request === void 0 ? void 0 : request.sqs_url,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/check_sqs', undefined, undefined, body);\n            (_k = decoders.CheckSQSResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteDevice = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _l;\n            const queryParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/devices', undefined, queryParams);\n            (_l = decoders.Response) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listDevices = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _m;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/devices', undefined, queryParams);\n            (_m = decoders.ListDevicesResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createDevice = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _o;\n            const body = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                push_provider: request === null || request === void 0 ? void 0 : request.push_provider,\n                push_provider_name: request === null || request === void 0 ? void 0 : request.push_provider_name,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                voip_token: request === null || request === void 0 ? void 0 : request.voip_token,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/devices', undefined, undefined, body);\n            (_o = decoders.Response) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.exportUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _p;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/export/users', undefined, undefined, body);\n            (_p = decoders.ExportUsersResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listExternalStorage = () => __awaiter(this, void 0, void 0, function* () {\n            var _q;\n            const response = yield this.sendRequest('GET', '/api/v2/external_storage', undefined, undefined);\n            (_q = decoders.ListExternalStorageResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _r;\n            const body = {\n                bucket: request === null || request === void 0 ? void 0 : request.bucket,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                storage_type: request === null || request === void 0 ? void 0 : request.storage_type,\n                gcs_credentials: request === null || request === void 0 ? void 0 : request.gcs_credentials,\n                path: request === null || request === void 0 ? void 0 : request.path,\n                aws_s3: request === null || request === void 0 ? void 0 : request.aws_s3,\n                azure_blob: request === null || request === void 0 ? void 0 : request.azure_blob,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/external_storage', undefined, undefined, body);\n            (_r = decoders.CreateExternalStorageResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _s;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/external_storage/{name}', pathParams, undefined);\n            (_s = decoders.DeleteExternalStorageResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _t;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {\n                bucket: request === null || request === void 0 ? void 0 : request.bucket,\n                storage_type: request === null || request === void 0 ? void 0 : request.storage_type,\n                gcs_credentials: request === null || request === void 0 ? void 0 : request.gcs_credentials,\n                path: request === null || request === void 0 ? void 0 : request.path,\n                aws_s3: request === null || request === void 0 ? void 0 : request.aws_s3,\n                azure_blob: request === null || request === void 0 ? void 0 : request.azure_blob,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/external_storage/{name}', pathParams, undefined, body);\n            (_t = decoders.UpdateExternalStorageResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.checkExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _u;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/external_storage/{name}/check', pathParams, undefined);\n            (_u = decoders.CheckExternalStorageResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createGuest = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _v;\n            const body = {\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/guest', undefined, undefined, body);\n            (_v = decoders.CreateGuestResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createImportURL = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _w;\n            const body = {\n                filename: request === null || request === void 0 ? void 0 : request.filename,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/import_urls', undefined, undefined, body);\n            (_w = decoders.CreateImportURLResponse) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listImports = () => __awaiter(this, void 0, void 0, function* () {\n            var _x;\n            const response = yield this.sendRequest('GET', '/api/v2/imports', undefined, undefined);\n            (_x = decoders.ListImportsResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createImport = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _y;\n            const body = {\n                mode: request === null || request === void 0 ? void 0 : request.mode,\n                path: request === null || request === void 0 ? void 0 : request.path,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/imports', undefined, undefined, body);\n            (_y = decoders.CreateImportResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getImport = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _z;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/imports/{id}', pathParams, undefined);\n            (_z = decoders.GetImportResponse) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getOG = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _0;\n            const queryParams = {\n                url: request === null || request === void 0 ? void 0 : request.url,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/og', undefined, queryParams);\n            (_0 = decoders.GetOGResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listPermissions = () => __awaiter(this, void 0, void 0, function* () {\n            var _1;\n            const response = yield this.sendRequest('GET', '/api/v2/permissions', undefined, undefined);\n            (_1 = decoders.ListPermissionsResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getPermission = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _2;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/permissions/{id}', pathParams, undefined);\n            (_2 = decoders.GetCustomPermissionResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listPushProviders = () => __awaiter(this, void 0, void 0, function* () {\n            var _3;\n            const response = yield this.sendRequest('GET', '/api/v2/push_providers', undefined, undefined);\n            (_3 = decoders.ListPushProvidersResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.upsertPushProvider = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _4;\n            const body = {\n                push_provider: request === null || request === void 0 ? void 0 : request.push_provider,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/push_providers', undefined, undefined, body);\n            (_4 = decoders.UpsertPushProviderResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deletePushProvider = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _5;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/push_providers/{type}/{name}', pathParams, undefined);\n            (_5 = decoders.Response) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getRateLimits = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _6;\n            const queryParams = {\n                server_side: request === null || request === void 0 ? void 0 : request.server_side,\n                android: request === null || request === void 0 ? void 0 : request.android,\n                ios: request === null || request === void 0 ? void 0 : request.ios,\n                web: request === null || request === void 0 ? void 0 : request.web,\n                endpoints: request === null || request === void 0 ? void 0 : request.endpoints,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/rate_limits', undefined, queryParams);\n            (_6 = decoders.GetRateLimitsResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listRoles = () => __awaiter(this, void 0, void 0, function* () {\n            var _7;\n            const response = yield this.sendRequest('GET', '/api/v2/roles', undefined, undefined);\n            (_7 = decoders.ListRolesResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createRole = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _8;\n            const body = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/roles', undefined, undefined, body);\n            (_8 = decoders.CreateRoleResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteRole = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _9;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/roles/{name}', pathParams, undefined);\n            (_9 = decoders.Response) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getTask = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _10;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/tasks/{id}', pathParams, undefined);\n            (_10 = decoders.GetTaskResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _11;\n            const queryParams = {\n                payload: request === null || request === void 0 ? void 0 : request.payload,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/users', undefined, queryParams);\n            (_11 = decoders.QueryUsersResponse) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateUsersPartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _12;\n            const body = {\n                users: request === null || request === void 0 ? void 0 : request.users,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/users', undefined, undefined, body);\n            (_12 = decoders.UpdateUsersResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _13;\n            const body = {\n                users: request === null || request === void 0 ? void 0 : request.users,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users', undefined, undefined, body);\n            (_13 = decoders.UpdateUsersResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getBlockedUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _14;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/users/block', undefined, queryParams);\n            (_14 = decoders.GetBlockedUsersResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.blockUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _15;\n            const body = {\n                blocked_user_id: request === null || request === void 0 ? void 0 : request.blocked_user_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/block', undefined, undefined, body);\n            (_15 = decoders.BlockUsersResponse) === null || _15 === void 0 ? void 0 : _15.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deactivateUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _16;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,\n                mark_channels_deleted: request === null || request === void 0 ? void 0 : request.mark_channels_deleted,\n                mark_messages_deleted: request === null || request === void 0 ? void 0 : request.mark_messages_deleted,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/deactivate', undefined, undefined, body);\n            (_16 = decoders.DeactivateUsersResponse) === null || _16 === void 0 ? void 0 : _16.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _17;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n                calls: request === null || request === void 0 ? void 0 : request.calls,\n                conversations: request === null || request === void 0 ? void 0 : request.conversations,\n                messages: request === null || request === void 0 ? void 0 : request.messages,\n                new_call_owner_id: request === null || request === void 0 ? void 0 : request.new_call_owner_id,\n                new_channel_owner_id: request === null || request === void 0 ? void 0 : request.new_channel_owner_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/delete', undefined, undefined, body);\n            (_17 = decoders.DeleteUsersResponse) === null || _17 === void 0 ? void 0 : _17.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.reactivateUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _18;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,\n                restore_channels: request === null || request === void 0 ? void 0 : request.restore_channels,\n                restore_messages: request === null || request === void 0 ? void 0 : request.restore_messages,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/reactivate', undefined, undefined, body);\n            (_18 = decoders.ReactivateUsersResponse) === null || _18 === void 0 ? void 0 : _18.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.restoreUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _19;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/restore', undefined, undefined, body);\n            (_19 = decoders.Response) === null || _19 === void 0 ? void 0 : _19.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unblockUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _20;\n            const body = {\n                blocked_user_id: request === null || request === void 0 ? void 0 : request.blocked_user_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/unblock', undefined, undefined, body);\n            (_20 = decoders.UnblockUsersResponse) === null || _20 === void 0 ? void 0 : _20.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deactivateUser = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _21;\n            const pathParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const body = {\n                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,\n                mark_messages_deleted: request === null || request === void 0 ? void 0 : request.mark_messages_deleted,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/{user_id}/deactivate', pathParams, undefined, body);\n            (_21 = decoders.DeactivateUserResponse) === null || _21 === void 0 ? void 0 : _21.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.exportUser = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _22;\n            const pathParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/users/{user_id}/export', pathParams, undefined);\n            (_22 = decoders.ExportUserResponse) === null || _22 === void 0 ? void 0 : _22.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.reactivateUser = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _23;\n            const pathParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const body = {\n                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                restore_messages: request === null || request === void 0 ? void 0 : request.restore_messages,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/users/{user_id}/reactivate', pathParams, undefined, body);\n            (_23 = decoders.ReactivateUserResponse) === null || _23 === void 0 ? void 0 : _23.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n    }\n}\n\nclass VideoApi extends BaseApi {\n    constructor() {\n        super(...arguments);\n        this.queryCallMembers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const body = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                type: request === null || request === void 0 ? void 0 : request.type,\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/members', undefined, undefined, body);\n            (_a = decoders.QueryCallMembersResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryCallStats = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/stats', undefined, undefined, body);\n            (_b = decoders.QueryCallStatsResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getCall = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _c;\n            const queryParams = {\n                members_limit: request === null || request === void 0 ? void 0 : request.members_limit,\n                ring: request === null || request === void 0 ? void 0 : request.ring,\n                notify: request === null || request === void 0 ? void 0 : request.notify,\n                video: request === null || request === void 0 ? void 0 : request.video,\n            };\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}', pathParams, queryParams);\n            (_c = decoders.GetCallResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateCall = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _d;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                starts_at: request === null || request === void 0 ? void 0 : request.starts_at,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                settings_override: request === null || request === void 0 ? void 0 : request.settings_override,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body);\n            (_d = decoders.UpdateCallResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getOrCreateCall = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _e;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                members_limit: request === null || request === void 0 ? void 0 : request.members_limit,\n                notify: request === null || request === void 0 ? void 0 : request.notify,\n                ring: request === null || request === void 0 ? void 0 : request.ring,\n                video: request === null || request === void 0 ? void 0 : request.video,\n                data: request === null || request === void 0 ? void 0 : request.data,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body);\n            (_e = decoders.GetOrCreateCallResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.blockUser = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _f;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/block', pathParams, undefined, body);\n            (_f = decoders.BlockUserResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteCall = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _g;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                hard: request === null || request === void 0 ? void 0 : request.hard,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/delete', pathParams, undefined, body);\n            (_g = decoders.DeleteCallResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.sendCallEvent = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _h;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/event', pathParams, undefined, body);\n            (_h = decoders.SendCallEventResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.collectUserFeedback = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _j;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                session: request === null || request === void 0 ? void 0 : request.session,\n            };\n            const body = {\n                rating: request === null || request === void 0 ? void 0 : request.rating,\n                sdk: request === null || request === void 0 ? void 0 : request.sdk,\n                sdk_version: request === null || request === void 0 ? void 0 : request.sdk_version,\n                user_session_id: request === null || request === void 0 ? void 0 : request.user_session_id,\n                reason: request === null || request === void 0 ? void 0 : request.reason,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/feedback/{session}', pathParams, undefined, body);\n            (_j = decoders.CollectUserFeedbackResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.goLive = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _k;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                recording_storage_name: request === null || request === void 0 ? void 0 : request.recording_storage_name,\n                start_hls: request === null || request === void 0 ? void 0 : request.start_hls,\n                start_recording: request === null || request === void 0 ? void 0 : request.start_recording,\n                start_rtmp_broadcasts: request === null || request === void 0 ? void 0 : request.start_rtmp_broadcasts,\n                start_transcription: request === null || request === void 0 ? void 0 : request.start_transcription,\n                transcription_storage_name: request === null || request === void 0 ? void 0 : request.transcription_storage_name,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/go_live', pathParams, undefined, body);\n            (_k = decoders.GoLiveResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.endCall = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _l;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mark_ended', pathParams, undefined);\n            (_l = decoders.EndCallResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateCallMembers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _m;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                remove_members: request === null || request === void 0 ? void 0 : request.remove_members,\n                update_members: request === null || request === void 0 ? void 0 : request.update_members,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/members', pathParams, undefined, body);\n            (_m = decoders.UpdateCallMembersResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.muteUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _o;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                audio: request === null || request === void 0 ? void 0 : request.audio,\n                mute_all_users: request === null || request === void 0 ? void 0 : request.mute_all_users,\n                muted_by_id: request === null || request === void 0 ? void 0 : request.muted_by_id,\n                screenshare: request === null || request === void 0 ? void 0 : request.screenshare,\n                screenshare_audio: request === null || request === void 0 ? void 0 : request.screenshare_audio,\n                video: request === null || request === void 0 ? void 0 : request.video,\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n                muted_by: request === null || request === void 0 ? void 0 : request.muted_by,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mute_users', pathParams, undefined, body);\n            (_o = decoders.MuteUsersResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.videoPin = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _p;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                session_id: request === null || request === void 0 ? void 0 : request.session_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/pin', pathParams, undefined, body);\n            (_p = decoders.PinResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listRecordings = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _q;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/recordings', pathParams, undefined);\n            (_q = decoders.ListRecordingsResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.startRTMPBroadcasts = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _r;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                broadcasts: request === null || request === void 0 ? void 0 : request.broadcasts,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts', pathParams, undefined, body);\n            (_r = decoders.StartRTMPBroadcastsResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopAllRTMPBroadcasts = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _s;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/stop', pathParams, undefined);\n            (_s = decoders.StopAllRTMPBroadcastsResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopRTMPBroadcast = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _t;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {};\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/{name}/stop', pathParams, undefined, body);\n            (_t = decoders.StopRTMPBroadcastsResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.startHLSBroadcasting = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _u;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_broadcasting', pathParams, undefined);\n            (_u = decoders.StartHLSBroadcastingResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.startRecording = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _v;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                recording_external_storage: request === null || request === void 0 ? void 0 : request.recording_external_storage,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_recording', pathParams, undefined, body);\n            (_v = decoders.StartRecordingResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.startTranscription = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _w;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                transcription_external_storage: request === null || request === void 0 ? void 0 : request.transcription_external_storage,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_transcription', pathParams, undefined, body);\n            (_w = decoders.StartTranscriptionResponse) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getCallStats = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _x;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                session: request === null || request === void 0 ? void 0 : request.session,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/stats/{session}', pathParams, undefined);\n            (_x = decoders.GetCallStatsResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopHLSBroadcasting = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _y;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_broadcasting', pathParams, undefined);\n            (_y = decoders.StopHLSBroadcastingResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopLive = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _z;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_live', pathParams, undefined);\n            (_z = decoders.StopLiveResponse) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopRecording = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _0;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_recording', pathParams, undefined);\n            (_0 = decoders.StopRecordingResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.stopTranscription = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _1;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_transcription', pathParams, undefined);\n            (_1 = decoders.StopTranscriptionResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listTranscriptions = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _2;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/transcriptions', pathParams, undefined);\n            (_2 = decoders.ListTranscriptionsResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unblockUser = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _3;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unblock', pathParams, undefined, body);\n            (_3 = decoders.UnblockUserResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.videoUnpin = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _4;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                session_id: request === null || request === void 0 ? void 0 : request.session_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unpin', pathParams, undefined, body);\n            (_4 = decoders.UnpinResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateUserPermissions = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _5;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                grant_permissions: request === null || request === void 0 ? void 0 : request.grant_permissions,\n                revoke_permissions: request === null || request === void 0 ? void 0 : request.revoke_permissions,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/user_permissions', pathParams, undefined, body);\n            (_5 = decoders.UpdateUserPermissionsResponse) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteRecording = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _6;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                session: request === null || request === void 0 ? void 0 : request.session,\n                filename: request === null || request === void 0 ? void 0 : request.filename,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/recordings/{filename}', pathParams, undefined);\n            (_6 = decoders.DeleteRecordingResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteTranscription = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _7;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                session: request === null || request === void 0 ? void 0 : request.session,\n                filename: request === null || request === void 0 ? void 0 : request.filename,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/transcriptions/{filename}', pathParams, undefined);\n            (_7 = decoders.DeleteTranscriptionResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryCalls = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _8;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/calls', undefined, undefined, body);\n            (_8 = decoders.QueryCallsResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listCallTypes = () => __awaiter(this, void 0, void 0, function* () {\n            var _9;\n            const response = yield this.sendRequest('GET', '/api/v2/video/calltypes', undefined, undefined);\n            (_9 = decoders.ListCallTypeResponse) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createCallType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _10;\n            const body = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n                external_storage: request === null || request === void 0 ? void 0 : request.external_storage,\n                grants: request === null || request === void 0 ? void 0 : request.grants,\n                notification_settings: request === null || request === void 0 ? void 0 : request.notification_settings,\n                settings: request === null || request === void 0 ? void 0 : request.settings,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/video/calltypes', undefined, undefined, body);\n            (_10 = decoders.CreateCallTypeResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteCallType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _11;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/video/calltypes/{name}', pathParams, undefined);\n            (_11 = decoders.Response) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getCallType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _12;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/video/calltypes/{name}', pathParams, undefined);\n            (_12 = decoders.GetCallTypeResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateCallType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _13;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {\n                external_storage: request === null || request === void 0 ? void 0 : request.external_storage,\n                grants: request === null || request === void 0 ? void 0 : request.grants,\n                notification_settings: request === null || request === void 0 ? void 0 : request.notification_settings,\n                settings: request === null || request === void 0 ? void 0 : request.settings,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/video/calltypes/{name}', pathParams, undefined, body);\n            (_13 = decoders.UpdateCallTypeResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getEdges = () => __awaiter(this, void 0, void 0, function* () {\n            var _14;\n            const response = yield this.sendRequest('GET', '/api/v2/video/edges', undefined, undefined);\n            (_14 = decoders.GetEdgesResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n    }\n}\n\nclass CallApi {\n    constructor(videoApi, type, id) {\n        this.videoApi = videoApi;\n        this.type = type;\n        this.id = id;\n        this.get = (request) => {\n            return this.videoApi.getCall(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.update = (request) => {\n            return this.videoApi.updateCall(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.getOrCreate = (request) => {\n            return this.videoApi.getOrCreateCall(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.blockUser = (request) => {\n            return this.videoApi.blockUser(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.delete = (request) => {\n            return this.videoApi.deleteCall(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.sendCallEvent = (request) => {\n            return this.videoApi.sendCallEvent(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.collectUserFeedback = (request) => {\n            return this.videoApi.collectUserFeedback(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.goLive = (request) => {\n            return this.videoApi.goLive(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.end = () => {\n            return this.videoApi.endCall({ id: this.id, type: this.type });\n        };\n        this.updateCallMembers = (request) => {\n            return this.videoApi.updateCallMembers(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.muteUsers = (request) => {\n            return this.videoApi.muteUsers(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.videoPin = (request) => {\n            return this.videoApi.videoPin(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.listRecordings = () => {\n            return this.videoApi.listRecordings({ id: this.id, type: this.type });\n        };\n        this.startRTMPBroadcasts = (request) => {\n            return this.videoApi.startRTMPBroadcasts(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.stopAllRTMPBroadcasts = () => {\n            return this.videoApi.stopAllRTMPBroadcasts({\n                id: this.id,\n                type: this.type,\n            });\n        };\n        this.stopRTMPBroadcast = (request) => {\n            return this.videoApi.stopRTMPBroadcast(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.startHLSBroadcasting = () => {\n            return this.videoApi.startHLSBroadcasting({ id: this.id, type: this.type });\n        };\n        this.startRecording = (request) => {\n            return this.videoApi.startRecording(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.startTranscription = (request) => {\n            return this.videoApi.startTranscription(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.getCallStats = (request) => {\n            return this.videoApi.getCallStats(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.stopHLSBroadcasting = () => {\n            return this.videoApi.stopHLSBroadcasting({ id: this.id, type: this.type });\n        };\n        this.stopLive = () => {\n            return this.videoApi.stopLive({ id: this.id, type: this.type });\n        };\n        this.stopRecording = () => {\n            return this.videoApi.stopRecording({ id: this.id, type: this.type });\n        };\n        this.stopTranscription = () => {\n            return this.videoApi.stopTranscription({ id: this.id, type: this.type });\n        };\n        this.listTranscriptions = () => {\n            return this.videoApi.listTranscriptions({ id: this.id, type: this.type });\n        };\n        this.unblockUser = (request) => {\n            return this.videoApi.unblockUser(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.videoUnpin = (request) => {\n            return this.videoApi.videoUnpin(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.updateUserPermissions = (request) => {\n            return this.videoApi.updateUserPermissions(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.deleteRecording = (request) => {\n            return this.videoApi.deleteRecording(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.deleteTranscription = (request) => {\n            return this.videoApi.deleteTranscription(Object.assign({ id: this.id, type: this.type }, request));\n        };\n    }\n}\n\nclass StreamCall extends CallApi {\n    constructor() {\n        super(...arguments);\n        this.create = this.getOrCreate;\n        this.queryMembers = (request) => {\n            return this.videoApi.queryCallMembers(Object.assign({ id: this.id, type: this.type }, (request !== null && request !== void 0 ? request : {})));\n        };\n    }\n    get cid() {\n        return `${this.type}:${this.id}`;\n    }\n}\n\nclass StreamVideoClient extends VideoApi {\n    constructor() {\n        super(...arguments);\n        this.call = (type, id) => {\n            return new StreamCall(this, type, id);\n        };\n    }\n}\n\nclass ChatApi extends BaseApi {\n    constructor() {\n        super(...arguments);\n        this.queryChannels = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,\n                message_limit: request === null || request === void 0 ? void 0 : request.message_limit,\n                offset: request === null || request === void 0 ? void 0 : request.offset,\n                state: request === null || request === void 0 ? void 0 : request.state,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels', undefined, undefined, body);\n            (_a = decoders.QueryChannelsResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteChannels = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            const body = {\n                cids: request === null || request === void 0 ? void 0 : request.cids,\n                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/delete', undefined, undefined, body);\n            (_b = decoders.DeleteChannelsResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.markChannelsRead = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _c;\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                read_by_channel: request === null || request === void 0 ? void 0 : request.read_by_channel,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/read', undefined, undefined, body);\n            (_c = decoders.MarkReadResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getOrCreateDistinctChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _d;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n            };\n            const body = {\n                hide_for_creator: request === null || request === void 0 ? void 0 : request.hide_for_creator,\n                state: request === null || request === void 0 ? void 0 : request.state,\n                thread_unread_counts: request === null || request === void 0 ? void 0 : request.thread_unread_counts,\n                data: request === null || request === void 0 ? void 0 : request.data,\n                members: request === null || request === void 0 ? void 0 : request.members,\n                messages: request === null || request === void 0 ? void 0 : request.messages,\n                watchers: request === null || request === void 0 ? void 0 : request.watchers,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/query', pathParams, undefined, body);\n            (_d = decoders.ChannelStateResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _e;\n            const queryParams = {\n                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,\n            };\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}', pathParams, queryParams);\n            (_e = decoders.DeleteChannelResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateChannelPartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _f;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                unset: request === null || request === void 0 ? void 0 : request.unset,\n                set: request === null || request === void 0 ? void 0 : request.set,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body);\n            (_f = decoders.UpdateChannelPartialResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _g;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                accept_invite: request === null || request === void 0 ? void 0 : request.accept_invite,\n                cooldown: request === null || request === void 0 ? void 0 : request.cooldown,\n                hide_history: request === null || request === void 0 ? void 0 : request.hide_history,\n                reject_invite: request === null || request === void 0 ? void 0 : request.reject_invite,\n                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                add_members: request === null || request === void 0 ? void 0 : request.add_members,\n                add_moderators: request === null || request === void 0 ? void 0 : request.add_moderators,\n                assign_roles: request === null || request === void 0 ? void 0 : request.assign_roles,\n                demote_moderators: request === null || request === void 0 ? void 0 : request.demote_moderators,\n                invites: request === null || request === void 0 ? void 0 : request.invites,\n                remove_members: request === null || request === void 0 ? void 0 : request.remove_members,\n                data: request === null || request === void 0 ? void 0 : request.data,\n                message: request === null || request === void 0 ? void 0 : request.message,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body);\n            (_g = decoders.UpdateChannelResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.sendEvent = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _h;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                event: request === null || request === void 0 ? void 0 : request.event,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/event', pathParams, undefined, body);\n            (_h = decoders.EventResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteFile = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _j;\n            const queryParams = {\n                url: request === null || request === void 0 ? void 0 : request.url,\n            };\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/file', pathParams, queryParams);\n            (_j = decoders.Response) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.uploadFile = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _k;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                file: request === null || request === void 0 ? void 0 : request.file,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/file', pathParams, undefined, body);\n            (_k = decoders.FileUploadResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.hideChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _l;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                clear_history: request === null || request === void 0 ? void 0 : request.clear_history,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/hide', pathParams, undefined, body);\n            (_l = decoders.HideChannelResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteImage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _m;\n            const queryParams = {\n                url: request === null || request === void 0 ? void 0 : request.url,\n            };\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/image', pathParams, queryParams);\n            (_m = decoders.Response) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.uploadImage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _o;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                file: request === null || request === void 0 ? void 0 : request.file,\n                upload_sizes: request === null || request === void 0 ? void 0 : request.upload_sizes,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/image', pathParams, undefined, body);\n            (_o = decoders.ImageUploadResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateMemberPartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _p;\n            const pathParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                unset: request === null || request === void 0 ? void 0 : request.unset,\n                set: request === null || request === void 0 ? void 0 : request.set,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}/member/{user_id}', pathParams, undefined, body);\n            (_p = decoders.UpdateMemberPartialResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.sendMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _q;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                message: request === null || request === void 0 ? void 0 : request.message,\n                force_moderation: request === null || request === void 0 ? void 0 : request.force_moderation,\n                keep_channel_hidden: request === null || request === void 0 ? void 0 : request.keep_channel_hidden,\n                pending: request === null || request === void 0 ? void 0 : request.pending,\n                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,\n                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,\n                pending_message_metadata: request === null || request === void 0 ? void 0 : request.pending_message_metadata,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/message', pathParams, undefined, body);\n            (_q = decoders.SendMessageResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getManyMessages = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _r;\n            const queryParams = {\n                ids: request === null || request === void 0 ? void 0 : request.ids,\n            };\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/channels/{type}/{id}/messages', pathParams, queryParams);\n            (_r = decoders.GetManyMessagesResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getOrCreateChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _s;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                hide_for_creator: request === null || request === void 0 ? void 0 : request.hide_for_creator,\n                state: request === null || request === void 0 ? void 0 : request.state,\n                thread_unread_counts: request === null || request === void 0 ? void 0 : request.thread_unread_counts,\n                data: request === null || request === void 0 ? void 0 : request.data,\n                members: request === null || request === void 0 ? void 0 : request.members,\n                messages: request === null || request === void 0 ? void 0 : request.messages,\n                watchers: request === null || request === void 0 ? void 0 : request.watchers,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/query', pathParams, undefined, body);\n            (_s = decoders.ChannelStateResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.markRead = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _t;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n                thread_id: request === null || request === void 0 ? void 0 : request.thread_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/read', pathParams, undefined, body);\n            (_t = decoders.MarkReadResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.showChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _u;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/show', pathParams, undefined, body);\n            (_u = decoders.ShowChannelResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.truncateChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _v;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,\n                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,\n                truncated_at: request === null || request === void 0 ? void 0 : request.truncated_at,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                message: request === null || request === void 0 ? void 0 : request.message,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/truncate', pathParams, undefined, body);\n            (_v = decoders.TruncateChannelResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.markUnread = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _w;\n            const pathParams = {\n                type: request === null || request === void 0 ? void 0 : request.type,\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n                thread_id: request === null || request === void 0 ? void 0 : request.thread_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/unread', pathParams, undefined, body);\n            (_w = decoders.Response) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listChannelTypes = () => __awaiter(this, void 0, void 0, function* () {\n            var _x;\n            const response = yield this.sendRequest('GET', '/api/v2/chat/channeltypes', undefined, undefined);\n            (_x = decoders.ListChannelTypesResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createChannelType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _y;\n            const body = {\n                automod: request === null || request === void 0 ? void 0 : request.automod,\n                automod_behavior: request === null || request === void 0 ? void 0 : request.automod_behavior,\n                max_message_length: request === null || request === void 0 ? void 0 : request.max_message_length,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                blocklist: request === null || request === void 0 ? void 0 : request.blocklist,\n                blocklist_behavior: request === null || request === void 0 ? void 0 : request.blocklist_behavior,\n                connect_events: request === null || request === void 0 ? void 0 : request.connect_events,\n                custom_events: request === null || request === void 0 ? void 0 : request.custom_events,\n                mark_messages_pending: request === null || request === void 0 ? void 0 : request.mark_messages_pending,\n                message_retention: request === null || request === void 0 ? void 0 : request.message_retention,\n                mutes: request === null || request === void 0 ? void 0 : request.mutes,\n                partition_size: request === null || request === void 0 ? void 0 : request.partition_size,\n                partition_ttl: request === null || request === void 0 ? void 0 : request.partition_ttl,\n                polls: request === null || request === void 0 ? void 0 : request.polls,\n                push_notifications: request === null || request === void 0 ? void 0 : request.push_notifications,\n                reactions: request === null || request === void 0 ? void 0 : request.reactions,\n                read_events: request === null || request === void 0 ? void 0 : request.read_events,\n                replies: request === null || request === void 0 ? void 0 : request.replies,\n                search: request === null || request === void 0 ? void 0 : request.search,\n                typing_events: request === null || request === void 0 ? void 0 : request.typing_events,\n                uploads: request === null || request === void 0 ? void 0 : request.uploads,\n                url_enrichment: request === null || request === void 0 ? void 0 : request.url_enrichment,\n                blocklists: request === null || request === void 0 ? void 0 : request.blocklists,\n                commands: request === null || request === void 0 ? void 0 : request.commands,\n                permissions: request === null || request === void 0 ? void 0 : request.permissions,\n                grants: request === null || request === void 0 ? void 0 : request.grants,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/channeltypes', undefined, undefined, body);\n            (_y = decoders.CreateChannelTypeResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteChannelType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _z;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);\n            (_z = decoders.Response) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getChannelType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _0;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);\n            (_0 = decoders.GetChannelTypeResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateChannelType = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _1;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {\n                automod: request === null || request === void 0 ? void 0 : request.automod,\n                automod_behavior: request === null || request === void 0 ? void 0 : request.automod_behavior,\n                max_message_length: request === null || request === void 0 ? void 0 : request.max_message_length,\n                blocklist: request === null || request === void 0 ? void 0 : request.blocklist,\n                blocklist_behavior: request === null || request === void 0 ? void 0 : request.blocklist_behavior,\n                connect_events: request === null || request === void 0 ? void 0 : request.connect_events,\n                custom_events: request === null || request === void 0 ? void 0 : request.custom_events,\n                mark_messages_pending: request === null || request === void 0 ? void 0 : request.mark_messages_pending,\n                mutes: request === null || request === void 0 ? void 0 : request.mutes,\n                partition_size: request === null || request === void 0 ? void 0 : request.partition_size,\n                partition_ttl: request === null || request === void 0 ? void 0 : request.partition_ttl,\n                polls: request === null || request === void 0 ? void 0 : request.polls,\n                push_notifications: request === null || request === void 0 ? void 0 : request.push_notifications,\n                quotes: request === null || request === void 0 ? void 0 : request.quotes,\n                reactions: request === null || request === void 0 ? void 0 : request.reactions,\n                read_events: request === null || request === void 0 ? void 0 : request.read_events,\n                reminders: request === null || request === void 0 ? void 0 : request.reminders,\n                replies: request === null || request === void 0 ? void 0 : request.replies,\n                search: request === null || request === void 0 ? void 0 : request.search,\n                typing_events: request === null || request === void 0 ? void 0 : request.typing_events,\n                uploads: request === null || request === void 0 ? void 0 : request.uploads,\n                url_enrichment: request === null || request === void 0 ? void 0 : request.url_enrichment,\n                allowed_flag_reasons: request === null || request === void 0 ? void 0 : request.allowed_flag_reasons,\n                blocklists: request === null || request === void 0 ? void 0 : request.blocklists,\n                commands: request === null || request === void 0 ? void 0 : request.commands,\n                permissions: request === null || request === void 0 ? void 0 : request.permissions,\n                automod_thresholds: request === null || request === void 0 ? void 0 : request.automod_thresholds,\n                grants: request === null || request === void 0 ? void 0 : request.grants,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/chat/channeltypes/{name}', pathParams, undefined, body);\n            (_1 = decoders.UpdateChannelTypeResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.listCommands = () => __awaiter(this, void 0, void 0, function* () {\n            var _2;\n            const response = yield this.sendRequest('GET', '/api/v2/chat/commands', undefined, undefined);\n            (_2 = decoders.ListCommandsResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createCommand = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _3;\n            const body = {\n                description: request === null || request === void 0 ? void 0 : request.description,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                args: request === null || request === void 0 ? void 0 : request.args,\n                set: request === null || request === void 0 ? void 0 : request.set,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/commands', undefined, undefined, body);\n            (_3 = decoders.CreateCommandResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteCommand = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _4;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/commands/{name}', pathParams, undefined);\n            (_4 = decoders.DeleteCommandResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getCommand = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _5;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/commands/{name}', pathParams, undefined);\n            (_5 = decoders.GetCommandResponse) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateCommand = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _6;\n            const pathParams = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n            };\n            const body = {\n                description: request === null || request === void 0 ? void 0 : request.description,\n                args: request === null || request === void 0 ? void 0 : request.args,\n                set: request === null || request === void 0 ? void 0 : request.set,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/chat/commands/{name}', pathParams, undefined, body);\n            (_6 = decoders.UpdateCommandResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.exportChannels = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _7;\n            const body = {\n                channels: request === null || request === void 0 ? void 0 : request.channels,\n                clear_deleted_message_text: request === null || request === void 0 ? void 0 : request.clear_deleted_message_text,\n                export_users: request === null || request === void 0 ? void 0 : request.export_users,\n                include_soft_deleted_channels: request === null || request === void 0 ? void 0 : request.include_soft_deleted_channels,\n                include_truncated_messages: request === null || request === void 0 ? void 0 : request.include_truncated_messages,\n                version: request === null || request === void 0 ? void 0 : request.version,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/export_channels', undefined, undefined, body);\n            (_7 = decoders.ExportChannelsResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getExportChannelsStatus = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _8;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/export_channels/{id}', pathParams, undefined);\n            (_8 = decoders.GetExportChannelsStatusResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryMembers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _9;\n            const queryParams = {\n                payload: request === null || request === void 0 ? void 0 : request.payload,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/members', undefined, queryParams);\n            (_9 = decoders.MembersResponse) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryMessageHistory = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _10;\n            const body = {\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/history', undefined, undefined, body);\n            (_10 = decoders.QueryMessageHistoryResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _11;\n            const queryParams = {\n                hard: request === null || request === void 0 ? void 0 : request.hard,\n                deleted_by: request === null || request === void 0 ? void 0 : request.deleted_by,\n            };\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{id}', pathParams, queryParams);\n            (_11 = decoders.DeleteMessageResponse) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _12;\n            const queryParams = {\n                show_deleted_message: request === null || request === void 0 ? void 0 : request.show_deleted_message,\n            };\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{id}', pathParams, queryParams);\n            (_12 = decoders.GetMessageResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _13;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                message: request === null || request === void 0 ? void 0 : request.message,\n                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}', pathParams, undefined, body);\n            (_13 = decoders.UpdateMessageResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateMessagePartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _14;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                unset: request === null || request === void 0 ? void 0 : request.unset,\n                set: request === null || request === void 0 ? void 0 : request.set,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/chat/messages/{id}', pathParams, undefined, body);\n            (_14 = decoders.UpdateMessagePartialResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.runMessageAction = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _15;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                form_data: request === null || request === void 0 ? void 0 : request.form_data,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/action', pathParams, undefined, body);\n            (_15 = decoders.MessageResponse) === null || _15 === void 0 ? void 0 : _15.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.commitMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _16;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {};\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/commit', pathParams, undefined, body);\n            (_16 = decoders.MessageResponse) === null || _16 === void 0 ? void 0 : _16.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.sendReaction = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _17;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                reaction: request === null || request === void 0 ? void 0 : request.reaction,\n                enforce_unique: request === null || request === void 0 ? void 0 : request.enforce_unique,\n                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/reaction', pathParams, undefined, body);\n            (_17 = decoders.SendReactionResponse) === null || _17 === void 0 ? void 0 : _17.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deleteReaction = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _18;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                type: request === null || request === void 0 ? void 0 : request.type,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{id}/reaction/{type}', pathParams, queryParams);\n            (_18 = decoders.ReactionRemovalResponse) === null || _18 === void 0 ? void 0 : _18.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getReactions = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _19;\n            const queryParams = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                offset: request === null || request === void 0 ? void 0 : request.offset,\n            };\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{id}/reactions', pathParams, queryParams);\n            (_19 = decoders.GetReactionsResponse) === null || _19 === void 0 ? void 0 : _19.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryReactions = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _20;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/reactions', pathParams, undefined, body);\n            (_20 = decoders.QueryReactionsResponse) === null || _20 === void 0 ? void 0 : _20.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.translateMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _21;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                language: request === null || request === void 0 ? void 0 : request.language,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/translate', pathParams, undefined, body);\n            (_21 = decoders.MessageResponse) === null || _21 === void 0 ? void 0 : _21.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.undeleteMessage = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _22;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const body = {\n                message: request === null || request === void 0 ? void 0 : request.message,\n                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/undelete', pathParams, undefined, body);\n            (_22 = decoders.UpdateMessageResponse) === null || _22 === void 0 ? void 0 : _22.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.castPollVote = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _23;\n            const pathParams = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n                vote: request === null || request === void 0 ? void 0 : request.vote,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote', pathParams, undefined, body);\n            (_23 = decoders.PollVoteResponse) === null || _23 === void 0 ? void 0 : _23.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.removePollVote = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _24;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n                vote_id: request === null || request === void 0 ? void 0 : request.vote_id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote/{vote_id}', pathParams, queryParams);\n            (_24 = decoders.PollVoteResponse) === null || _24 === void 0 ? void 0 : _24.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getReplies = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _25;\n            const queryParams = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                offset: request === null || request === void 0 ? void 0 : request.offset,\n                id_gte: request === null || request === void 0 ? void 0 : request.id_gte,\n                id_gt: request === null || request === void 0 ? void 0 : request.id_gt,\n                id_lte: request === null || request === void 0 ? void 0 : request.id_lte,\n                id_lt: request === null || request === void 0 ? void 0 : request.id_lt,\n                created_at_after_or_equal: request === null || request === void 0 ? void 0 : request.created_at_after_or_equal,\n                created_at_after: request === null || request === void 0 ? void 0 : request.created_at_after,\n                created_at_before_or_equal: request === null || request === void 0 ? void 0 : request.created_at_before_or_equal,\n                created_at_before: request === null || request === void 0 ? void 0 : request.created_at_before,\n                id_around: request === null || request === void 0 ? void 0 : request.id_around,\n                created_at_around: request === null || request === void 0 ? void 0 : request.created_at_around,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n            };\n            const pathParams = {\n                parent_id: request === null || request === void 0 ? void 0 : request.parent_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{parent_id}/replies', pathParams, queryParams);\n            (_25 = decoders.GetRepliesResponse) === null || _25 === void 0 ? void 0 : _25.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryMessageFlags = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _26;\n            const queryParams = {\n                payload: request === null || request === void 0 ? void 0 : request.payload,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/moderation/flags/message', undefined, queryParams);\n            (_26 = decoders.QueryMessageFlagsResponse) === null || _26 === void 0 ? void 0 : _26.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.muteChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _27;\n            const body = {\n                expiration: request === null || request === void 0 ? void 0 : request.expiration,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                channel_cids: request === null || request === void 0 ? void 0 : request.channel_cids,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/moderation/mute/channel', undefined, undefined, body);\n            (_27 = decoders.MuteChannelResponse) === null || _27 === void 0 ? void 0 : _27.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unmuteChannel = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _28;\n            const body = {\n                expiration: request === null || request === void 0 ? void 0 : request.expiration,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                channel_cids: request === null || request === void 0 ? void 0 : request.channel_cids,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/moderation/unmute/channel', undefined, undefined, body);\n            (_28 = decoders.UnmuteResponse) === null || _28 === void 0 ? void 0 : _28.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createPoll = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _29;\n            const body = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n                allow_answers: request === null || request === void 0 ? void 0 : request.allow_answers,\n                allow_user_suggested_options: request === null || request === void 0 ? void 0 : request.allow_user_suggested_options,\n                description: request === null || request === void 0 ? void 0 : request.description,\n                enforce_unique_vote: request === null || request === void 0 ? void 0 : request.enforce_unique_vote,\n                id: request === null || request === void 0 ? void 0 : request.id,\n                is_closed: request === null || request === void 0 ? void 0 : request.is_closed,\n                max_votes_allowed: request === null || request === void 0 ? void 0 : request.max_votes_allowed,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                voting_visibility: request === null || request === void 0 ? void 0 : request.voting_visibility,\n                options: request === null || request === void 0 ? void 0 : request.options,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/polls', undefined, undefined, body);\n            (_29 = decoders.PollResponse) === null || _29 === void 0 ? void 0 : _29.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updatePoll = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _30;\n            const body = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                allow_answers: request === null || request === void 0 ? void 0 : request.allow_answers,\n                allow_user_suggested_options: request === null || request === void 0 ? void 0 : request.allow_user_suggested_options,\n                description: request === null || request === void 0 ? void 0 : request.description,\n                enforce_unique_vote: request === null || request === void 0 ? void 0 : request.enforce_unique_vote,\n                is_closed: request === null || request === void 0 ? void 0 : request.is_closed,\n                max_votes_allowed: request === null || request === void 0 ? void 0 : request.max_votes_allowed,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                voting_visibility: request === null || request === void 0 ? void 0 : request.voting_visibility,\n                options: request === null || request === void 0 ? void 0 : request.options,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/chat/polls', undefined, undefined, body);\n            (_30 = decoders.PollResponse) === null || _30 === void 0 ? void 0 : _30.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryPolls = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _31;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/query', undefined, queryParams, body);\n            (_31 = decoders.QueryPollsResponse) === null || _31 === void 0 ? void 0 : _31.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deletePoll = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _32;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/polls/{poll_id}', pathParams, queryParams);\n            (_32 = decoders.Response) === null || _32 === void 0 ? void 0 : _32.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getPoll = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _33;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/polls/{poll_id}', pathParams, queryParams);\n            (_33 = decoders.PollResponse) === null || _33 === void 0 ? void 0 : _33.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updatePollPartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _34;\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                unset: request === null || request === void 0 ? void 0 : request.unset,\n                set: request === null || request === void 0 ? void 0 : request.set,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/chat/polls/{poll_id}', pathParams, undefined, body);\n            (_34 = decoders.PollResponse) === null || _34 === void 0 ? void 0 : _34.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.createPollOption = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _35;\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const body = {\n                text: request === null || request === void 0 ? void 0 : request.text,\n                position: request === null || request === void 0 ? void 0 : request.position,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/{poll_id}/options', pathParams, undefined, body);\n            (_35 = decoders.PollOptionResponse) === null || _35 === void 0 ? void 0 : _35.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updatePollOption = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _36;\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const body = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n                text: request === null || request === void 0 ? void 0 : request.text,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PUT', '/api/v2/chat/polls/{poll_id}/options', pathParams, undefined, body);\n            (_36 = decoders.PollOptionResponse) === null || _36 === void 0 ? void 0 : _36.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.deletePollOption = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _37;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n                option_id: request === null || request === void 0 ? void 0 : request.option_id,\n            };\n            const response = yield this.sendRequest('DELETE', '/api/v2/chat/polls/{poll_id}/options/{option_id}', pathParams, queryParams);\n            (_37 = decoders.Response) === null || _37 === void 0 ? void 0 : _37.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getPollOption = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _38;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n                option_id: request === null || request === void 0 ? void 0 : request.option_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/polls/{poll_id}/options/{option_id}', pathParams, queryParams);\n            (_38 = decoders.PollOptionResponse) === null || _38 === void 0 ? void 0 : _38.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryPollVotes = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _39;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const pathParams = {\n                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,\n            };\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/{poll_id}/votes', pathParams, queryParams, body);\n            (_39 = decoders.PollVotesResponse) === null || _39 === void 0 ? void 0 : _39.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryBannedUsers = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _40;\n            const queryParams = {\n                payload: request === null || request === void 0 ? void 0 : request.payload,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/query_banned_users', undefined, queryParams);\n            (_40 = decoders.QueryBannedUsersResponse) === null || _40 === void 0 ? void 0 : _40.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.search = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _41;\n            const queryParams = {\n                payload: request === null || request === void 0 ? void 0 : request.payload,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/search', undefined, queryParams);\n            (_41 = decoders.SearchResponse) === null || _41 === void 0 ? void 0 : _41.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryThreads = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _42;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                participant_limit: request === null || request === void 0 ? void 0 : request.participant_limit,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                reply_limit: request === null || request === void 0 ? void 0 : request.reply_limit,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/threads', undefined, undefined, body);\n            (_42 = decoders.QueryThreadsResponse) === null || _42 === void 0 ? void 0 : _42.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getThread = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _43;\n            const queryParams = {\n                connection_id: request === null || request === void 0 ? void 0 : request.connection_id,\n                reply_limit: request === null || request === void 0 ? void 0 : request.reply_limit,\n                participant_limit: request === null || request === void 0 ? void 0 : request.participant_limit,\n                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,\n            };\n            const pathParams = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/chat/threads/{message_id}', pathParams, queryParams);\n            (_43 = decoders.GetThreadResponse) === null || _43 === void 0 ? void 0 : _43.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.updateThreadPartial = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _44;\n            const pathParams = {\n                message_id: request === null || request === void 0 ? void 0 : request.message_id,\n            };\n            const body = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                unset: request === null || request === void 0 ? void 0 : request.unset,\n                set: request === null || request === void 0 ? void 0 : request.set,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('PATCH', '/api/v2/chat/threads/{message_id}', pathParams, undefined, body);\n            (_44 = decoders.UpdateThreadPartialResponse) === null || _44 === void 0 ? void 0 : _44.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unreadCounts = () => __awaiter(this, void 0, void 0, function* () {\n            var _45;\n            const response = yield this.sendRequest('GET', '/api/v2/chat/unread', undefined, undefined);\n            (_45 = decoders.WrappedUnreadCountsResponse) === null || _45 === void 0 ? void 0 : _45.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unreadCountsBatch = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _46;\n            const body = {\n                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/unread_batch', undefined, undefined, body);\n            (_46 = decoders.UnreadCountsBatchResponse) === null || _46 === void 0 ? void 0 : _46.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.sendUserCustomEvent = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _47;\n            const pathParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n            };\n            const body = {\n                event: request === null || request === void 0 ? void 0 : request.event,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/chat/users/{user_id}/event', pathParams, undefined, body);\n            (_47 = decoders.Response) === null || _47 === void 0 ? void 0 : _47.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n    }\n}\n\nclass ChannelApi {\n    constructor(chatApi, type, id) {\n        this.chatApi = chatApi;\n        this.type = type;\n        this.id = id;\n        this.delete = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.deleteChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.updateChannelPartial = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.updateChannelPartial(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.update = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.updateChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.sendEvent = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.sendEvent(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.deleteFile = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.deleteFile(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.uploadFile = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.uploadFile(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.hide = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.hideChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.deleteImage = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.deleteImage(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.uploadImage = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.uploadImage(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.updateMemberPartial = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.updateMemberPartial(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.sendMessage = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.sendMessage(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.getManyMessages = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.getManyMessages(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.getOrCreate = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.getOrCreateChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.markRead = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.markRead(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.show = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.showChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.truncate = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.truncateChannel(Object.assign({ id: this.id, type: this.type }, request));\n        };\n        this.markUnread = (request) => {\n            if (!this.id) {\n                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n            }\n            return this.chatApi.markUnread(Object.assign({ id: this.id, type: this.type }, request));\n        };\n    }\n}\n\nclass StreamChannel extends ChannelApi {\n    constructor() {\n        super(...arguments);\n        this.getOrCreate = (channel_get_or_create_request) => {\n            if (!this.id) {\n                return this.chatApi\n                    .getOrCreateDistinctChannel(Object.assign({ type: this.type }, channel_get_or_create_request))\n                    .then((response) => {\n                    var _a;\n                    this.id = (_a = response.channel) === null || _a === void 0 ? void 0 : _a.id;\n                    return response;\n                });\n            }\n            else {\n                return this.chatApi.getOrCreateChannel(Object.assign({ id: this.id, type: this.type }, channel_get_or_create_request));\n            }\n        };\n    }\n    get cid() {\n        return `${this.type}:${this.id}`;\n    }\n    queryMembers(request) {\n        var _a;\n        return this.chatApi.queryMembers({\n            payload: Object.assign({ id: this.id, type: this.type }, ((_a = request === null || request === void 0 ? void 0 : request.payload) !== null && _a !== void 0 ? _a : { filter_conditions: {} })),\n        });\n    }\n}\n\nclass StreamChatClient extends ChatApi {\n    constructor() {\n        super(...arguments);\n        this.channel = (type, id) => {\n            return new StreamChannel(this, type, id);\n        };\n    }\n}\n\nclass ModerationApi extends BaseApi {\n    constructor() {\n        super(...arguments);\n        this.ban = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const body = {\n                target_user_id: request === null || request === void 0 ? void 0 : request.target_user_id,\n                banned_by_id: request === null || request === void 0 ? void 0 : request.banned_by_id,\n                channel_cid: request === null || request === void 0 ? void 0 : request.channel_cid,\n                ip_ban: request === null || request === void 0 ? void 0 : request.ip_ban,\n                reason: request === null || request === void 0 ? void 0 : request.reason,\n                shadow: request === null || request === void 0 ? void 0 : request.shadow,\n                timeout: request === null || request === void 0 ? void 0 : request.timeout,\n                banned_by: request === null || request === void 0 ? void 0 : request.banned_by,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/ban', undefined, undefined, body);\n            (_a = decoders.BanResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.check = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _b;\n            const body = {\n                config_key: request === null || request === void 0 ? void 0 : request.config_key,\n                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,\n                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,\n                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,\n                options: request === null || request === void 0 ? void 0 : request.options,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/check', undefined, undefined, body);\n            (_b = decoders.CheckResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.upsertConfig = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _c;\n            const body = {\n                key: request === null || request === void 0 ? void 0 : request.key,\n                async: request === null || request === void 0 ? void 0 : request.async,\n                automod_platform_circumvention_config: request === null || request === void 0 ? void 0 : request.automod_platform_circumvention_config,\n                automod_semantic_filters_config: request === null || request === void 0 ? void 0 : request.automod_semantic_filters_config,\n                automod_toxicity_config: request === null || request === void 0 ? void 0 : request.automod_toxicity_config,\n                aws_rek_og_nition_config: request === null || request === void 0 ? void 0 : request.aws_rek_og_nition_config,\n                block_list_config: request === null || request === void 0 ? void 0 : request.block_list_config,\n                bodyguard_config: request === null || request === void 0 ? void 0 : request.bodyguard_config,\n                go_og_le_vision_config: request === null || request === void 0 ? void 0 : request.go_og_le_vision_config,\n                velocity_filter_config: request === null || request === void 0 ? void 0 : request.velocity_filter_config,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/config', undefined, undefined, body);\n            (_c = decoders.UpsertConfigResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getConfig = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _d;\n            const pathParams = {\n                key: request === null || request === void 0 ? void 0 : request.key,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/config/{key}', pathParams, undefined);\n            (_d = decoders.GetConfigResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.customCheck = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _e;\n            const body = {\n                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,\n                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,\n                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,\n                name: request === null || request === void 0 ? void 0 : request.name,\n                reason: request === null || request === void 0 ? void 0 : request.reason,\n                recommended_action: request === null || request === void 0 ? void 0 : request.recommended_action,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/custom_check', undefined, undefined, body);\n            (_e = decoders.CustomCheckResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.v2DeleteTemplate = () => __awaiter(this, void 0, void 0, function* () {\n            var _f;\n            const response = yield this.sendRequest('DELETE', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);\n            (_f = decoders.DeleteModerationTemplateResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.v2QueryTemplates = () => __awaiter(this, void 0, void 0, function* () {\n            var _g;\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);\n            (_g = decoders.QueryFeedModerationTemplatesResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.v2UpsertTemplate = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _h;\n            const body = {\n                name: request === null || request === void 0 ? void 0 : request.name,\n                config: request === null || request === void 0 ? void 0 : request.config,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/feeds_moderation_template', undefined, undefined, body);\n            (_h = decoders.UpsertModerationTemplateResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.flag = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _j;\n            const body = {\n                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,\n                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,\n                reason: request === null || request === void 0 ? void 0 : request.reason,\n                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/flag', undefined, undefined, body);\n            (_j = decoders.FlagResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryModerationLogs = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _k;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/logs', undefined, undefined, body);\n            (_k = decoders.QueryModerationLogsResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getModeratorStats = () => __awaiter(this, void 0, void 0, function* () {\n            var _l;\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/moderator_stats', undefined, undefined);\n            (_l = decoders.ModeratorStatsResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.mute = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _m;\n            const body = {\n                target_ids: request === null || request === void 0 ? void 0 : request.target_ids,\n                timeout: request === null || request === void 0 ? void 0 : request.timeout,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/mute', undefined, undefined, body);\n            (_m = decoders.MuteResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getQueueStats = () => __awaiter(this, void 0, void 0, function* () {\n            var _o;\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/queue_stats', undefined, undefined);\n            (_o = decoders.QueueStatsResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryReviewQueue = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _p;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                lock_moderator_duration: request === null || request === void 0 ? void 0 : request.lock_moderator_duration,\n                lock_moderator_id: request === null || request === void 0 ? void 0 : request.lock_moderator_id,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                stats_only: request === null || request === void 0 ? void 0 : request.stats_only,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/review_queue', undefined, undefined, body);\n            (_p = decoders.QueryReviewQueueResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getReviewQueueItem = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _q;\n            const pathParams = {\n                id: request === null || request === void 0 ? void 0 : request.id,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/review_queue/{id}', pathParams, undefined);\n            (_q = decoders.GetReviewQueueItemResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.submitAction = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _r;\n            const body = {\n                action_type: request === null || request === void 0 ? void 0 : request.action_type,\n                item_id: request === null || request === void 0 ? void 0 : request.item_id,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                ban: request === null || request === void 0 ? void 0 : request.ban,\n                custom: request === null || request === void 0 ? void 0 : request.custom,\n                delete_activity: request === null || request === void 0 ? void 0 : request.delete_activity,\n                delete_message: request === null || request === void 0 ? void 0 : request.delete_message,\n                delete_reaction: request === null || request === void 0 ? void 0 : request.delete_reaction,\n                delete_user: request === null || request === void 0 ? void 0 : request.delete_user,\n                unban: request === null || request === void 0 ? void 0 : request.unban,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/submit_action', undefined, undefined, body);\n            (_r = decoders.SubmitActionResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unban = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _s;\n            const queryParams = {\n                target_user_id: request === null || request === void 0 ? void 0 : request.target_user_id,\n                channel_cid: request === null || request === void 0 ? void 0 : request.channel_cid,\n                created_by: request === null || request === void 0 ? void 0 : request.created_by,\n            };\n            const body = {\n                unbanned_by_id: request === null || request === void 0 ? void 0 : request.unbanned_by_id,\n                unbanned_by: request === null || request === void 0 ? void 0 : request.unbanned_by,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/unban', undefined, queryParams, body);\n            (_s = decoders.UnbanResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.unmute = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _t;\n            const body = {\n                target_ids: request === null || request === void 0 ? void 0 : request.target_ids,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/unmute', undefined, undefined, body);\n            (_t = decoders.UnmuteResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.queryUsageStats = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _u;\n            const body = {\n                limit: request === null || request === void 0 ? void 0 : request.limit,\n                next: request === null || request === void 0 ? void 0 : request.next,\n                prev: request === null || request === void 0 ? void 0 : request.prev,\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                sort: request === null || request === void 0 ? void 0 : request.sort,\n                filter: request === null || request === void 0 ? void 0 : request.filter,\n                user: request === null || request === void 0 ? void 0 : request.user,\n            };\n            const response = yield this.sendRequest('POST', '/api/v2/moderation/usage_stats', undefined, undefined, body);\n            (_u = decoders.QueryUsageStatsResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n        this.getUserReport = (request) => __awaiter(this, void 0, void 0, function* () {\n            var _v;\n            const queryParams = {\n                user_id: request === null || request === void 0 ? void 0 : request.user_id,\n                create_user_if_not_exists: request === null || request === void 0 ? void 0 : request.create_user_if_not_exists,\n                include_user_mutes: request === null || request === void 0 ? void 0 : request.include_user_mutes,\n                include_user_blocks: request === null || request === void 0 ? void 0 : request.include_user_blocks,\n            };\n            const response = yield this.sendRequest('GET', '/api/v2/moderation/user_report', undefined, queryParams);\n            (_v = decoders.GetUserModerationReportResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);\n            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });\n        });\n    }\n}\n\nclass StreamModerationClient extends ModerationApi {\n}\n\nclass StreamClient extends CommonApi {\n    /**\n     *\n     * @param apiKey\n     * @param secret\n     * @param config config object\n     */\n    constructor(apiKey, secret, config) {\n        var _a, _b, _c;\n        const token = JWTServerToken(secret);\n        const timeout = (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : StreamClient.DEFAULT_TIMEOUT;\n        const chatBaseUrl = (_b = config === null || config === void 0 ? void 0 : config.basePath) !== null && _b !== void 0 ? _b : 'https://chat.stream-io-api.com';\n        const videoBaseUrl = (_c = config === null || config === void 0 ? void 0 : config.basePath) !== null && _c !== void 0 ? _c : 'https://video.stream-io-api.com';\n        super({ apiKey, token, timeout, baseUrl: chatBaseUrl });\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.config = config;\n        this.options = {};\n        this.upsertUsers = (users) => {\n            const payload = {};\n            users.forEach((u) => {\n                payload[u.id] = u;\n            });\n            return this.updateUsers({ users: payload });\n        };\n        this.queryBannedUsers = (request) => {\n            return this.chat.queryBannedUsers(request);\n        };\n        /**\n         *\n         * @param payload\n         * - user_id - the id of the user the token is for\n         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided\n         * - exp - when the token expires, unix timestamp in seconds\n         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now\n         */\n        this.generateUserToken = (payload) => {\n            var _a, _b, _c;\n            const defaultIat = Math.floor((Date.now() - 1000) / 1000);\n            payload.iat = (_a = payload.iat) !== null && _a !== void 0 ? _a : defaultIat;\n            const validityInSeconds = (_b = payload.validity_in_seconds) !== null && _b !== void 0 ? _b : 60 * 60;\n            payload.exp = (_c = payload.exp) !== null && _c !== void 0 ? _c : payload.iat + validityInSeconds;\n            return JWTUserToken(this.secret, payload);\n        };\n        /**\n         *\n         * @param payload\n         * - user_id - the id of the user the token is for\n         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided\n         * - exp - when the token expires, unix timestamp in seconds\n         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now\n         */\n        this.generateCallToken = (payload) => {\n            return this.generateUserToken(payload);\n        };\n        /**\n         *\n         * @param userID\n         * @param exp\n         * @param iat deprecated, the default date will be set internally\n         * @returns\n         *\n         * @deprecated use generateUserToken instead\n         */\n        this.createToken = (userID, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {\n            const payload = {\n                user_id: userID,\n                exp,\n                iat,\n            };\n            return JWTUserToken(this.secret, payload);\n        };\n        /**\n         *\n         * @param userID\n         * @param call_cids\n         * @param exp\n         * @param iat this is deprecated, the current date will be set internally\n         * @returns\n         *\n         * @deprecated use generateCallToken instead\n         */\n        this.createCallToken = (userIdOrObject, call_cids, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {\n            const payload = {\n                exp,\n                iat,\n                call_cids,\n                user_id: typeof userIdOrObject === 'string'\n                    ? userIdOrObject\n                    : userIdOrObject.user_id,\n            };\n            if (typeof userIdOrObject === 'object' && userIdOrObject.role) {\n                payload.role = userIdOrObject.role;\n            }\n            return JWTUserToken(this.secret, payload);\n        };\n        this.verifyWebhook = (requestBody, xSignature) => {\n            const key = Buffer.from(this.secret, 'utf8');\n            const hash = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac('sha256', key)\n                .update(requestBody)\n                .digest('hex');\n            try {\n                return crypto__WEBPACK_IMPORTED_MODULE_1___default().timingSafeEqual(Buffer.from(hash), Buffer.from(xSignature));\n            }\n            catch (err) {\n                return false;\n            }\n        };\n        this.video = new StreamVideoClient({\n            apiKey,\n            token,\n            timeout,\n            baseUrl: videoBaseUrl,\n        });\n        this.chat = new StreamChatClient({\n            apiKey,\n            token,\n            timeout,\n            baseUrl: chatBaseUrl,\n        });\n        this.moderation = new StreamModerationClient({\n            apiKey,\n            token,\n            timeout,\n            baseUrl: chatBaseUrl,\n        });\n    }\n}\nStreamClient.DEFAULT_TIMEOUT = 3000;\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL25vZGUtc2RrL2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDTDtBQUNFOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxxREFBRyxZQUFZLDBEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3REFBUTtBQUNuQjtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsdUNBQXVDO0FBQ3hFLFdBQVcsd0RBQVE7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsRUFBRSxXQUFXO0FBQ3JELGlCQUFpQjtBQUNqQjtBQUNBLHVCQUF1QixjQUFjO0FBQ3JDLG9DQUFvQyxnREFBRTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCx1QkFBdUIsRUFBRSxJQUFJO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGlCQUFpQixJQUFJLG9CQUFvQjtBQUN4RztBQUNBLCtEQUErRCxXQUFXLElBQUksY0FBYztBQUM1RjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLHVCQUF1QjtBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsRUFBRSxHQUFHLG9DQUFvQztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEVBQUUsR0FBRywwQ0FBMEM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxFQUFFLEdBQUcsMEJBQTBCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELDZCQUE2Qix5Q0FBeUM7QUFDdEUsdUJBQXVCLG9DQUFvQztBQUMzRCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELDZCQUE2Qix5Q0FBeUM7QUFDdEUsdUJBQXVCLHNDQUFzQztBQUM3RCxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUNBQW1DO0FBQ3pELDJCQUEyQix3Q0FBd0M7QUFDbkUsOEJBQThCLGdEQUFnRDtBQUM5RSx1Q0FBdUMsc0NBQXNDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaURBQWlEO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELG1CQUFtQixzQ0FBc0M7QUFDekQsbUJBQW1CLGlDQUFpQztBQUNwRCxzQkFBc0Isb0NBQW9DO0FBQzFELGtCQUFrQixvQ0FBb0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsbUJBQW1CLHNDQUFzQztBQUN6RCxxQkFBcUIsc0NBQXNDO0FBQzNELG1CQUFtQix5Q0FBeUM7QUFDNUQsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHdCQUF3QixzQ0FBc0M7QUFDOUQsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNDQUFzQztBQUMzRCxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0NBQXNDO0FBQzFELHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELG9CQUFvQixzQ0FBc0M7QUFDMUQscUJBQXFCLHNDQUFzQztBQUMzRCxtQkFBbUIsNkNBQTZDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0RBQWtEO0FBQzFFLHVCQUF1Qix1Q0FBdUM7QUFDOUQscUJBQXFCLHVDQUF1QztBQUM1RCx1QkFBdUIsdUNBQXVDO0FBQzlELG9CQUFvQixzQ0FBc0M7QUFDMUQseUJBQXlCLHNDQUFzQztBQUMvRCwyQkFBMkIsc0NBQXNDO0FBQ2pFLHNCQUFzQixzQ0FBc0M7QUFDNUQseUJBQXlCLHNDQUFzQztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RCxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0NBQXNDO0FBQ2xFLHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQ0FBc0M7QUFDMUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELDJCQUEyQixzQ0FBc0M7QUFDakUsbUJBQW1CLHdDQUF3QztBQUMzRCxtQkFBbUIsd0NBQXdDO0FBQzNELGtCQUFrQix1Q0FBdUM7QUFDekQsNEJBQTRCLHVDQUF1QztBQUNuRSxzQkFBc0Isb0NBQW9DO0FBQzFELHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELG9CQUFvQixrQ0FBa0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCx1QkFBdUIsc0NBQXNDO0FBQzdELHNCQUFzQixzQ0FBc0M7QUFDNUQsOEJBQThCLHNDQUFzQztBQUNwRSw4QkFBOEIsc0NBQXNDO0FBQ3BFLGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCx1QkFBdUIsc0NBQXNDO0FBQzdELHNCQUFzQixzQ0FBc0M7QUFDNUQsOEJBQThCLHNDQUFzQztBQUNwRSw4QkFBOEIsc0NBQXNDO0FBQ3BFLGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxtQkFBbUIsc0NBQXNDO0FBQ3pELG1CQUFtQix5Q0FBeUM7QUFDNUQsZ0JBQWdCLG9DQUFvQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsZ0NBQWdDLHNDQUFzQztBQUN0RSwyQkFBMkIsc0NBQXNDO0FBQ2pFLDJCQUEyQixzQ0FBc0M7QUFDakUsd0JBQXdCLHNDQUFzQztBQUM5RCxtQkFBbUIsd0NBQXdDO0FBQzNELGtCQUFrQiwrQ0FBK0M7QUFDakUsc0JBQXNCLG9DQUFvQztBQUMxRCx3QkFBd0Isb0NBQW9DO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0NBQXdDO0FBQzNELG9CQUFvQiwwQ0FBMEM7QUFDOUQsMkJBQTJCLDBDQUEwQztBQUNyRSxtQkFBbUIsc0NBQXNDO0FBQ3pELGdDQUFnQyxzQ0FBc0M7QUFDdEUsNEJBQTRCLGlEQUFpRDtBQUM3RSxnQkFBZ0IsNENBQTRDO0FBQzVELG9CQUFvQix1Q0FBdUM7QUFDM0QsbUJBQW1CLHlDQUF5QztBQUM1RCxzQkFBc0IsdUNBQXVDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0NBQXdDO0FBQzNELG9CQUFvQiwwQ0FBMEM7QUFDOUQsMkJBQTJCLDBDQUEwQztBQUNyRSxtQkFBbUIsc0NBQXNDO0FBQ3pELGdDQUFnQyxzQ0FBc0M7QUFDdEUsNEJBQTRCLGlEQUFpRDtBQUM3RSxnQkFBZ0IsNENBQTRDO0FBQzVELG9CQUFvQix1Q0FBdUM7QUFDM0QsbUJBQW1CLHlDQUF5QztBQUM1RCxzQkFBc0IsdUNBQXVDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsb0JBQW9CLGtDQUFrQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlDQUF5QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsa0NBQWtDLDhDQUE4QztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQ0FBaUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQ0FBb0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzQ0FBc0M7QUFDM0QsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlDQUFpQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtDQUFrQztBQUN0RCxxQkFBcUIsbUNBQW1DO0FBQ3hELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0NBQXdDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQseUJBQXlCLHNDQUFzQztBQUMvRCxtQkFBbUIsaUNBQWlDO0FBQ3BELGlCQUFpQiwyQ0FBMkM7QUFDNUQsMEJBQTBCLHNDQUFzQztBQUNoRSxzQkFBc0Isc0NBQXNDO0FBQzVELHVCQUF1QixzQ0FBc0M7QUFDN0QsdUNBQXVDLHNDQUFzQztBQUM3RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkNBQTJDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMkNBQTJDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOENBQThDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQXlDO0FBQzVELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELG9CQUFvQixrQ0FBa0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdDQUF3QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0NBQW9DO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0NBQWtDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0RBQW9EO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQXlDO0FBQzVELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQ0FBbUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBMEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwQ0FBMEM7QUFDN0QsZ0JBQWdCLHlDQUF5QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkNBQTZDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0NBQW9DO0FBQzNELHNCQUFzQixtQ0FBbUM7QUFDekQsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELG1CQUFtQiw0Q0FBNEM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0Q0FBNEM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyQ0FBMkM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0Q0FBNEM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQ0FBa0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQ0FBaUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQ0FBcUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrQ0FBK0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3Q0FBd0M7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQkFBK0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0Q0FBNEM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQ0FBMEM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxnQkFBZ0Isc0NBQXNDO0FBQ3RELHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3Q0FBd0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCw0QkFBNEIsbUNBQW1DO0FBQy9ELDJCQUEyQixxQ0FBcUM7QUFDaEUseUJBQXlCLG1DQUFtQztBQUM1RCwyQkFBMkIsZ0RBQWdEO0FBQzNFLHNCQUFzQixzQ0FBc0M7QUFDNUQsbUNBQW1DLHNDQUFzQztBQUN6RSx1QkFBdUIsc0NBQXNDO0FBQzdELHFCQUFxQixzQ0FBc0M7QUFDM0QsK0JBQStCLHFDQUFxQztBQUNwRSxxQkFBcUIsb0NBQW9DO0FBQ3pELGdCQUFnQiw4QkFBOEI7QUFDOUMsMEJBQTBCLGlDQUFpQztBQUMzRCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsdUJBQXVCLHNDQUFzQztBQUM3RCx1QkFBdUIsc0NBQXNDO0FBQzdELHVCQUF1QixzQ0FBc0M7QUFDN0QsbUJBQW1CLHFDQUFxQztBQUN4RCxtQkFBbUIsaUNBQWlDO0FBQ3BELCtCQUErQixzQ0FBc0M7QUFDckUsNkJBQTZCLGlEQUFpRDtBQUM5RSx1QkFBdUIsc0NBQXNDO0FBQzdELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzQ0FBc0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxrQkFBa0Isd0NBQXdDO0FBQzFELGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCw0QkFBNEIsMkNBQTJDO0FBQ3ZFLDJCQUEyQix1Q0FBdUM7QUFDbEUseUJBQXlCLDJDQUEyQztBQUNwRSxnQkFBZ0Isc0NBQXNDO0FBQ3RELHNCQUFzQixzQ0FBc0M7QUFDNUQsbUNBQW1DLHNDQUFzQztBQUN6RSx1QkFBdUIsc0NBQXNDO0FBQzdELHFCQUFxQixzQ0FBc0M7QUFDM0QsK0JBQStCLHVDQUF1QztBQUN0RSxxQkFBcUIsc0NBQXNDO0FBQzNELGdCQUFnQiw4QkFBOEI7QUFDOUMsMEJBQTBCLGlDQUFpQztBQUMzRCwyQkFBMkIsZ0RBQWdEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsNEJBQTRCLDJDQUEyQztBQUN2RSwyQkFBMkIsdUNBQXVDO0FBQ2xFLHlCQUF5QiwyQ0FBMkM7QUFDcEUsbUJBQW1CLHlDQUF5QztBQUM1RCxnQkFBZ0Isc0NBQXNDO0FBQ3RELHNCQUFzQixzQ0FBc0M7QUFDNUQsbUNBQW1DLHNDQUFzQztBQUN6RSx1QkFBdUIsc0NBQXNDO0FBQzdELHFCQUFxQixzQ0FBc0M7QUFDM0QsK0JBQStCLHVDQUF1QztBQUN0RSxxQkFBcUIsc0NBQXNDO0FBQzNELGdCQUFnQiw4QkFBOEI7QUFDOUMsMEJBQTBCLGlDQUFpQztBQUMzRCwyQkFBMkIsZ0RBQWdEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0NBQXNDO0FBQy9ELHdCQUF3QixxQ0FBcUM7QUFDN0Qsb0JBQW9CLGlDQUFpQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1DQUFtQztBQUNwRCxvQkFBb0IsaUNBQWlDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0NBQXNDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQseUJBQXlCLHNDQUFzQztBQUMvRCxtQkFBbUIsaUNBQWlDO0FBQ3BELGlCQUFpQixtQ0FBbUM7QUFDcEQsMEJBQTBCLHNDQUFzQztBQUNoRSxzQkFBc0Isc0NBQXNDO0FBQzVELHVCQUF1QixzQ0FBc0M7QUFDN0QsOEJBQThCLGtEQUFrRDtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RCxtQkFBbUIseUNBQXlDO0FBQzVELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCwwQkFBMEIsbUNBQW1DO0FBQzdELHFCQUFxQixtQ0FBbUM7QUFDeEQsc0JBQXNCLG9DQUFvQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBDQUEwQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELHFCQUFxQiwrQ0FBK0M7QUFDcEUsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4Q0FBOEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0NBQStDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUNBQXVDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0NBQXNDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0NBQXNDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELHVCQUF1QixzQ0FBc0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5Q0FBeUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5REFBeUQ7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrREFBa0Q7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBcUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNEQUFzRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUE4QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHNEQUFzRDtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDRDQUE0QztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJDQUEyQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJDQUEyQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBDQUEwQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhDQUE4QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtDQUErQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJDQUEyQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzQ0FBc0M7QUFDbkUsNEJBQTRCLHNDQUFzQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRCxvQkFBb0Isa0NBQWtDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNDQUFzQztBQUMzRCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0NBQXNDO0FBQzNELGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxtQkFBbUIsb0NBQW9DO0FBQ3ZELGdCQUFnQiw4QkFBOEI7QUFDOUMsaUJBQWlCLGdDQUFnQztBQUNqRCx3QkFBd0Isa0NBQWtDO0FBQzFELHVCQUF1QixrQ0FBa0M7QUFDekQsdUJBQXVCLG9DQUFvQztBQUMzRCwwQkFBMEIsb0NBQW9DO0FBQzlELDZCQUE2QixrQ0FBa0M7QUFDL0QsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkNBQTZDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsNEJBQTRCLG1DQUFtQztBQUMvRCwyQkFBMkIscUNBQXFDO0FBQ2hFLHlCQUF5QixtQ0FBbUM7QUFDNUQsMkJBQTJCLGdEQUFnRDtBQUMzRSxzQkFBc0Isc0NBQXNDO0FBQzVELG1DQUFtQyxzQ0FBc0M7QUFDekUsdUJBQXVCLHNDQUFzQztBQUM3RCxxQkFBcUIsc0NBQXNDO0FBQzNELCtCQUErQixxQ0FBcUM7QUFDcEUsbUJBQW1CLHlDQUF5QztBQUM1RCxxQkFBcUIsb0NBQW9DO0FBQ3pELGdCQUFnQiw4QkFBOEI7QUFDOUMsMEJBQTBCLGlDQUFpQztBQUMzRCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQXlDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQXlDO0FBQzVELG9CQUFvQiwwQ0FBMEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5Q0FBeUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsd0JBQXdCLHNDQUFzQztBQUM5RCxrQ0FBa0Msc0NBQXNDO0FBQ3hFLDBCQUEwQixzQ0FBc0M7QUFDaEUsZ0JBQWdCLG9DQUFvQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsMkJBQTJCLHNDQUFzQztBQUNqRSwrQkFBK0IsNENBQTRDO0FBQzNFLG1CQUFtQix5Q0FBeUM7QUFDNUQsc0JBQXNCLG9DQUFvQztBQUMxRCwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsMEJBQTBCLGtDQUFrQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVELDJCQUEyQixzQ0FBc0M7QUFDakUsZ0JBQWdCLCtCQUErQjtBQUMvQywrQkFBK0IsNENBQTRDO0FBQzNFLG1CQUFtQixpQ0FBaUM7QUFDcEQsc0JBQXNCLG9DQUFvQztBQUMxRCwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsMEJBQTBCLDBDQUEwQztBQUNwRSxzQkFBc0Isc0NBQXNDO0FBQzVELDJCQUEyQixzQ0FBc0M7QUFDakUsZ0JBQWdCLCtCQUErQjtBQUMvQywrQkFBK0IsNENBQTRDO0FBQzNFLG1CQUFtQix5Q0FBeUM7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQXlDO0FBQzVELG1CQUFtQix5Q0FBeUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrQ0FBK0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzQ0FBc0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4Q0FBOEM7QUFDbEUsbUJBQW1CLDZDQUE2QztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNDQUFzQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlDQUF5QztBQUM1RCxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnREFBZ0Q7QUFDbkUsbUJBQW1CLHlDQUF5QztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHdDQUF3QztBQUMzRCxtQkFBbUIseUNBQXlDO0FBQzVELG1CQUFtQixpQ0FBaUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtDQUErQztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdDQUF3QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJDQUEyQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdDQUF3QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RCxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsOENBQThDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsbUJBQW1CLHNDQUFzQztBQUN6RCxrQkFBa0Isb0NBQW9DO0FBQ3RELGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQsc0JBQXNCLHNDQUFzQztBQUM1RCxtQkFBbUIsc0NBQXNDO0FBQ3pELGtCQUFrQixzQ0FBc0M7QUFDeEQsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNDQUFzQztBQUM3RCxzQkFBc0Isc0NBQXNDO0FBQzVELDBCQUEwQixzQ0FBc0M7QUFDaEUsc0JBQXNCLHNDQUFzQztBQUM1RCx1QkFBdUIsc0NBQXNDO0FBQzdELHVDQUF1QyxzQ0FBc0M7QUFDN0Usc0JBQXNCLHNDQUFzQztBQUM1RCw4QkFBOEIsa0RBQWtEO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELHNCQUFzQixzQ0FBc0M7QUFDNUQsbUJBQW1CLGlDQUFpQztBQUNwRCx1QkFBdUIsc0NBQXNDO0FBQzdELDBCQUEwQixzQ0FBc0M7QUFDaEUsc0JBQXNCLHNDQUFzQztBQUM1RCx1QkFBdUIsc0NBQXNDO0FBQzdELHVDQUF1QyxzQ0FBc0M7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbURBQW1EO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0NBQXNDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0NBQXNDO0FBQzVELG1CQUFtQix5Q0FBeUM7QUFDNUQsc0JBQXNCLG9DQUFvQztBQUMxRCxjQUFjLGlDQUFpQztBQUMvQyxrQkFBa0IsdUNBQXVDO0FBQ3pELG1CQUFtQixpQ0FBaUM7QUFDcEQsZ0JBQWdCLDhCQUE4QjtBQUM5QyxxQkFBcUIsa0NBQWtDO0FBQ3ZELG9CQUFvQixrQ0FBa0M7QUFDdEQsa0JBQWtCLHdDQUF3QztBQUMxRCxnQkFBZ0Isb0NBQW9DO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOENBQThDO0FBQ2xFLG1CQUFtQiw2Q0FBNkM7QUFDaEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixLQUFLO0FBQ3hGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsS0FBSztBQUNyRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixLQUFLO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLEtBQUs7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixLQUFLO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxHQUFHO0FBQ2hGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsR0FBRztBQUNwRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsS0FBSyxFQUFFLEtBQUs7QUFDbkc7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLEtBQUs7QUFDbkY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxHQUFHO0FBQzlFO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLFFBQVE7QUFDcEY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxRQUFRO0FBQ25GO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLFFBQVE7QUFDcEY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixLQUFLLEVBQUUsR0FBRztBQUMxRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLEtBQUssRUFBRSxHQUFHO0FBQzVGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixLQUFLLEVBQUUsR0FBRztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixLQUFLLEVBQUUsR0FBRztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUcsV0FBVyxRQUFRO0FBQzlHO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixLQUFLLEVBQUUsR0FBRztBQUMxRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUcsa0JBQWtCLEtBQUs7QUFDbEg7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixLQUFLLEVBQUUsR0FBRztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsS0FBSyxFQUFFLEdBQUcsUUFBUSxRQUFRO0FBQzFHO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixLQUFLLEVBQUUsR0FBRztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixLQUFLLEVBQUUsR0FBRztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsS0FBSyxFQUFFLEdBQUc7QUFDMUY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssRUFBRSxHQUFHO0FBQzNGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxFQUFFLEdBQUc7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsYUFBYSxTQUFTO0FBQzdIO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLGlCQUFpQixTQUFTO0FBQ2pJO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLEtBQUs7QUFDN0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixLQUFLO0FBQzFGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsS0FBSztBQUMxRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCw4QkFBOEI7QUFDdkY7QUFDQTtBQUNBLDREQUE0RCw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBLGlFQUFpRSw4QkFBOEI7QUFDL0Y7QUFDQTtBQUNBLDJEQUEyRCw4QkFBOEI7QUFDekY7QUFDQTtBQUNBLDREQUE0RCw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBLCtEQUErRCw4QkFBOEI7QUFDN0Y7QUFDQTtBQUNBLHFFQUFxRSw4QkFBOEI7QUFDbkc7QUFDQTtBQUNBLHdEQUF3RCw4QkFBOEI7QUFDdEY7QUFDQTtBQUNBLDJDQUEyQyw4QkFBOEI7QUFDekU7QUFDQTtBQUNBLG1FQUFtRSw4QkFBOEI7QUFDakc7QUFDQTtBQUNBLDJEQUEyRCw4QkFBOEI7QUFDekY7QUFDQTtBQUNBLDBEQUEwRCw4QkFBOEI7QUFDeEY7QUFDQTtBQUNBLGtEQUFrRCw4QkFBOEI7QUFDaEY7QUFDQTtBQUNBLHFFQUFxRSw4QkFBOEI7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsbUVBQW1FLDhCQUE4QjtBQUNqRztBQUNBO0FBQ0Esd0RBQXdELDhCQUE4QjtBQUN0RjtBQUNBO0FBQ0EsZ0VBQWdFLDhCQUE4QjtBQUM5RjtBQUNBO0FBQ0Esb0VBQW9FLDhCQUE4QjtBQUNsRztBQUNBO0FBQ0EsOERBQThELDhCQUE4QjtBQUM1RjtBQUNBO0FBQ0EsdURBQXVELDhCQUE4QjtBQUNyRjtBQUNBO0FBQ0EsNENBQTRDLDhCQUE4QjtBQUMxRTtBQUNBO0FBQ0EsaURBQWlELDhCQUE4QjtBQUMvRTtBQUNBO0FBQ0EscURBQXFELDhCQUE4QjtBQUNuRjtBQUNBO0FBQ0Esc0RBQXNELDhCQUE4QjtBQUNwRjtBQUNBO0FBQ0EsNkRBQTZELDhCQUE4QjtBQUMzRjtBQUNBO0FBQ0EsNERBQTRELDhCQUE4QjtBQUMxRjtBQUNBO0FBQ0EsdUVBQXVFLDhCQUE4QjtBQUNyRztBQUNBO0FBQ0EsaUVBQWlFLDhCQUE4QjtBQUMvRjtBQUNBO0FBQ0EscUVBQXFFLDhCQUE4QjtBQUNuRztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSw4QkFBOEIsd0RBQXdEO0FBQ3hKO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixVQUFVLEdBQUcsUUFBUTtBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsS0FBSztBQUN6RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsS0FBSyxFQUFFLEdBQUc7QUFDaEc7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLEtBQUssRUFBRSxHQUFHO0FBQy9GO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsS0FBSyxFQUFFLEdBQUc7QUFDOUY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEtBQUssRUFBRSxHQUFHO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixLQUFLLEVBQUUsR0FBRztBQUNoRztBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixLQUFLLEVBQUUsR0FBRztBQUM5RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEtBQUssRUFBRSxHQUFHO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixLQUFLLEVBQUUsR0FBRztBQUNoRztBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEtBQUssRUFBRSxHQUFHO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsS0FBSyxFQUFFLEdBQUcsU0FBUyxRQUFRO0FBQ2hIO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixLQUFLLEVBQUUsR0FBRztBQUM5RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsS0FBSyxFQUFFLEdBQUc7QUFDN0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEtBQUssRUFBRSxHQUFHO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixLQUFLLEVBQUUsR0FBRztBQUM5RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixLQUFLLEVBQUUsR0FBRztBQUM5RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEtBQUssRUFBRSxHQUFHO0FBQzlGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixLQUFLLEVBQUUsR0FBRztBQUM5RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRkFBMEYsS0FBSztBQUMvRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLEtBQUs7QUFDNUY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVGQUF1RixLQUFLO0FBQzVGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsS0FBSztBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLEtBQUs7QUFDeEY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsS0FBSztBQUN4RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRixHQUFHO0FBQzdGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLEdBQUc7QUFDekY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixHQUFHO0FBQ3RGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixHQUFHO0FBQ3ZGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixHQUFHO0FBQ3RGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEdBQUc7QUFDdkY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLEdBQUc7QUFDdkY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsR0FBRztBQUN2RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsR0FBRyxXQUFXLEtBQUs7QUFDekc7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLEdBQUc7QUFDdEY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixHQUFHO0FBQ3ZGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsR0FBRztBQUN2RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsR0FBRztBQUN2RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLFdBQVcsUUFBUSxRQUFRO0FBQy9HO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLFdBQVcsUUFBUSxRQUFRLE9BQU8sUUFBUTtBQUNoSTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLFVBQVU7QUFDN0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLFFBQVE7QUFDM0Y7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixRQUFRO0FBQ3hGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsUUFBUTtBQUMxRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsUUFBUTtBQUN6RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsUUFBUTtBQUN4RjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsUUFBUSxVQUFVLFVBQVU7QUFDL0c7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLFFBQVEsVUFBVSxVQUFVO0FBQzVHO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixRQUFRO0FBQ3pGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixXQUFXO0FBQzdGO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsV0FBVztBQUMvRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLFFBQVE7QUFDekY7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsOEJBQThCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsOEJBQThCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsOEJBQThCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsOEJBQThCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsOEJBQThCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsOEJBQThCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsOEJBQThCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsOEJBQThCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsOEJBQThCO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsOEJBQThCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsOEJBQThCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsOEJBQThCO0FBQ3pGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsaUJBQWlCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSx1RUFBdUUsOEJBQThCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVUsR0FBRyxRQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhCQUE4QiwrR0FBK0csdUJBQXVCO0FBQ3pNLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsSUFBSTtBQUMzRjtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CLDZCQUE2QjtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RkFBNkYsR0FBRztBQUNoRztBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELG9CQUFvQiw2QkFBNkI7QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxvQkFBb0IsNkJBQTZCO0FBQ2xHLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOENBQThDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isc0NBQXNDLGdCQUFnQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHdEQUNFO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2REFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFdUc7QUFDdkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96b29taWUvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby9ub2RlLXNkay9kaXN0L2luZGV4LmVzLmpzPzNmM2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IHsgdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgT3duQ2FwYWJpbGl0eSA9IHtcbiAgICBCTE9DS19VU0VSUzogJ2Jsb2NrLXVzZXJzJyxcbiAgICBDSEFOR0VfTUFYX0RVUkFUSU9OOiAnY2hhbmdlLW1heC1kdXJhdGlvbicsXG4gICAgQ1JFQVRFX0NBTEw6ICdjcmVhdGUtY2FsbCcsXG4gICAgQ1JFQVRFX1JFQUNUSU9OOiAnY3JlYXRlLXJlYWN0aW9uJyxcbiAgICBFTkFCTEVfTk9JU0VfQ0FOQ0VMTEFUSU9OOiAnZW5hYmxlLW5vaXNlLWNhbmNlbGxhdGlvbicsXG4gICAgRU5EX0NBTEw6ICdlbmQtY2FsbCcsXG4gICAgSk9JTl9CQUNLU1RBR0U6ICdqb2luLWJhY2tzdGFnZScsXG4gICAgSk9JTl9DQUxMOiAnam9pbi1jYWxsJyxcbiAgICBKT0lOX0VOREVEX0NBTEw6ICdqb2luLWVuZGVkLWNhbGwnLFxuICAgIE1VVEVfVVNFUlM6ICdtdXRlLXVzZXJzJyxcbiAgICBQSU5fRk9SX0VWRVJZT05FOiAncGluLWZvci1ldmVyeW9uZScsXG4gICAgUkVBRF9DQUxMOiAncmVhZC1jYWxsJyxcbiAgICBSRU1PVkVfQ0FMTF9NRU1CRVI6ICdyZW1vdmUtY2FsbC1tZW1iZXInLFxuICAgIFNDUkVFTlNIQVJFOiAnc2NyZWVuc2hhcmUnLFxuICAgIFNFTkRfQVVESU86ICdzZW5kLWF1ZGlvJyxcbiAgICBTRU5EX1ZJREVPOiAnc2VuZC12aWRlbycsXG4gICAgU1RBUlRfQlJPQURDQVNUX0NBTEw6ICdzdGFydC1icm9hZGNhc3QtY2FsbCcsXG4gICAgU1RBUlRfUkVDT1JEX0NBTEw6ICdzdGFydC1yZWNvcmQtY2FsbCcsXG4gICAgU1RBUlRfVFJBTlNDUklQVElPTl9DQUxMOiAnc3RhcnQtdHJhbnNjcmlwdGlvbi1jYWxsJyxcbiAgICBTVE9QX0JST0FEQ0FTVF9DQUxMOiAnc3RvcC1icm9hZGNhc3QtY2FsbCcsXG4gICAgU1RPUF9SRUNPUkRfQ0FMTDogJ3N0b3AtcmVjb3JkLWNhbGwnLFxuICAgIFNUT1BfVFJBTlNDUklQVElPTl9DQUxMOiAnc3RvcC10cmFuc2NyaXB0aW9uLWNhbGwnLFxuICAgIFVQREFURV9DQUxMOiAndXBkYXRlLWNhbGwnLFxuICAgIFVQREFURV9DQUxMX01FTUJFUjogJ3VwZGF0ZS1jYWxsLW1lbWJlcicsXG4gICAgVVBEQVRFX0NBTExfUEVSTUlTU0lPTlM6ICd1cGRhdGUtY2FsbC1wZXJtaXNzaW9ucycsXG4gICAgVVBEQVRFX0NBTExfU0VUVElOR1M6ICd1cGRhdGUtY2FsbC1zZXR0aW5ncycsXG59O1xuXG5mdW5jdGlvbiBKV1RVc2VyVG9rZW4oYXBpU2VjcmV0LCBwYXlsb2FkKSB7XG4gICAgLy8gbWFrZSBzdXJlIHdlIHJldHVybiBhIGNsZWFyIGVycm9yIHdoZW4gand0IGlzIHNoaW1tZWQgKGllLiBicm93c2VyIGJ1aWxkKVxuICAgIGlmIChqd3QgPT0gbnVsbCB8fCBqd3Quc2lnbiA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBVbmFibGUgdG8gZmluZCBqd3QgY3J5cHRvLCBpZiB5b3UgYXJlIGdldHRpbmcgdGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHlvdSBhcmUgdHJ5aW5nIHRvIGdlbmVyYXRlIHRva2VucyBvbiBicm93c2VyIG9yIFJlYWN0IE5hdGl2ZSAob3Igb3RoZXIgZW52aXJvbm1lbnQgd2hlcmUgY3J5cHRvIGZ1bmN0aW9ucyBhcmUgbm90IGF2YWlsYWJsZSkuIFBsZWFzZSBOb3RlOiB0b2tlbiBzaG91bGQgb25seSBiZSBnZW5lcmF0ZWQgc2VydmVyLXNpZGUuYCk7XG4gICAgfVxuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYWxnb3JpdGhtOiAnSFMyNTYnLFxuICAgICAgICBub1RpbWVzdGFtcDogdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAocGF5bG9hZC5pYXQpIHtcbiAgICAgICAgb3B0cy5ub1RpbWVzdGFtcCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gand0LnNpZ24ocGF5bG9hZCwgYXBpU2VjcmV0LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIEpXVFNlcnZlclRva2VuKGFwaVNlY3JldCwgand0T3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgc2VydmVyOiB0cnVlLFxuICAgIH07XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyBhbGdvcml0aG06ICdIUzI1NicsIG5vVGltZXN0YW1wOiB0cnVlIH0sIGp3dE9wdGlvbnMpO1xuICAgIHJldHVybiBqd3Quc2lnbihwYXlsb2FkLCBhcGlTZWNyZXQsIG9wdHMpO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XG5cbmNsYXNzIFN0cmVhbUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG1ldGFkYXRhLCBjb2RlLCBlcnJvck9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgZXJyb3JPcHRpb25zKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cblxuY29uc3QgZ2V0UmF0ZUxpbWl0RnJvbVJlc3BvbnNlSGVhZGVyID0gKHJlc3BvbnNlSGVhZGVycykgPT4ge1xuICAgIGNvbnN0IHJhdGVMaW1pdCA9IHJlc3BvbnNlSGVhZGVycy5oYXMoJ3gtcmF0ZWxpbWl0LWxpbWl0JylcbiAgICAgICAgPyArcmVzcG9uc2VIZWFkZXJzLmdldCgneC1yYXRlbGltaXQtbGltaXQnKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByYXRlTGltaXRSZW1haW5pbmcgPSByZXNwb25zZUhlYWRlcnMuaGFzKCd4LXJhdGVsaW1pdC1yZW1haW5pbmcnKVxuICAgICAgICA/ICtyZXNwb25zZUhlYWRlcnMuZ2V0KCd4LXJhdGVsaW1pdC1yZW1haW5pbmcnKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByYXRlTGltaXRSZXNldCA9IHJlc3BvbnNlSGVhZGVycy5oYXMoJ3gtcmF0ZWxpbWl0LXJlc2V0JylcbiAgICAgICAgPyBuZXcgRGF0ZSgrcmVzcG9uc2VIZWFkZXJzLmdldCgneC1yYXRlbGltaXQtcmVzZXQnKSAqIDEwMDApXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgcmF0ZUxpbWl0LFxuICAgICAgICByYXRlTGltaXRSZW1haW5pbmcsXG4gICAgICAgIHJhdGVMaW1pdFJlc2V0LFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNsYXNzIEJhc2VBcGkge1xuICAgIGNvbnN0cnVjdG9yKGFwaUNvbmZpZykge1xuICAgICAgICB0aGlzLmFwaUNvbmZpZyA9IGFwaUNvbmZpZztcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdCA9IChtZXRob2QsIHVybCwgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGJvZHkpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMgIT09IG51bGwgJiYgcXVlcnlQYXJhbXMgIT09IHZvaWQgMCA/IHF1ZXJ5UGFyYW1zIDoge307XG4gICAgICAgICAgICBxdWVyeVBhcmFtcy5hcGlfa2V5ID0gdGhpcy5hcGlDb25maWcuYXBpS2V5O1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZFBhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNTdHJpbmdpZnkocXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgaWYgKHBhdGhQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwYXRoUGFyYW1zKS5mb3JFYWNoKChwYXJhbU5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYHske3BhcmFtTmFtZX19YCwgcGF0aFBhcmFtc1twYXJhbU5hbWVdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybCArPSBgPyR7ZW5jb2RlZFBhcmFtc31gO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50UmVxdWVzdElkID0gdjQoKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogdGhpcy5hcGlDb25maWcudG9rZW4sXG4gICAgICAgICAgICAgICAgJ3N0cmVhbS1hdXRoLXR5cGUnOiAnand0JyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdYLVN0cmVhbS1DbGllbnQnOiAnc3RyZWFtLW5vZGUtJyArIFwiMC40LjNcIixcbiAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAnLFxuICAgICAgICAgICAgICAgICd4LWNsaWVudC1yZXF1ZXN0LWlkJzogY2xpZW50UmVxdWVzdElkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hbCA9IEFib3J0U2lnbmFsLnRpbWVvdXQodGhpcy5hcGlDb25maWcudGltZW91dCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2goYCR7dGhpcy5hcGlDb25maWcuYmFzZVVybH0ke3VybH1gLCB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHJhdGVMaW1pdDogZ2V0UmF0ZUxpbWl0RnJvbVJlc3BvbnNlSGVhZGVyKHJlc3BvbnNlSGVhZGVycyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA+PSAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSAoeWllbGQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN0cmVhbUVycm9yKGBTdHJlYW0gZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAtICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gLCBtZXRhZGF0YSwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3RyZWFtRXJyb3IoYFN0cmVhbSBlcnJvciBjb2RlICR7ZXJyb3IuY29kZX06ICR7ZXJyb3IubWVzc2FnZX1gLCBtZXRhZGF0YSwgZXJyb3IuY29kZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gKHlpZWxkIHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgYm9keTogcmVzcG9uc2VCb2R5LCBtZXRhZGF0YSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU3RyZWFtRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJyB8fCBlcnJvci5uYW1lID09PSAnVGltZW91dEVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3RyZWFtRXJyb3IoYFRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkIGR1ZSB0byB0byB0aGUgJHt0aGlzLmFwaUNvbmZpZy50aW1lb3V0fW1zIHRpbWVvdXQsIHlvdSBjYW4gc2V0IHRoZSB0aW1lb3V0IGluIHRoZSBTdHJlYW1DbGllbnQgY29uc3RydWN0b3JgLCBtZXRhZGF0YSwgdW5kZWZpbmVkLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3RyZWFtRXJyb3IoYFRoZSByZXF1ZXN0IGZhaWxlZCBkdWUgdG8gYW4gdW5leHBlY3RlZCBlcnJvcmAsIG1ldGFkYXRhLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5xdWVyeVBhcmFtc1N0cmluZ2lmeSA9IChwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zW2tdO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdQYXJhbXMucHVzaChgJHtrfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbS5qb2luKCcsJykpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW1zLnB1c2gocGFyYW0udG9JU09TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW1zLnB1c2goYCR7a309JHtlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocGFyYW0pKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcGFyYW0gPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcGFyYW0gPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW1zLnB1c2goYCR7a309JHtlbmNvZGVVUklDb21wb25lbnQocGFyYW0pfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld1BhcmFtcy5qb2luKCcmJyk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jb25zdCBkZWNvZGVycyA9IHt9O1xuY29uc3QgZGVjb2RlRGF0ZXRpbWVUeXBlID0gKGlucHV0KSA9PiBuZXcgRGF0ZShNYXRoLmZsb29yKGlucHV0IC8gMTAwMDAwMCkpO1xuZGVjb2RlcnMuRGF0ZXRpbWVUeXBlID0gZGVjb2RlRGF0ZXRpbWVUeXBlO1xuY29uc3QgZGVjb2RlID0gKHR5cGVNYXBwaW5ncywgaW5wdXQpID0+IHtcbiAgICBpZiAoIWlucHV0IHx8IE9iamVjdC5rZXlzKHR5cGVNYXBwaW5ncykubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgT2JqZWN0LmtleXModHlwZU1hcHBpbmdzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgaWYgKGlucHV0W2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVNYXBwaW5nc1trZXldKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjb2RlciA9IGRlY29kZXJzW3R5cGVNYXBwaW5nc1trZXldLnR5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChkZWNvZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlTWFwcGluZ3Nba2V5XS5pc1NpbmdsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IGRlY29kZXIoaW5wdXRba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhpbnB1dFtrZXldKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XVtrXSA9IGRlY29kZXIoaW5wdXRba2V5XVtrXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpbnB1dDtcbn07XG5kZWNvZGVycy5BY3Rpb25Mb2cgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldmlld19xdWV1ZV9pdGVtOiB7IHR5cGU6ICdSZXZpZXdRdWV1ZUl0ZW0nLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0YXJnZXRfdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5BY3Rpb25Mb2dSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcmV2aWV3X3F1ZXVlX2l0ZW06IHsgdHlwZTogJ1Jldmlld1F1ZXVlSXRlbScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHRhcmdldF91c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5BcHBSZXNwb25zZUZpZWxkcyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY2FsbF90eXBlczogeyB0eXBlOiAnQ2FsbFR5cGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2hhbm5lbF9jb25maWdzOiB7IHR5cGU6ICdDaGFubmVsQ29uZmlnJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHB1c2hfbm90aWZpY2F0aW9uczogeyB0eXBlOiAnUHVzaE5vdGlmaWNhdGlvbkZpZWxkcycsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldm9rZV90b2tlbnNfaXNzdWVkX2JlZm9yZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQXV0b21vZERldGFpbHMgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHJlc3VsdDogeyB0eXBlOiAnTWVzc2FnZU1vZGVyYXRpb25SZXN1bHQnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5CYW4gPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGV4cGlyZXM6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWwnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjcmVhdGVkX2J5OiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdGFyZ2V0OiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQmFuUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGV4cGlyZXM6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGJhbm5lZF9ieTogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQmxvY2tMaXN0UmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkJsb2NrVXNlcnNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQmxvY2tlZFVzZXJSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgYmxvY2tlZF91c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DYWxsUGFydGljaXBhbnRSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgam9pbmVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DYWxsUmVjb3JkaW5nID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBlbmRfdGltZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgc3RhcnRfdGltZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2FsbFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjcmVhdGVkX2J5OiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBlbmRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgc3RhcnRzX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBzZXNzaW9uOiB7IHR5cGU6ICdDYWxsU2Vzc2lvblJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2FsbFNlc3Npb25SZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgcGFydGljaXBhbnRzOiB7IHR5cGU6ICdDYWxsUGFydGljaXBhbnRSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBhY2NlcHRlZF9ieTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIG1pc3NlZF9ieTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHJlamVjdGVkX2J5OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgZW5kZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxpdmVfZW5kZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxpdmVfc3RhcnRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgc3RhcnRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdGltZXJfZW5kc19hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2FsbFN0YXRlUmVzcG9uc2VGaWVsZHMgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ01lbWJlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNhbGw6IHsgdHlwZTogJ0NhbGxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkNhbGxTdGF0c1JlcG9ydFN1bW1hcnlSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZmlyc3Rfc3RhdHNfdGltZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2FsbFRyYW5zY3JpcHRpb24gPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGVuZF90aW1lOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBzdGFydF90aW1lOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DYWxsVHlwZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2FsbFR5cGVSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2hhbm5lbCA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGFzdF9tZXNzYWdlX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBpbnZpdGVzOiB7IHR5cGU6ICdDaGFubmVsTWVtYmVyJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ0NoYW5uZWxNZW1iZXInLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY29uZmlnOiB7IHR5cGU6ICdDaGFubmVsQ29uZmlnJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY29uZmlnX292ZXJyaWRlczogeyB0eXBlOiAnQ2hhbm5lbENvbmZpZycsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0cnVuY2F0ZWRfYnk6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DaGFubmVsQ29uZmlnID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DaGFubmVsQ29uZmlnV2l0aEluZm8gPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNvbW1hbmRzOiB7IHR5cGU6ICdDb21tYW5kJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkNoYW5uZWxNZW1iZXIgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGJhbl9leHBpcmVzOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkZWxldGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBpbnZpdGVfYWNjZXB0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGludml0ZV9yZWplY3RlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkNoYW5uZWxNZW1iZXJSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgYmFuX2V4cGlyZXM6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGludml0ZV9hY2NlcHRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgaW52aXRlX3JlamVjdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DaGFubmVsTXV0ZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZXhwaXJlczogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkNoYW5uZWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgaGlkZV9tZXNzYWdlc19iZWZvcmU6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhc3RfbWVzc2FnZV9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbXV0ZV9leHBpcmVzX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0cnVuY2F0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ0NoYW5uZWxNZW1iZXInLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY29uZmlnOiB7IHR5cGU6ICdDaGFubmVsQ29uZmlnV2l0aEluZm8nLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjcmVhdGVkX2J5OiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdHJ1bmNhdGVkX2J5OiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuQ2hhbm5lbFN0YXRlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ0NoYW5uZWxNZW1iZXInLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgbWVzc2FnZXM6IHsgdHlwZTogJ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBwaW5uZWRfbWVzc2FnZXM6IHsgdHlwZTogJ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICB0aHJlYWRzOiB7IHR5cGU6ICdUaHJlYWRTdGF0ZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBoaWRlX21lc3NhZ2VzX2JlZm9yZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcGVuZGluZ19tZXNzYWdlczogeyB0eXBlOiAnUGVuZGluZ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICByZWFkOiB7IHR5cGU6ICdSZWFkU3RhdGVSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICB3YXRjaGVyczogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lbWJlcnNoaXA6IHsgdHlwZTogJ0NoYW5uZWxNZW1iZXInLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DaGFubmVsU3RhdGVSZXNwb25zZUZpZWxkcyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVtYmVyczogeyB0eXBlOiAnQ2hhbm5lbE1lbWJlcicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtZXNzYWdlczogeyB0eXBlOiAnTWVzc2FnZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHBpbm5lZF9tZXNzYWdlczogeyB0eXBlOiAnTWVzc2FnZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHRocmVhZHM6IHsgdHlwZTogJ1RocmVhZFN0YXRlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGhpZGVfbWVzc2FnZXNfYmVmb3JlOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwZW5kaW5nX21lc3NhZ2VzOiB7IHR5cGU6ICdQZW5kaW5nTWVzc2FnZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHJlYWQ6IHsgdHlwZTogJ1JlYWRTdGF0ZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHdhdGNoZXJzOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbWVtYmVyc2hpcDogeyB0eXBlOiAnQ2hhbm5lbE1lbWJlcicsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkNoYW5uZWxUeXBlQ29uZmlnID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjb21tYW5kczogeyB0eXBlOiAnQ29tbWFuZCcsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DaGVja1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBpdGVtOiB7IHR5cGU6ICdSZXZpZXdRdWV1ZUl0ZW0nLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Db21tYW5kID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Db25maWdSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdmVsb2NpdHlfZmlsdGVyX2NvbmZpZzogeyB0eXBlOiAnVmVsb2NpdHlGaWx0ZXJDb25maWcnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVDYWxsVHlwZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVDaGFubmVsVHlwZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVDb21tYW5kUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNvbW1hbmQ6IHsgdHlwZTogJ0NvbW1hbmQnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVHdWVzdFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVJbXBvcnRSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgaW1wb3J0X3Rhc2s6IHsgdHlwZTogJ0ltcG9ydFRhc2snLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DcmVhdGVSb2xlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHJvbGU6IHsgdHlwZTogJ1JvbGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5DdXN0b21DaGVja1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBzY29yZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldmlld2VkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5EZWFjdGl2YXRlVXNlclJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5EZWxldGVDYWxsUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNhbGw6IHsgdHlwZTogJ0NhbGxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkRlbGV0ZUNoYW5uZWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuRGVsZXRlTWVzc2FnZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5EZXZpY2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkVncmVzc1JUTVBSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgc3RhcnRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuRXZlbnRSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZXZlbnQ6IHsgdHlwZTogJ1dTRXZlbnQnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5FeHBvcnRVc2VyUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lc3NhZ2VzOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHJlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb24nLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuRmxhZzIgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5GbGFnRGV0YWlscyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgYXV0b21vZDogeyB0eXBlOiAnQXV0b21vZERldGFpbHMnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5GbGFnRmVlZGJhY2sgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkZ1bGxVc2VyUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNoYW5uZWxfbXV0ZXM6IHsgdHlwZTogJ0NoYW5uZWxNdXRlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGRldmljZXM6IHsgdHlwZTogJ0RldmljZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtdXRlczogeyB0eXBlOiAnVXNlck11dGVSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBkZWFjdGl2YXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGFzdF9hY3RpdmU6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldm9rZV90b2tlbnNfaXNzdWVkX2JlZm9yZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcHVzaF9ub3RpZmljYXRpb25zOiB7XG4gICAgICAgICAgICB0eXBlOiAnUHVzaE5vdGlmaWNhdGlvblNldHRpbmdzUmVzcG9uc2UnLFxuICAgICAgICAgICAgaXNTaW5nbGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkdldEFwcGxpY2F0aW9uUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGFwcDogeyB0eXBlOiAnQXBwUmVzcG9uc2VGaWVsZHMnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRCbG9ja0xpc3RSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgYmxvY2tsaXN0OiB7IHR5cGU6ICdCbG9ja0xpc3RSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkdldEJsb2NrZWRVc2Vyc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBibG9ja3M6IHsgdHlwZTogJ0Jsb2NrZWRVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0Q2FsbFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZW1iZXJzOiB7IHR5cGU6ICdNZW1iZXJSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBjYWxsOiB7IHR5cGU6ICdDYWxsUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRDYWxsVHlwZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRDaGFubmVsVHlwZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjb21tYW5kczogeyB0eXBlOiAnQ29tbWFuZCcsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRDb21tYW5kUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkdldENvbmZpZ1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjb25maWc6IHsgdHlwZTogJ0NvbmZpZ1Jlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0RXhwb3J0Q2hhbm5lbHNTdGF0dXNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0SW1wb3J0UmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGltcG9ydF90YXNrOiB7IHR5cGU6ICdJbXBvcnRUYXNrJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0TWFueU1lc3NhZ2VzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lc3NhZ2VzOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkdldE1lc3NhZ2VSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZVdpdGhDaGFubmVsUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRPckNyZWF0ZUNhbGxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVtYmVyczogeyB0eXBlOiAnTWVtYmVyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2FsbDogeyB0eXBlOiAnQ2FsbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0UmVhY3Rpb25zUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHJlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb24nLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0UmVwbGllc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlczogeyB0eXBlOiAnTWVzc2FnZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkdldFJldmlld1F1ZXVlSXRlbVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBoaXN0b3J5OiB7IHR5cGU6ICdSZXZpZXdRdWV1ZUl0ZW0nLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgaXRlbTogeyB0eXBlOiAnUmV2aWV3UXVldWVJdGVtJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0VGFza1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5HZXRUaHJlYWRSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdGhyZWFkOiB7IHR5cGU6ICdUaHJlYWRTdGF0ZVJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuR2V0VXNlck1vZGVyYXRpb25SZXBvcnRSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdXNlcl9ibG9ja3M6IHsgdHlwZTogJ1VzZXJCbG9jaycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICB1c2VyX211dGVzOiB7IHR5cGU6ICdVc2VyTXV0ZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Hb0xpdmVSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY2FsbDogeyB0eXBlOiAnQ2FsbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuSW1wb3J0VGFzayA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgaGlzdG9yeTogeyB0eXBlOiAnSW1wb3J0VGFza0hpc3RvcnknLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuSW1wb3J0VGFza0hpc3RvcnkgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkxpc3RCbG9ja0xpc3RSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgYmxvY2tsaXN0czogeyB0eXBlOiAnQmxvY2tMaXN0UmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTGlzdENhbGxUeXBlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNhbGxfdHlwZXM6IHsgdHlwZTogJ0NhbGxUeXBlUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTGlzdENoYW5uZWxUeXBlc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjaGFubmVsX3R5cGVzOiB7IHR5cGU6ICdDaGFubmVsVHlwZUNvbmZpZycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5MaXN0Q29tbWFuZHNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY29tbWFuZHM6IHsgdHlwZTogJ0NvbW1hbmQnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTGlzdERldmljZXNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZGV2aWNlczogeyB0eXBlOiAnRGV2aWNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLkxpc3RJbXBvcnRzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGltcG9ydF90YXNrczogeyB0eXBlOiAnSW1wb3J0VGFzaycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5MaXN0UHVzaFByb3ZpZGVyc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBwdXNoX3Byb3ZpZGVyczogeyB0eXBlOiAnUHVzaFByb3ZpZGVyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTGlzdFJlY29yZGluZ3NSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgcmVjb3JkaW5nczogeyB0eXBlOiAnQ2FsbFJlY29yZGluZycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5MaXN0Um9sZXNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgcm9sZXM6IHsgdHlwZTogJ1JvbGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTGlzdFRyYW5zY3JpcHRpb25zUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHRyYW5zY3JpcHRpb25zOiB7IHR5cGU6ICdDYWxsVHJhbnNjcmlwdGlvbicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5NYXJrUmVhZFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBldmVudDogeyB0eXBlOiAnTWVzc2FnZVJlYWRFdmVudCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLk1lbWJlclJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkZWxldGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5NZW1iZXJzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ0NoYW5uZWxNZW1iZXInLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTWVzc2FnZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGF0ZXN0X3JlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb24nLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgbWVudGlvbmVkX3VzZXJzOiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIG93bl9yZWFjdGlvbnM6IHsgdHlwZTogJ1JlYWN0aW9uJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHJlYWN0aW9uX2dyb3VwczogeyB0eXBlOiAnUmVhY3Rpb25Hcm91cFJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2VfdGV4dF91cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwaW5fZXhwaXJlczogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcGlubmVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0aHJlYWRfcGFydGljaXBhbnRzOiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHBpbm5lZF9ieTogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHBvbGw6IHsgdHlwZTogJ1BvbGwnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBxdW90ZWRfbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5NZXNzYWdlRmxhZ1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBhcHByb3ZlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcmVqZWN0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldmlld2VkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkZXRhaWxzOiB7IHR5cGU6ICdGbGFnRGV0YWlscycsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBtb2RlcmF0aW9uX2ZlZWRiYWNrOiB7IHR5cGU6ICdGbGFnRmVlZGJhY2snLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBtb2RlcmF0aW9uX3Jlc3VsdDogeyB0eXBlOiAnTWVzc2FnZU1vZGVyYXRpb25SZXN1bHQnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZXZpZXdlZF9ieTogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTWVzc2FnZUhpc3RvcnlFbnRyeVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlX3VwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLk1lc3NhZ2VNb2RlcmF0aW9uUmVzdWx0ID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5NZXNzYWdlUmVhZEV2ZW50ID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0aHJlYWQ6IHsgdHlwZTogJ1RocmVhZFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLk1lc3NhZ2VSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGF0ZXN0X3JlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb25SZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtZW50aW9uZWRfdXNlcnM6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBvd25fcmVhY3Rpb25zOiB7IHR5cGU6ICdSZWFjdGlvblJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2VfdGV4dF91cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwaW5fZXhwaXJlczogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcGlubmVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0aHJlYWRfcGFydGljaXBhbnRzOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgcGlubmVkX2J5OiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwb2xsOiB7IHR5cGU6ICdQb2xsJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcXVvdGVkX21lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZWFjdGlvbl9ncm91cHM6IHsgdHlwZTogJ1JlYWN0aW9uR3JvdXBSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5NZXNzYWdlV2l0aENoYW5uZWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGF0ZXN0X3JlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb25SZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtZW50aW9uZWRfdXNlcnM6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBvd25fcmVhY3Rpb25zOiB7IHR5cGU6ICdSZWFjdGlvblJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2VfdGV4dF91cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwaW5fZXhwaXJlczogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcGlubmVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0aHJlYWRfcGFydGljaXBhbnRzOiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgcGlubmVkX2J5OiB7IHR5cGU6ICdVc2VyUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwb2xsOiB7IHR5cGU6ICdQb2xsJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcXVvdGVkX21lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZWFjdGlvbl9ncm91cHM6IHsgdHlwZTogJ1JlYWN0aW9uR3JvdXBSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Nb2RlcmF0aW9uVXNhZ2VTdGF0cyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTXV0ZUNoYW5uZWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY2hhbm5lbF9tdXRlczogeyB0eXBlOiAnQ2hhbm5lbE11dGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2hhbm5lbF9tdXRlOiB7IHR5cGU6ICdDaGFubmVsTXV0ZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG93bl91c2VyOiB7IHR5cGU6ICdPd25Vc2VyJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuTXV0ZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtdXRlczogeyB0eXBlOiAnVXNlck11dGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgb3duX3VzZXI6IHsgdHlwZTogJ093blVzZXInLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5OdWxsVGltZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdmFsdWU6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLk93blVzZXIgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNoYW5uZWxfbXV0ZXM6IHsgdHlwZTogJ0NoYW5uZWxNdXRlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGRldmljZXM6IHsgdHlwZTogJ0RldmljZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtdXRlczogeyB0eXBlOiAnVXNlck11dGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgZGVhY3RpdmF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhc3RfYWN0aXZlOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwdXNoX25vdGlmaWNhdGlvbnM6IHsgdHlwZTogJ1B1c2hOb3RpZmljYXRpb25TZXR0aW5ncycsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlBlbmRpbmdNZXNzYWdlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlBvbGwgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhdGVzdF9hbnN3ZXJzOiB7IHR5cGU6ICdQb2xsVm90ZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBvd25fdm90ZXM6IHsgdHlwZTogJ1BvbGxWb3RlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Qb2xsUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHBvbGw6IHsgdHlwZTogJ1BvbGxSZXNwb25zZURhdGEnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Qb2xsUmVzcG9uc2VEYXRhID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBvd25fdm90ZXM6IHsgdHlwZTogJ1BvbGxWb3RlUmVzcG9uc2VEYXRhJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlBvbGxWb3RlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUG9sbFZvdGVSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdm90ZTogeyB0eXBlOiAnUG9sbFZvdGVSZXNwb25zZURhdGEnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Qb2xsVm90ZVJlc3BvbnNlRGF0YSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUG9sbFZvdGVzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHZvdGVzOiB7IHR5cGU6ICdQb2xsVm90ZVJlc3BvbnNlRGF0YScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5QdXNoTm90aWZpY2F0aW9uRmllbGRzID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBwcm92aWRlcnM6IHsgdHlwZTogJ1B1c2hQcm92aWRlcicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5QdXNoTm90aWZpY2F0aW9uU2V0dGluZ3MgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGRpc2FibGVkX3VudGlsOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5QdXNoTm90aWZpY2F0aW9uU2V0dGluZ3NSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZGlzYWJsZWRfdW50aWw6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlB1c2hQcm92aWRlciA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGlzYWJsZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlB1c2hQcm92aWRlclJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkaXNhYmxlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlCYW5uZWRVc2Vyc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBiYW5zOiB7IHR5cGU6ICdCYW5SZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeUNhbGxNZW1iZXJzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ01lbWJlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlF1ZXJ5Q2FsbFN0YXRzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHJlcG9ydHM6IHsgdHlwZTogJ0NhbGxTdGF0c1JlcG9ydFN1bW1hcnlSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeUNhbGxzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNhbGxzOiB7IHR5cGU6ICdDYWxsU3RhdGVSZXNwb25zZUZpZWxkcycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeUNoYW5uZWxzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNoYW5uZWxzOiB7IHR5cGU6ICdDaGFubmVsU3RhdGVSZXNwb25zZUZpZWxkcycsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeUZlZWRNb2RlcmF0aW9uVGVtcGxhdGUgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlF1ZXJ5RmVlZE1vZGVyYXRpb25UZW1wbGF0ZXNSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdGVtcGxhdGVzOiB7IHR5cGU6ICdRdWVyeUZlZWRNb2RlcmF0aW9uVGVtcGxhdGUnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlNZXNzYWdlRmxhZ3NSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZmxhZ3M6IHsgdHlwZTogJ01lc3NhZ2VGbGFnUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlNZXNzYWdlSGlzdG9yeVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlX2hpc3Rvcnk6IHsgdHlwZTogJ01lc3NhZ2VIaXN0b3J5RW50cnlSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeU1vZGVyYXRpb25Mb2dzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGxfb2dfczogeyB0eXBlOiAnQWN0aW9uTG9nUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlQb2xsc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBwb2xsczogeyB0eXBlOiAnUG9sbFJlc3BvbnNlRGF0YScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5RdWVyeVJlYWN0aW9uc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICByZWFjdGlvbnM6IHsgdHlwZTogJ1JlYWN0aW9uUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlSZXZpZXdRdWV1ZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBpdGVtczogeyB0eXBlOiAnUmV2aWV3UXVldWVJdGVtJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlF1ZXJ5VGhyZWFkc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICB0aHJlYWRzOiB7IHR5cGU6ICdUaHJlYWRTdGF0ZVJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlF1ZXJ5VXNhZ2VTdGF0c1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBpdGVtczogeyB0eXBlOiAnTW9kZXJhdGlvblVzYWdlU3RhdHMnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUXVlcnlVc2Vyc1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICB1c2VyczogeyB0eXBlOiAnRnVsbFVzZXJSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5SZWFjdGlvbiA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlJlYWN0aW9uR3JvdXBSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgZmlyc3RfcmVhY3Rpb25fYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhc3RfcmVhY3Rpb25fYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlJlYWN0aW9uUmVtb3ZhbFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcmVhY3Rpb246IHsgdHlwZTogJ1JlYWN0aW9uJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUmVhY3Rpb25SZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUmVhY3RpdmF0ZVVzZXJSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUmVhZCA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbGFzdF9yZWFkOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1c2VyOiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUmVhZFN0YXRlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGxhc3RfcmVhZDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuUmV2aWV3UXVldWVJdGVtID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBhY3Rpb25zOiB7IHR5cGU6ICdBY3Rpb25Mb2cnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgYmFuczogeyB0eXBlOiAnQmFuJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGZsYWdzOiB7IHR5cGU6ICdGbGFnMicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBjb21wbGV0ZWRfYXQ6IHsgdHlwZTogJ051bGxUaW1lJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcmV2aWV3ZWRfYXQ6IHsgdHlwZTogJ051bGxUaW1lJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgYXNzaWduZWRfdG86IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBlbnRpdHlfY3JlYXRvcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGZlZWRzX3YyX3JlYWN0aW9uOiB7IHR5cGU6ICdSZWFjdGlvbicsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Sb2xlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5TZWFyY2hSZXN1bHQgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ1NlYXJjaFJlc3VsdE1lc3NhZ2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5TZWFyY2hSZXN1bHRNZXNzYWdlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsYXRlc3RfcmVhY3Rpb25zOiB7IHR5cGU6ICdSZWFjdGlvbicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBtZW50aW9uZWRfdXNlcnM6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgb3duX3JlYWN0aW9uczogeyB0eXBlOiAnUmVhY3Rpb24nLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgcmVhY3Rpb25fZ3JvdXBzOiB7IHR5cGU6ICdSZWFjdGlvbkdyb3VwUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbWVzc2FnZV90ZXh0X3VwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHBpbl9leHBpcmVzOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwaW5uZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHRocmVhZF9wYXJ0aWNpcGFudHM6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcGlubmVkX2J5OiB7IHR5cGU6ICdVc2VyT2JqZWN0JywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcG9sbDogeyB0eXBlOiAnUG9sbCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHF1b3RlZF9tZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlNlbmRNZXNzYWdlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlNlbmRSZWFjdGlvblJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZWFjdGlvbjogeyB0eXBlOiAnUmVhY3Rpb25SZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlN0b3BMaXZlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNhbGw6IHsgdHlwZTogJ0NhbGxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlN1Ym1pdEFjdGlvblJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBpdGVtOiB7IHR5cGU6ICdSZXZpZXdRdWV1ZUl0ZW0nLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5UaHJlYWRQYXJ0aWNpcGFudCA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGFzdF9yZWFkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsYXN0X3RocmVhZF9tZXNzYWdlX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsZWZ0X3RocmVhZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXNlcjogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlRocmVhZFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkZWxldGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsYXN0X21lc3NhZ2VfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHRocmVhZF9wYXJ0aWNpcGFudHM6IHsgdHlwZTogJ1RocmVhZFBhcnRpY2lwYW50JywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwYXJlbnRfbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlRocmVhZFN0YXRlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsYXRlc3RfcmVwbGllczogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBkZWxldGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBsYXN0X21lc3NhZ2VfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJlYWQ6IHsgdHlwZTogJ1JlYWQnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgdGhyZWFkX3BhcnRpY2lwYW50czogeyB0eXBlOiAnVGhyZWFkUGFydGljaXBhbnQnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwYXJlbnRfbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlRocmVhZFN0YXRlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhdGVzdF9yZXBsaWVzOiB7IHR5cGU6ICdNZXNzYWdlUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGFzdF9tZXNzYWdlX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZWFkOiB7IHR5cGU6ICdSZWFkJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHRocmVhZF9wYXJ0aWNpcGFudHM6IHsgdHlwZTogJ1RocmVhZFBhcnRpY2lwYW50JywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGNyZWF0ZWRfYnk6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHBhcmVudF9tZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVHJ1bmNhdGVDaGFubmVsUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lc3NhZ2U6IHsgdHlwZTogJ01lc3NhZ2VSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVucmVhZENvdW50c0JhdGNoUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNvdW50c19ieV91c2VyOiB7IHR5cGU6ICdVbnJlYWRDb3VudHNSZXNwb25zZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5VbnJlYWRDb3VudHNDaGFubmVsID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBsYXN0X3JlYWQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVucmVhZENvdW50c1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjaGFubmVsczogeyB0eXBlOiAnVW5yZWFkQ291bnRzQ2hhbm5lbCcsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICB0aHJlYWRzOiB7IHR5cGU6ICdVbnJlYWRDb3VudHNUaHJlYWQnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVW5yZWFkQ291bnRzVGhyZWFkID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBsYXN0X3JlYWQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZUNhbGxNZW1iZXJzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIG1lbWJlcnM6IHsgdHlwZTogJ01lbWJlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZUNhbGxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVtYmVyczogeyB0eXBlOiAnTWVtYmVyUmVzcG9uc2UnLCBpc1NpbmdsZTogZmFsc2UgfSxcbiAgICAgICAgY2FsbDogeyB0eXBlOiAnQ2FsbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlQ2FsbFR5cGVSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlQ2hhbm5lbFBhcnRpYWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVtYmVyczogeyB0eXBlOiAnQ2hhbm5lbE1lbWJlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIGNoYW5uZWw6IHsgdHlwZTogJ0NoYW5uZWxSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZUNoYW5uZWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVtYmVyczogeyB0eXBlOiAnQ2hhbm5lbE1lbWJlcicsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBjaGFubmVsOiB7IHR5cGU6ICdDaGFubmVsUmVzcG9uc2UnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBtZXNzYWdlOiB7IHR5cGU6ICdNZXNzYWdlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlQ2hhbm5lbFR5cGVSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlQ29tbWFuZFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjb21tYW5kOiB7IHR5cGU6ICdDb21tYW5kJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlTWVtYmVyUGFydGlhbFJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjaGFubmVsX21lbWJlcjogeyB0eXBlOiAnQ2hhbm5lbE1lbWJlclJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBkYXRlTWVzc2FnZVBhcnRpYWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZU1lc3NhZ2VSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZVRocmVhZFBhcnRpYWxSZXNwb25zZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdGhyZWFkOiB7IHR5cGU6ICdUaHJlYWRSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwZGF0ZVVzZXJzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIHVzZXJzOiB7IHR5cGU6ICdGdWxsVXNlclJlc3BvbnNlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwc2VydENvbmZpZ1Jlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjb25maWc6IHsgdHlwZTogJ0NvbmZpZ1Jlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXBzZXJ0TW9kZXJhdGlvblRlbXBsYXRlUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVwc2VydFB1c2hQcm92aWRlclJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBwdXNoX3Byb3ZpZGVyOiB7IHR5cGU6ICdQdXNoUHJvdmlkZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVzZXJCbG9jayA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuVXNlck11dGUgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGV4cGlyZXM6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHRhcmdldDogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Vc2VyTXV0ZVJlc3BvbnNlID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdHlwZU1hcHBpbmdzID0ge1xuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB1cGRhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBleHBpcmVzOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICB0YXJnZXQ6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlVzZXJPYmplY3QgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGJhbl9leHBpcmVzOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBjcmVhdGVkX2F0OiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBkZWFjdGl2YXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGVsZXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbGFzdF9hY3RpdmU6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHJldm9rZV90b2tlbnNfaXNzdWVkX2JlZm9yZTogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdXBkYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcHVzaF9ub3RpZmljYXRpb25zOiB7IHR5cGU6ICdQdXNoTm90aWZpY2F0aW9uU2V0dGluZ3MnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5Vc2VyUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNyZWF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVwZGF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRldmljZXM6IHsgdHlwZTogJ0RldmljZScsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgICAgICBiYW5fZXhwaXJlczogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgZGVhY3RpdmF0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGRlbGV0ZWRfYXQ6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIGxhc3RfYWN0aXZlOiB7IHR5cGU6ICdEYXRldGltZVR5cGUnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICByZXZva2VfdG9rZW5zX2lzc3VlZF9iZWZvcmU6IHsgdHlwZTogJ0RhdGV0aW1lVHlwZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHB1c2hfbm90aWZpY2F0aW9uczoge1xuICAgICAgICAgICAgdHlwZTogJ1B1c2hOb3RpZmljYXRpb25TZXR0aW5nc1Jlc3BvbnNlJyxcbiAgICAgICAgICAgIGlzU2luZ2xlOiB0cnVlLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5WZWxvY2l0eUZpbHRlckNvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgcnVsZTogeyB0eXBlOiAnVmVsb2NpdHlGaWx0ZXJDb25maWdSdWxlJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVjb2RlKHR5cGVNYXBwaW5ncywgaW5wdXQpO1xufTtcbmRlY29kZXJzLlZlbG9jaXR5RmlsdGVyQ29uZmlnUnVsZSA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgdGltZW91dDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICB9O1xuICAgIHJldHVybiBkZWNvZGUodHlwZU1hcHBpbmdzLCBpbnB1dCk7XG59O1xuZGVjb2RlcnMuV1NFdmVudCA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHR5cGVNYXBwaW5ncyA9IHtcbiAgICAgICAgY3JlYXRlZF9hdDogeyB0eXBlOiAnRGF0ZXRpbWVUeXBlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY2hhbm5lbDogeyB0eXBlOiAnQ2hhbm5lbFJlc3BvbnNlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgY3JlYXRlZF9ieTogeyB0eXBlOiAnVXNlck9iamVjdCcsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIG1lOiB7IHR5cGU6ICdPd25Vc2VyJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbWVtYmVyOiB7IHR5cGU6ICdDaGFubmVsTWVtYmVyJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgbWVzc2FnZTogeyB0eXBlOiAnTWVzc2FnZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHBvbGw6IHsgdHlwZTogJ1BvbGwnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgICAgICBwb2xsX3ZvdGU6IHsgdHlwZTogJ1BvbGxWb3RlJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgcmVhY3Rpb246IHsgdHlwZTogJ1JlYWN0aW9uJywgaXNTaW5nbGU6IHRydWUgfSxcbiAgICAgICAgdGhyZWFkOiB7IHR5cGU6ICdUaHJlYWRSZXNwb25zZScsIGlzU2luZ2xlOiB0cnVlIH0sXG4gICAgICAgIHVzZXI6IHsgdHlwZTogJ1VzZXJPYmplY3QnLCBpc1NpbmdsZTogdHJ1ZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5kZWNvZGVycy5XcmFwcGVkVW5yZWFkQ291bnRzUmVzcG9uc2UgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0eXBlTWFwcGluZ3MgPSB7XG4gICAgICAgIGNoYW5uZWxzOiB7IHR5cGU6ICdVbnJlYWRDb3VudHNDaGFubmVsJywgaXNTaW5nbGU6IGZhbHNlIH0sXG4gICAgICAgIHRocmVhZHM6IHsgdHlwZTogJ1VucmVhZENvdW50c1RocmVhZCcsIGlzU2luZ2xlOiBmYWxzZSB9LFxuICAgIH07XG4gICAgcmV0dXJuIGRlY29kZSh0eXBlTWFwcGluZ3MsIGlucHV0KTtcbn07XG5cbmNsYXNzIENvbW1vbkFwaSBleHRlbmRzIEJhc2VBcGkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmdldEFwcCA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvYXBwJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9hID0gZGVjb2RlcnMuR2V0QXBwbGljYXRpb25SZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVBcHAgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBhc3luY191cmxfZW5yaWNoX2VuYWJsZWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hc3luY191cmxfZW5yaWNoX2VuYWJsZWQsXG4gICAgICAgICAgICAgICAgYXV0b190cmFuc2xhdGlvbl9lbmFibGVkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b190cmFuc2xhdGlvbl9lbmFibGVkLFxuICAgICAgICAgICAgICAgIGJlZm9yZV9tZXNzYWdlX3NlbmRfaG9va191cmw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5iZWZvcmVfbWVzc2FnZV9zZW5kX2hvb2tfdXJsLFxuICAgICAgICAgICAgICAgIGNkbl9leHBpcmF0aW9uX3NlY29uZHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jZG5fZXhwaXJhdGlvbl9zZWNvbmRzLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxfaGlkZV9tZW1iZXJzX29ubHk6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jaGFubmVsX2hpZGVfbWVtYmVyc19vbmx5LFxuICAgICAgICAgICAgICAgIGN1c3RvbV9hY3Rpb25faGFuZGxlcl91cmw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b21fYWN0aW9uX2hhbmRsZXJfdXJsLFxuICAgICAgICAgICAgICAgIGRpc2FibGVfYXV0aF9jaGVja3M6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kaXNhYmxlX2F1dGhfY2hlY2tzLFxuICAgICAgICAgICAgICAgIGRpc2FibGVfcGVybWlzc2lvbnNfY2hlY2tzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZGlzYWJsZV9wZXJtaXNzaW9uc19jaGVja3MsXG4gICAgICAgICAgICAgICAgZW5mb3JjZV91bmlxdWVfdXNlcm5hbWVzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZW5mb3JjZV91bmlxdWVfdXNlcm5hbWVzLFxuICAgICAgICAgICAgICAgIGZlZWRzX21vZGVyYXRpb25fZW5hYmxlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZlZWRzX21vZGVyYXRpb25fZW5hYmxlZCxcbiAgICAgICAgICAgICAgICBmZWVkc192Ml9yZWdpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5mZWVkc192Ml9yZWdpb24sXG4gICAgICAgICAgICAgICAgaW1hZ2VfbW9kZXJhdGlvbl9lbmFibGVkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaW1hZ2VfbW9kZXJhdGlvbl9lbmFibGVkLFxuICAgICAgICAgICAgICAgIG1pZ3JhdGVfcGVybWlzc2lvbnNfdG9fdjI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5taWdyYXRlX3Blcm1pc3Npb25zX3RvX3YyLFxuICAgICAgICAgICAgICAgIG1vZGVyYXRpb25fZW5hYmxlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1vZGVyYXRpb25fZW5hYmxlZCxcbiAgICAgICAgICAgICAgICBtb2RlcmF0aW9uX3dlYmhvb2tfdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubW9kZXJhdGlvbl93ZWJob29rX3VybCxcbiAgICAgICAgICAgICAgICBtdWx0aV90ZW5hbnRfZW5hYmxlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm11bHRpX3RlbmFudF9lbmFibGVkLFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25fdmVyc2lvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBlcm1pc3Npb25fdmVyc2lvbixcbiAgICAgICAgICAgICAgICByZW1pbmRlcnNfaW50ZXJ2YWw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZW1pbmRlcnNfaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICAgcmVtaW5kZXJzX21heF9tZW1iZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVtaW5kZXJzX21heF9tZW1iZXJzLFxuICAgICAgICAgICAgICAgIHJldm9rZV90b2tlbnNfaXNzdWVkX2JlZm9yZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJldm9rZV90b2tlbnNfaXNzdWVkX2JlZm9yZSxcbiAgICAgICAgICAgICAgICBzbnNfa2V5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX2tleSxcbiAgICAgICAgICAgICAgICBzbnNfc2VjcmV0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX3NlY3JldCxcbiAgICAgICAgICAgICAgICBzbnNfdG9waWNfYXJuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX3RvcGljX2FybixcbiAgICAgICAgICAgICAgICBzcXNfa2V5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3FzX2tleSxcbiAgICAgICAgICAgICAgICBzcXNfc2VjcmV0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3FzX3NlY3JldCxcbiAgICAgICAgICAgICAgICBzcXNfdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3FzX3VybCxcbiAgICAgICAgICAgICAgICB2aWRlb19wcm92aWRlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnZpZGVvX3Byb3ZpZGVyLFxuICAgICAgICAgICAgICAgIHdlYmhvb2tfdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qud2ViaG9va191cmwsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF9mbGFnX3JlYXNvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hbGxvd2VkX2ZsYWdfcmVhc29ucyxcbiAgICAgICAgICAgICAgICBpbWFnZV9tb2RlcmF0aW9uX2Jsb2NrX2xhYmVsczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmltYWdlX21vZGVyYXRpb25fYmxvY2tfbGFiZWxzLFxuICAgICAgICAgICAgICAgIGltYWdlX21vZGVyYXRpb25fbGFiZWxzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaW1hZ2VfbW9kZXJhdGlvbl9sYWJlbHMsXG4gICAgICAgICAgICAgICAgdXNlcl9zZWFyY2hfZGlzYWxsb3dlZF9yb2xlczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfc2VhcmNoX2Rpc2FsbG93ZWRfcm9sZXMsXG4gICAgICAgICAgICAgICAgd2ViaG9va19ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC53ZWJob29rX2V2ZW50cyxcbiAgICAgICAgICAgICAgICBhZ29yYV9vcHRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYWdvcmFfb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhcG5fY29uZmlnOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXBuX2NvbmZpZyxcbiAgICAgICAgICAgICAgICBhc3luY19tb2RlcmF0aW9uX2NvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmFzeW5jX21vZGVyYXRpb25fY29uZmlnLFxuICAgICAgICAgICAgICAgIGRhdGFkb2dfaW5mbzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRhdGFkb2dfaW5mbyxcbiAgICAgICAgICAgICAgICBmaWxlX3VwbG9hZF9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maWxlX3VwbG9hZF9jb25maWcsXG4gICAgICAgICAgICAgICAgZmlyZWJhc2VfY29uZmlnOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlyZWJhc2VfY29uZmlnLFxuICAgICAgICAgICAgICAgIGdyYW50czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmdyYW50cyxcbiAgICAgICAgICAgICAgICBobXNfb3B0aW9uczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lmhtc19vcHRpb25zLFxuICAgICAgICAgICAgICAgIGh1YXdlaV9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5odWF3ZWlfY29uZmlnLFxuICAgICAgICAgICAgICAgIGltYWdlX3VwbG9hZF9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pbWFnZV91cGxvYWRfY29uZmlnLFxuICAgICAgICAgICAgICAgIHB1c2hfY29uZmlnOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucHVzaF9jb25maWcsXG4gICAgICAgICAgICAgICAgeGlhb21pX2NvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnhpYW9taV9jb25maWcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQQVRDSCcsICcvYXBpL3YyL2FwcCcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfYiA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxpc3RCbG9ja0xpc3RzID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9jO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9ibG9ja2xpc3RzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9jID0gZGVjb2RlcnMuTGlzdEJsb2NrTGlzdFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZUJsb2NrTGlzdCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2Q7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgICAgIHdvcmRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qud29yZHMsXG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvYmxvY2tsaXN0cycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfZCA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUJsb2NrTGlzdCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2U7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnREVMRVRFJywgJy9hcGkvdjIvYmxvY2tsaXN0cy97bmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9lID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0QmxvY2tMaXN0ID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9ibG9ja2xpc3RzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX2YgPSBkZWNvZGVycy5HZXRCbG9ja0xpc3RSZXNwb25zZSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVCbG9ja0xpc3QgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9nO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHdvcmRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qud29yZHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQVVQnLCAnL2FwaS92Mi9ibG9ja2xpc3RzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2cgPSBkZWNvZGVycy5SZXNwb25zZSkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGVja1B1c2ggPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9oO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBhcG5fdGVtcGxhdGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hcG5fdGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgZmlyZWJhc2VfZGF0YV90ZW1wbGF0ZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZpcmViYXNlX2RhdGFfdGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgZmlyZWJhc2VfdGVtcGxhdGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maXJlYmFzZV90ZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZV9pZCxcbiAgICAgICAgICAgICAgICBwdXNoX3Byb3ZpZGVyX25hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wdXNoX3Byb3ZpZGVyX25hbWUsXG4gICAgICAgICAgICAgICAgcHVzaF9wcm92aWRlcl90eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucHVzaF9wcm92aWRlcl90eXBlLFxuICAgICAgICAgICAgICAgIHNraXBfZGV2aWNlczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNraXBfZGV2aWNlcyxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGVja19wdXNoJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9oID0gZGVjb2RlcnMuQ2hlY2tQdXNoUmVzcG9uc2UpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hlY2tTTlMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9qO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBzbnNfa2V5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX2tleSxcbiAgICAgICAgICAgICAgICBzbnNfc2VjcmV0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX3NlY3JldCxcbiAgICAgICAgICAgICAgICBzbnNfdG9waWNfYXJuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc25zX3RvcGljX2FybixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGVja19zbnMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2ogPSBkZWNvZGVycy5DaGVja1NOU1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoZWNrU1FTID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfaztcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgc3FzX2tleTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNxc19rZXksXG4gICAgICAgICAgICAgICAgc3FzX3NlY3JldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNxc19zZWNyZXQsXG4gICAgICAgICAgICAgICAgc3FzX3VybDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNxc191cmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hlY2tfc3FzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9rID0gZGVjb2RlcnMuQ2hlY2tTUVNSZXNwb25zZSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVEZXZpY2UgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9sO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2RldmljZXMnLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfbCA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxpc3REZXZpY2VzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvZGV2aWNlcycsIHVuZGVmaW5lZCwgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF9tID0gZGVjb2RlcnMuTGlzdERldmljZXNSZXNwb25zZSkgPT09IG51bGwgfHwgX20gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVEZXZpY2UgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9vO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIHB1c2hfcHJvdmlkZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wdXNoX3Byb3ZpZGVyLFxuICAgICAgICAgICAgICAgIHB1c2hfcHJvdmlkZXJfbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnB1c2hfcHJvdmlkZXJfbmFtZSxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB2b2lwX3Rva2VuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qudm9pcF90b2tlbixcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9kZXZpY2VzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9vID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF9vID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfby5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwb3J0VXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9wO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2V4cG9ydC91c2VycycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfcCA9IGRlY29kZXJzLkV4cG9ydFVzZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdEV4dGVybmFsU3RvcmFnZSA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfcTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvZXh0ZXJuYWxfc3RvcmFnZScsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfcSA9IGRlY29kZXJzLkxpc3RFeHRlcm5hbFN0b3JhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgX3EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9xLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVFeHRlcm5hbFN0b3JhZ2UgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9yO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBidWNrZXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5idWNrZXQsXG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3RvcmFnZV90eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3RvcmFnZV90eXBlLFxuICAgICAgICAgICAgICAgIGdjc19jcmVkZW50aWFsczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lmdjc19jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF0aCxcbiAgICAgICAgICAgICAgICBhd3NfczM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hd3NfczMsXG4gICAgICAgICAgICAgICAgYXp1cmVfYmxvYjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF6dXJlX2Jsb2IsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvZXh0ZXJuYWxfc3RvcmFnZScsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfciA9IGRlY29kZXJzLkNyZWF0ZUV4dGVybmFsU3RvcmFnZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3IuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUV4dGVybmFsU3RvcmFnZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3M7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnREVMRVRFJywgJy9hcGkvdjIvZXh0ZXJuYWxfc3RvcmFnZS97bmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9zID0gZGVjb2RlcnMuRGVsZXRlRXh0ZXJuYWxTdG9yYWdlUmVzcG9uc2UpID09PSBudWxsIHx8IF9zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlRXh0ZXJuYWxTdG9yYWdlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfdDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBidWNrZXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5idWNrZXQsXG4gICAgICAgICAgICAgICAgc3RvcmFnZV90eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3RvcmFnZV90eXBlLFxuICAgICAgICAgICAgICAgIGdjc19jcmVkZW50aWFsczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lmdjc19jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF0aCxcbiAgICAgICAgICAgICAgICBhd3NfczM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hd3NfczMsXG4gICAgICAgICAgICAgICAgYXp1cmVfYmxvYjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF6dXJlX2Jsb2IsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQVVQnLCAnL2FwaS92Mi9leHRlcm5hbF9zdG9yYWdlL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX3QgPSBkZWNvZGVycy5VcGRhdGVFeHRlcm5hbFN0b3JhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgX3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGVja0V4dGVybmFsU3RvcmFnZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3U7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvZXh0ZXJuYWxfc3RvcmFnZS97bmFtZX0vY2hlY2snLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF91ID0gZGVjb2RlcnMuQ2hlY2tFeHRlcm5hbFN0b3JhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgX3UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVHdWVzdCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3Y7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2d1ZXN0JywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF92ID0gZGVjb2RlcnMuQ3JlYXRlR3Vlc3RSZXNwb25zZSkgPT09IG51bGwgfHwgX3YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVJbXBvcnRVUkwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF93O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZpbGVuYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2ltcG9ydF91cmxzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF93ID0gZGVjb2RlcnMuQ3JlYXRlSW1wb3J0VVJMUmVzcG9uc2UpID09PSBudWxsIHx8IF93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdEltcG9ydHMgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3g7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2ltcG9ydHMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX3ggPSBkZWNvZGVycy5MaXN0SW1wb3J0c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfeCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3guY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZUltcG9ydCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3k7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG1vZGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tb2RlLFxuICAgICAgICAgICAgICAgIHBhdGg6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wYXRoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2ltcG9ydHMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX3kgPSBkZWNvZGVycy5DcmVhdGVJbXBvcnRSZXNwb25zZSkgPT09IG51bGwgfHwgX3kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF95LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRJbXBvcnQgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF96O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvaW1wb3J0cy97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfeiA9IGRlY29kZXJzLkdldEltcG9ydFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfeiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ouY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldE9HID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMDtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVybDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL29nJywgdW5kZWZpbmVkLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzAgPSBkZWNvZGVycy5HZXRPR1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzAuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxpc3RQZXJtaXNzaW9ucyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvcGVybWlzc2lvbnMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzEgPSBkZWNvZGVycy5MaXN0UGVybWlzc2lvbnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRQZXJtaXNzaW9uID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL3Blcm1pc3Npb25zL3tpZH0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF8yID0gZGVjb2RlcnMuR2V0Q3VzdG9tUGVybWlzc2lvblJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzIuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxpc3RQdXNoUHJvdmlkZXJzID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9wdXNoX3Byb3ZpZGVycycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfMyA9IGRlY29kZXJzLkxpc3RQdXNoUHJvdmlkZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF8zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBzZXJ0UHVzaFByb3ZpZGVyID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfNDtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgcHVzaF9wcm92aWRlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnB1c2hfcHJvdmlkZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvcHVzaF9wcm92aWRlcnMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzQgPSBkZWNvZGVycy5VcHNlcnRQdXNoUHJvdmlkZXJSZXNwb25zZSkgPT09IG51bGwgfHwgXzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF80LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVQdXNoUHJvdmlkZXIgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF81O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL3B1c2hfcHJvdmlkZXJzL3t0eXBlfS97bmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF81ID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF81ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0UmF0ZUxpbWl0cyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzY7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfc2lkZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNlcnZlcl9zaWRlLFxuICAgICAgICAgICAgICAgIGFuZHJvaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hbmRyb2lkLFxuICAgICAgICAgICAgICAgIGlvczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlvcyxcbiAgICAgICAgICAgICAgICB3ZWI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC53ZWIsXG4gICAgICAgICAgICAgICAgZW5kcG9pbnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZW5kcG9pbnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvcmF0ZV9saW1pdHMnLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfNiA9IGRlY29kZXJzLkdldFJhdGVMaW1pdHNSZXNwb25zZSkgPT09IG51bGwgfHwgXzYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF82LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5saXN0Um9sZXMgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzc7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL3JvbGVzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF83ID0gZGVjb2RlcnMuTGlzdFJvbGVzUmVzcG9uc2UpID09PSBudWxsIHx8IF83ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUm9sZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzg7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3JvbGVzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF84ID0gZGVjb2RlcnMuQ3JlYXRlUm9sZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzguY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZVJvbGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF85O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL3JvbGVzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzkgPSBkZWNvZGVycy5SZXNwb25zZSkgPT09IG51bGwgfHwgXzkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF85LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRUYXNrID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTA7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi90YXNrcy97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfMTAgPSBkZWNvZGVycy5HZXRUYXNrUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEwLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5xdWVyeVVzZXJzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTE7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF5bG9hZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL3VzZXJzJywgdW5kZWZpbmVkLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzExID0gZGVjb2RlcnMuUXVlcnlVc2Vyc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xMS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlVXNlcnNQYXJ0aWFsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQQVRDSCcsICcvYXBpL3YyL3VzZXJzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xMiA9IGRlY29kZXJzLlVwZGF0ZVVzZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEyLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVVc2VycyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzEzO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3VzZXJzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xMyA9IGRlY29kZXJzLlVwZGF0ZVVzZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEzLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRCbG9ja2VkVXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xNDtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdXNlcnMvYmxvY2snLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfMTQgPSBkZWNvZGVycy5HZXRCbG9ja2VkVXNlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzE0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTQuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJsb2NrVXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xNTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgYmxvY2tlZF91c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmxvY2tlZF91c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3VzZXJzL2Jsb2NrJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xNSA9IGRlY29kZXJzLkJsb2NrVXNlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzE1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTUuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGVVc2VycyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzE2O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWRzLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRfYnlfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jcmVhdGVkX2J5X2lkLFxuICAgICAgICAgICAgICAgIG1hcmtfY2hhbm5lbHNfZGVsZXRlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1hcmtfY2hhbm5lbHNfZGVsZXRlZCxcbiAgICAgICAgICAgICAgICBtYXJrX21lc3NhZ2VzX2RlbGV0ZWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tYXJrX21lc3NhZ2VzX2RlbGV0ZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdXNlcnMvZGVhY3RpdmF0ZScsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTYgPSBkZWNvZGVycy5EZWFjdGl2YXRlVXNlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzE2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTYuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZVVzZXJzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTc7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZHMsXG4gICAgICAgICAgICAgICAgY2FsbHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jYWxscyxcbiAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY29udmVyc2F0aW9ucyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgIG5ld19jYWxsX293bmVyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmV3X2NhbGxfb3duZXJfaWQsXG4gICAgICAgICAgICAgICAgbmV3X2NoYW5uZWxfb3duZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uZXdfY2hhbm5lbF9vd25lcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi91c2Vycy9kZWxldGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzE3ID0gZGVjb2RlcnMuRGVsZXRlVXNlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzE3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTcuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlYWN0aXZhdGVVc2VycyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzE4O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWRzLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRfYnlfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jcmVhdGVkX2J5X2lkLFxuICAgICAgICAgICAgICAgIHJlc3RvcmVfY2hhbm5lbHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZXN0b3JlX2NoYW5uZWxzLFxuICAgICAgICAgICAgICAgIHJlc3RvcmVfbWVzc2FnZXM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZXN0b3JlX21lc3NhZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3VzZXJzL3JlYWN0aXZhdGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzE4ID0gZGVjb2RlcnMuUmVhY3RpdmF0ZVVzZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF8xOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzE4LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXN0b3JlVXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xOTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi91c2Vycy9yZXN0b3JlJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xOSA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xOS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5ibG9ja1VzZXJzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjA7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGJsb2NrZWRfdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJsb2NrZWRfdXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi91c2Vycy91bmJsb2NrJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yMCA9IGRlY29kZXJzLlVuYmxvY2tVc2Vyc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMjAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8yMC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZVVzZXIgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8yMTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2J5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3JlYXRlZF9ieV9pZCxcbiAgICAgICAgICAgICAgICBtYXJrX21lc3NhZ2VzX2RlbGV0ZWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tYXJrX21lc3NhZ2VzX2RlbGV0ZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdXNlcnMve3VzZXJfaWR9L2RlYWN0aXZhdGUnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yMSA9IGRlY29kZXJzLkRlYWN0aXZhdGVVc2VyUmVzcG9uc2UpID09PSBudWxsIHx8IF8yMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzIxLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leHBvcnRVc2VyID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjI7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdXNlcnMve3VzZXJfaWR9L2V4cG9ydCcsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzIyID0gZGVjb2RlcnMuRXhwb3J0VXNlclJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8yMi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVhY3RpdmF0ZVVzZXIgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8yMztcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2J5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3JlYXRlZF9ieV9pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgICAgICByZXN0b3JlX21lc3NhZ2VzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVzdG9yZV9tZXNzYWdlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi91c2Vycy97dXNlcl9pZH0vcmVhY3RpdmF0ZScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzIzID0gZGVjb2RlcnMuUmVhY3RpdmF0ZVVzZXJSZXNwb25zZSkgPT09IG51bGwgfHwgXzIzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMjMuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgVmlkZW9BcGkgZXh0ZW5kcyBCYXNlQXBpIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5xdWVyeUNhbGxNZW1iZXJzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBsaW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxpbWl0LFxuICAgICAgICAgICAgICAgIG5leHQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uZXh0LFxuICAgICAgICAgICAgICAgIHByZXY6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wcmV2LFxuICAgICAgICAgICAgICAgIHNvcnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zb3J0LFxuICAgICAgICAgICAgICAgIGZpbHRlcl9jb25kaXRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyX2NvbmRpdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC9tZW1iZXJzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9hID0gZGVjb2RlcnMuUXVlcnlDYWxsTWVtYmVyc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5Q2FsbFN0YXRzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5saW1pdCxcbiAgICAgICAgICAgICAgICBuZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmV4dCxcbiAgICAgICAgICAgICAgICBwcmV2OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucHJldixcbiAgICAgICAgICAgICAgICBzb3J0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc29ydCxcbiAgICAgICAgICAgICAgICBmaWx0ZXJfY29uZGl0aW9uczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZpbHRlcl9jb25kaXRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwvc3RhdHMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2IgPSBkZWNvZGVycy5RdWVyeUNhbGxTdGF0c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldENhbGwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9jO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbWVtYmVyc19saW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lbWJlcnNfbGltaXQsXG4gICAgICAgICAgICAgICAgcmluZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJpbmcsXG4gICAgICAgICAgICAgICAgbm90aWZ5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qubm90aWZ5LFxuICAgICAgICAgICAgICAgIHZpZGVvOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudmlkZW8sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfYyA9IGRlY29kZXJzLkdldENhbGxSZXNwb25zZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0c19hdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnN0YXJ0c19hdCxcbiAgICAgICAgICAgICAgICBjdXN0b206IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b20sXG4gICAgICAgICAgICAgICAgc2V0dGluZ3Nfb3ZlcnJpZGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zZXR0aW5nc19vdmVycmlkZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BBVENIJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2QgPSBkZWNvZGVycy5VcGRhdGVDYWxsUmVzcG9uc2UpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0T3JDcmVhdGVDYWxsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG1lbWJlcnNfbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZW1iZXJzX2xpbWl0LFxuICAgICAgICAgICAgICAgIG5vdGlmeTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5vdGlmeSxcbiAgICAgICAgICAgICAgICByaW5nOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmluZyxcbiAgICAgICAgICAgICAgICB2aWRlbzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnZpZGVvLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kYXRhLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9lID0gZGVjb2RlcnMuR2V0T3JDcmVhdGVDYWxsUmVzcG9uc2UpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmxvY2tVc2VyID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vYmxvY2snLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9mID0gZGVjb2RlcnMuQmxvY2tVc2VyUmVzcG9uc2UpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVsZXRlQ2FsbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2c7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBoYXJkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaGFyZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L2RlbGV0ZScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2cgPSBkZWNvZGVycy5EZWxldGVDYWxsUmVzcG9uc2UpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZENhbGxFdmVudCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2g7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICBjdXN0b206IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b20sXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9ldmVudCcsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2ggPSBkZWNvZGVycy5TZW5kQ2FsbEV2ZW50UmVzcG9uc2UpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29sbGVjdFVzZXJGZWVkYmFjayA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2o7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNlc3Npb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICByYXRpbmc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yYXRpbmcsXG4gICAgICAgICAgICAgICAgc2RrOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2RrLFxuICAgICAgICAgICAgICAgIHNka192ZXJzaW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2RrX3ZlcnNpb24sXG4gICAgICAgICAgICAgICAgdXNlcl9zZXNzaW9uX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9zZXNzaW9uX2lkLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlYXNvbixcbiAgICAgICAgICAgICAgICBjdXN0b206IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b20sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9mZWVkYmFjay97c2Vzc2lvbn0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9qID0gZGVjb2RlcnMuQ29sbGVjdFVzZXJGZWVkYmFja1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdvTGl2ZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2s7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICByZWNvcmRpbmdfc3RvcmFnZV9uYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVjb3JkaW5nX3N0b3JhZ2VfbmFtZSxcbiAgICAgICAgICAgICAgICBzdGFydF9obHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zdGFydF9obHMsXG4gICAgICAgICAgICAgICAgc3RhcnRfcmVjb3JkaW5nOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3RhcnRfcmVjb3JkaW5nLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3J0bXBfYnJvYWRjYXN0czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnN0YXJ0X3J0bXBfYnJvYWRjYXN0cyxcbiAgICAgICAgICAgICAgICBzdGFydF90cmFuc2NyaXB0aW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3RhcnRfdHJhbnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB0cmFuc2NyaXB0aW9uX3N0b3JhZ2VfbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRyYW5zY3JpcHRpb25fc3RvcmFnZV9uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vZ29fbGl2ZScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2sgPSBkZWNvZGVycy5Hb0xpdmVSZXNwb25zZSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmRDYWxsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L21hcmtfZW5kZWQnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9sID0gZGVjb2RlcnMuRW5kQ2FsbFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbGxNZW1iZXJzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHJlbW92ZV9tZW1iZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVtb3ZlX21lbWJlcnMsXG4gICAgICAgICAgICAgICAgdXBkYXRlX21lbWJlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51cGRhdGVfbWVtYmVycyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L21lbWJlcnMnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9tID0gZGVjb2RlcnMuVXBkYXRlQ2FsbE1lbWJlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgX20gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tdXRlVXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9vO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgYXVkaW86IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hdWRpbyxcbiAgICAgICAgICAgICAgICBtdXRlX2FsbF91c2VyczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm11dGVfYWxsX3VzZXJzLFxuICAgICAgICAgICAgICAgIG11dGVkX2J5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubXV0ZWRfYnlfaWQsXG4gICAgICAgICAgICAgICAgc2NyZWVuc2hhcmU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zY3JlZW5zaGFyZSxcbiAgICAgICAgICAgICAgICBzY3JlZW5zaGFyZV9hdWRpbzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNjcmVlbnNoYXJlX2F1ZGlvLFxuICAgICAgICAgICAgICAgIHZpZGVvOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudmlkZW8sXG4gICAgICAgICAgICAgICAgdXNlcl9pZHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkcyxcbiAgICAgICAgICAgICAgICBtdXRlZF9ieTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm11dGVkX2J5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vbXV0ZV91c2VycycsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX28gPSBkZWNvZGVycy5NdXRlVXNlcnNSZXNwb25zZSkgPT09IG51bGwgfHwgX28gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52aWRlb1BpbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3A7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2Vzc2lvbl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L3BpbicsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX3AgPSBkZWNvZGVycy5QaW5SZXNwb25zZSkgPT09IG51bGwgfHwgX3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5saXN0UmVjb3JkaW5ncyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3E7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L3JlY29yZGluZ3MnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9xID0gZGVjb2RlcnMuTGlzdFJlY29yZGluZ3NSZXNwb25zZSkgPT09IG51bGwgfHwgX3EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9xLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFydFJUTVBCcm9hZGNhc3RzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfcjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGJyb2FkY2FzdHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5icm9hZGNhc3RzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vcnRtcF9icm9hZGNhc3RzJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfciA9IGRlY29kZXJzLlN0YXJ0UlRNUEJyb2FkY2FzdHNSZXNwb25zZSkgPT09IG51bGwgfHwgX3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9wQWxsUlRNUEJyb2FkY2FzdHMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9zO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vcnRtcF9icm9hZGNhc3RzL3N0b3AnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9zID0gZGVjb2RlcnMuU3RvcEFsbFJUTVBCcm9hZGNhc3RzUmVzcG9uc2UpID09PSBudWxsIHx8IF9zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcFJUTVBCcm9hZGNhc3QgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF90O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vcnRtcF9icm9hZGNhc3RzL3tuYW1lfS9zdG9wJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfdCA9IGRlY29kZXJzLlN0b3BSVE1QQnJvYWRjYXN0c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3QuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXJ0SExTQnJvYWRjYXN0aW5nID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfdTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L3N0YXJ0X2Jyb2FkY2FzdGluZycsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX3UgPSBkZWNvZGVycy5TdGFydEhMU0Jyb2FkY2FzdGluZ1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfdSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3UuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXJ0UmVjb3JkaW5nID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfdjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHJlY29yZGluZ19leHRlcm5hbF9zdG9yYWdlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVjb3JkaW5nX2V4dGVybmFsX3N0b3JhZ2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9zdGFydF9yZWNvcmRpbmcnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF92ID0gZGVjb2RlcnMuU3RhcnRSZWNvcmRpbmdSZXNwb25zZSkgPT09IG51bGwgfHwgX3YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFydFRyYW5zY3JpcHRpb24gPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF93O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdGlvbl9leHRlcm5hbF9zdG9yYWdlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHJhbnNjcmlwdGlvbl9leHRlcm5hbF9zdG9yYWdlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vc3RhcnRfdHJhbnNjcmlwdGlvbicsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX3cgPSBkZWNvZGVycy5TdGFydFRyYW5zY3JpcHRpb25SZXNwb25zZSkgPT09IG51bGwgfHwgX3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRDYWxsU3RhdHMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF94O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zZXNzaW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9zdGF0cy97c2Vzc2lvbn0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF94ID0gZGVjb2RlcnMuR2V0Q2FsbFN0YXRzUmVzcG9uc2UpID09PSBudWxsIHx8IF94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcEhMU0Jyb2FkY2FzdGluZyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3k7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9zdG9wX2Jyb2FkY2FzdGluZycsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX3kgPSBkZWNvZGVycy5TdG9wSExTQnJvYWRjYXN0aW5nUmVzcG9uc2UpID09PSBudWxsIHx8IF95ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcExpdmUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF96O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vc3RvcF9saXZlJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfeiA9IGRlY29kZXJzLlN0b3BMaXZlUmVzcG9uc2UpID09PSBudWxsIHx8IF96ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfei5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcFJlY29yZGluZyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzA7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS9zdG9wX3JlY29yZGluZycsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzAgPSBkZWNvZGVycy5TdG9wUmVjb3JkaW5nUmVzcG9uc2UpID09PSBudWxsIHx8IF8wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcFRyYW5zY3JpcHRpb24gPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vc3RvcF90cmFuc2NyaXB0aW9uJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfMSA9IGRlY29kZXJzLlN0b3BUcmFuc2NyaXB0aW9uUmVzcG9uc2UpID09PSBudWxsIHx8IF8xID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdFRyYW5zY3JpcHRpb25zID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vdHJhbnNjcmlwdGlvbnMnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF8yID0gZGVjb2RlcnMuTGlzdFRyYW5zY3JpcHRpb25zUmVzcG9uc2UpID09PSBudWxsIHx8IF8yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5ibG9ja1VzZXIgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbC97dHlwZX0ve2lkfS91bmJsb2NrJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMyA9IGRlY29kZXJzLlVuYmxvY2tVc2VyUmVzcG9uc2UpID09PSBudWxsIHx8IF8zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmlkZW9VbnBpbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzQ7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2Vzc2lvbl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L3VucGluJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfNCA9IGRlY29kZXJzLlVucGluUmVzcG9uc2UpID09PSBudWxsIHx8IF80ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlVXNlclBlcm1pc3Npb25zID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfNTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIGdyYW50X3Blcm1pc3Npb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZ3JhbnRfcGVybWlzc2lvbnMsXG4gICAgICAgICAgICAgICAgcmV2b2tlX3Blcm1pc3Npb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmV2b2tlX3Blcm1pc3Npb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0vdXNlcl9wZXJtaXNzaW9ucycsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzUgPSBkZWNvZGVycy5VcGRhdGVVc2VyUGVybWlzc2lvbnNSZXNwb25zZSkgPT09IG51bGwgfHwgXzUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF81LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVSZWNvcmRpbmcgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF82O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zZXNzaW9uLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsZW5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCAnL2FwaS92Mi92aWRlby9jYWxsL3t0eXBlfS97aWR9L3tzZXNzaW9ufS9yZWNvcmRpbmdzL3tmaWxlbmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF82ID0gZGVjb2RlcnMuRGVsZXRlUmVjb3JkaW5nUmVzcG9uc2UpID09PSBudWxsIHx8IF82ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVsZXRlVHJhbnNjcmlwdGlvbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzc7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNlc3Npb24sXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maWxlbmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL3ZpZGVvL2NhbGwve3R5cGV9L3tpZH0ve3Nlc3Npb259L3RyYW5zY3JpcHRpb25zL3tmaWxlbmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF83ID0gZGVjb2RlcnMuRGVsZXRlVHJhbnNjcmlwdGlvblJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfNyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzcuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5Q2FsbHMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF84O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxpbWl0LFxuICAgICAgICAgICAgICAgIG5leHQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uZXh0LFxuICAgICAgICAgICAgICAgIHByZXY6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wcmV2LFxuICAgICAgICAgICAgICAgIHNvcnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zb3J0LFxuICAgICAgICAgICAgICAgIGZpbHRlcl9jb25kaXRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyX2NvbmRpdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvdmlkZW8vY2FsbHMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzggPSBkZWNvZGVycy5RdWVyeUNhbGxzUmVzcG9uc2UpID09PSBudWxsIHx8IF84ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfOC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdENhbGxUeXBlcyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfOTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdmlkZW8vY2FsbHR5cGVzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF85ID0gZGVjb2RlcnMuTGlzdENhbGxUeXBlUmVzcG9uc2UpID09PSBudWxsIHx8IF85ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfOS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2FsbFR5cGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xMDtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxfc3RvcmFnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmV4dGVybmFsX3N0b3JhZ2UsXG4gICAgICAgICAgICAgICAgZ3JhbnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZ3JhbnRzLFxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbl9zZXR0aW5nczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5vdGlmaWNhdGlvbl9zZXR0aW5ncyxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNldHRpbmdzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL3ZpZGVvL2NhbGx0eXBlcycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTAgPSBkZWNvZGVycy5DcmVhdGVDYWxsVHlwZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xMC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVsZXRlQ2FsbFR5cGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xMTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCAnL2FwaS92Mi92aWRlby9jYWxsdHlwZXMve25hbWV9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfMTEgPSBkZWNvZGVycy5SZXNwb25zZSkgPT09IG51bGwgfHwgXzExID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTEuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldENhbGxUeXBlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTI7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdmlkZW8vY2FsbHR5cGVzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzEyID0gZGVjb2RlcnMuR2V0Q2FsbFR5cGVSZXNwb25zZSkgPT09IG51bGwgfHwgXzEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTIuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbGxUeXBlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTM7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxfc3RvcmFnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmV4dGVybmFsX3N0b3JhZ2UsXG4gICAgICAgICAgICAgICAgZ3JhbnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZ3JhbnRzLFxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbl9zZXR0aW5nczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5vdGlmaWNhdGlvbl9zZXR0aW5ncyxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNldHRpbmdzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUFVUJywgJy9hcGkvdjIvdmlkZW8vY2FsbHR5cGVzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzEzID0gZGVjb2RlcnMuVXBkYXRlQ2FsbFR5cGVSZXNwb25zZSkgPT09IG51bGwgfHwgXzEzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTMuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldEVkZ2VzID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xNDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvdmlkZW8vZWRnZXMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzE0ID0gZGVjb2RlcnMuR2V0RWRnZXNSZXNwb25zZSkgPT09IG51bGwgfHwgXzE0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTQuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FsbEFwaSB7XG4gICAgY29uc3RydWN0b3IodmlkZW9BcGksIHR5cGUsIGlkKSB7XG4gICAgICAgIHRoaXMudmlkZW9BcGkgPSB2aWRlb0FwaTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmdldCA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5nZXRDYWxsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkudXBkYXRlQ2FsbChPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0T3JDcmVhdGUgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkuZ2V0T3JDcmVhdGVDYWxsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ibG9ja1VzZXIgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkuYmxvY2tVc2VyKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZWxldGUgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkuZGVsZXRlQ2FsbChPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZENhbGxFdmVudCA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5zZW5kQ2FsbEV2ZW50KE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2xsZWN0VXNlckZlZWRiYWNrID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLmNvbGxlY3RVc2VyRmVlZGJhY2soT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdvTGl2ZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5nb0xpdmUoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLmVuZENhbGwoeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbGxNZW1iZXJzID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnVwZGF0ZUNhbGxNZW1iZXJzKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tdXRlVXNlcnMgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkubXV0ZVVzZXJzKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy52aWRlb1BpbiA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS52aWRlb1BpbihPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGlzdFJlY29yZGluZ3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5saXN0UmVjb3JkaW5ncyh7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RhcnRSVE1QQnJvYWRjYXN0cyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5zdGFydFJUTVBCcm9hZGNhc3RzKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9wQWxsUlRNUEJyb2FkY2FzdHMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5zdG9wQWxsUlRNUEJyb2FkY2FzdHMoe1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3BSVE1QQnJvYWRjYXN0ID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnN0b3BSVE1QQnJvYWRjYXN0KE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdGFydEhMU0Jyb2FkY2FzdGluZyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnN0YXJ0SExTQnJvYWRjYXN0aW5nKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdGFydFJlY29yZGluZyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5zdGFydFJlY29yZGluZyhPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RhcnRUcmFuc2NyaXB0aW9uID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnN0YXJ0VHJhbnNjcmlwdGlvbihPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0Q2FsbFN0YXRzID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLmdldENhbGxTdGF0cyhPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcEhMU0Jyb2FkY2FzdGluZyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnN0b3BITFNCcm9hZGNhc3RpbmcoeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3BMaXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkuc3RvcExpdmUoeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3BSZWNvcmRpbmcgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5zdG9wUmVjb3JkaW5nKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9wVHJhbnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnN0b3BUcmFuc2NyaXB0aW9uKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5saXN0VHJhbnNjcmlwdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5saXN0VHJhbnNjcmlwdGlvbnMoeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVuYmxvY2tVc2VyID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnVuYmxvY2tVc2VyKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy52aWRlb1VucGluID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvQXBpLnZpZGVvVW5waW4oT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZVVzZXJQZXJtaXNzaW9ucyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS51cGRhdGVVc2VyUGVybWlzc2lvbnMoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlbGV0ZVJlY29yZGluZyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0FwaS5kZWxldGVSZWNvcmRpbmcoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlbGV0ZVRyYW5zY3JpcHRpb24gPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkuZGVsZXRlVHJhbnNjcmlwdGlvbihPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jbGFzcyBTdHJlYW1DYWxsIGV4dGVuZHMgQ2FsbEFwaSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY3JlYXRlID0gdGhpcy5nZXRPckNyZWF0ZTtcbiAgICAgICAgdGhpcy5xdWVyeU1lbWJlcnMgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9BcGkucXVlcnlDYWxsTWVtYmVycyhPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCAocmVxdWVzdCAhPT0gbnVsbCAmJiByZXF1ZXN0ICE9PSB2b2lkIDAgPyByZXF1ZXN0IDoge30pKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBjaWQoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnR5cGV9OiR7dGhpcy5pZH1gO1xuICAgIH1cbn1cblxuY2xhc3MgU3RyZWFtVmlkZW9DbGllbnQgZXh0ZW5kcyBWaWRlb0FwaSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2FsbCA9ICh0eXBlLCBpZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1DYWxsKHRoaXMsIHR5cGUsIGlkKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNsYXNzIENoYXRBcGkgZXh0ZW5kcyBCYXNlQXBpIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5uZWxzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5saW1pdCxcbiAgICAgICAgICAgICAgICBtZW1iZXJfbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZW1iZXJfbGltaXQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZV9saW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2VfbGltaXQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qub2Zmc2V0LFxuICAgICAgICAgICAgICAgIHN0YXRlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc3RhdGUsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICAgICAgZmlsdGVyX2NvbmRpdGlvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maWx0ZXJfY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9hID0gZGVjb2RlcnMuUXVlcnlDaGFubmVsc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUNoYW5uZWxzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgY2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNpZHMsXG4gICAgICAgICAgICAgICAgaGFyZF9kZWxldGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5oYXJkX2RlbGV0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL2RlbGV0ZScsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfYiA9IGRlY29kZXJzLkRlbGV0ZUNoYW5uZWxzUmVzcG9uc2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFya0NoYW5uZWxzUmVhZCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2M7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHJlYWRfYnlfY2hhbm5lbDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlYWRfYnlfY2hhbm5lbCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3JlYWQnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2MgPSBkZWNvZGVycy5NYXJrUmVhZFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldE9yQ3JlYXRlRGlzdGluY3RDaGFubmVsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBoaWRlX2Zvcl9jcmVhdG9yOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaGlkZV9mb3JfY3JlYXRvcixcbiAgICAgICAgICAgICAgICBzdGF0ZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnN0YXRlLFxuICAgICAgICAgICAgICAgIHRocmVhZF91bnJlYWRfY291bnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGhyZWFkX3VucmVhZF9jb3VudHMsXG4gICAgICAgICAgICAgICAgZGF0YTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRhdGEsXG4gICAgICAgICAgICAgICAgbWVtYmVyczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lbWJlcnMsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZXNzYWdlcyxcbiAgICAgICAgICAgICAgICB3YXRjaGVyczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LndhdGNoZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHMve3R5cGV9L3F1ZXJ5JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfZCA9IGRlY29kZXJzLkNoYW5uZWxTdGF0ZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUNoYW5uZWwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9lO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaGFyZF9kZWxldGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5oYXJkX2RlbGV0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9JywgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF9lID0gZGVjb2RlcnMuRGVsZXRlQ2hhbm5lbFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUNoYW5uZWxQYXJ0aWFsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVuc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudW5zZXQsXG4gICAgICAgICAgICAgICAgc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2V0LFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUEFUQ0gnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfZiA9IGRlY29kZXJzLlVwZGF0ZUNoYW5uZWxQYXJ0aWFsUmVzcG9uc2UpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hhbm5lbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2c7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBhY2NlcHRfaW52aXRlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYWNjZXB0X2ludml0ZSxcbiAgICAgICAgICAgICAgICBjb29sZG93bjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNvb2xkb3duLFxuICAgICAgICAgICAgICAgIGhpZGVfaGlzdG9yeTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmhpZGVfaGlzdG9yeSxcbiAgICAgICAgICAgICAgICByZWplY3RfaW52aXRlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVqZWN0X2ludml0ZSxcbiAgICAgICAgICAgICAgICBza2lwX3B1c2g6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5za2lwX3B1c2gsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgYWRkX21lbWJlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hZGRfbWVtYmVycyxcbiAgICAgICAgICAgICAgICBhZGRfbW9kZXJhdG9yczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmFkZF9tb2RlcmF0b3JzLFxuICAgICAgICAgICAgICAgIGFzc2lnbl9yb2xlczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmFzc2lnbl9yb2xlcyxcbiAgICAgICAgICAgICAgICBkZW1vdGVfbW9kZXJhdG9yczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRlbW90ZV9tb2RlcmF0b3JzLFxuICAgICAgICAgICAgICAgIGludml0ZXM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pbnZpdGVzLFxuICAgICAgICAgICAgICAgIHJlbW92ZV9tZW1iZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVtb3ZlX21lbWJlcnMsXG4gICAgICAgICAgICAgICAgZGF0YTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRhdGEsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2cgPSBkZWNvZGVycy5VcGRhdGVDaGFubmVsUmVzcG9uc2UpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50ID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfaDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZXZlbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfS9ldmVudCcsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2ggPSBkZWNvZGVycy5FdmVudFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUZpbGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9qO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHMve3R5cGV9L3tpZH0vZmlsZScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfaiA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwbG9hZEZpbGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9rO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZmlsZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZpbGUsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfS9maWxlJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfayA9IGRlY29kZXJzLkZpbGVVcGxvYWRSZXNwb25zZSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oaWRlQ2hhbm5lbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2w7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBjbGVhcl9oaXN0b3J5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY2xlYXJfaGlzdG9yeSxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L2hpZGUnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9sID0gZGVjb2RlcnMuSGlkZUNoYW5uZWxSZXNwb25zZSkgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVJbWFnZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX207XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51cmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnREVMRVRFJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfS9pbWFnZScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfbSA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX20uY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwbG9hZEltYWdlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbztcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGZpbGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maWxlLFxuICAgICAgICAgICAgICAgIHVwbG9hZF9zaXplczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVwbG9hZF9zaXplcyxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L2ltYWdlJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfbyA9IGRlY29kZXJzLkltYWdlVXBsb2FkUmVzcG9uc2UpID09PSBudWxsIHx8IF9vID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfby5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlTWVtYmVyUGFydGlhbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3A7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1bnNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVuc2V0LFxuICAgICAgICAgICAgICAgIHNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNldCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BBVENIJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfS9tZW1iZXIve3VzZXJfaWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfcCA9IGRlY29kZXJzLlVwZGF0ZU1lbWJlclBhcnRpYWxSZXNwb25zZSkgPT09IG51bGwgfHwgX3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3E7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBmb3JjZV9tb2RlcmF0aW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZm9yY2VfbW9kZXJhdGlvbixcbiAgICAgICAgICAgICAgICBrZWVwX2NoYW5uZWxfaGlkZGVuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qua2VlcF9jaGFubmVsX2hpZGRlbixcbiAgICAgICAgICAgICAgICBwZW5kaW5nOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGVuZGluZyxcbiAgICAgICAgICAgICAgICBza2lwX2VucmljaF91cmw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5za2lwX2VucmljaF91cmwsXG4gICAgICAgICAgICAgICAgc2tpcF9wdXNoOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2tpcF9wdXNoLFxuICAgICAgICAgICAgICAgIHBlbmRpbmdfbWVzc2FnZV9tZXRhZGF0YTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBlbmRpbmdfbWVzc2FnZV9tZXRhZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L21lc3NhZ2UnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9xID0gZGVjb2RlcnMuU2VuZE1lc3NhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgX3EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9xLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRNYW55TWVzc2FnZXMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9yO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHMve3R5cGV9L3tpZH0vbWVzc2FnZXMnLCBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoX3IgPSBkZWNvZGVycy5HZXRNYW55TWVzc2FnZXNSZXNwb25zZSkgPT09IG51bGwgfHwgX3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRPckNyZWF0ZUNoYW5uZWwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9zO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaGlkZV9mb3JfY3JlYXRvcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmhpZGVfZm9yX2NyZWF0b3IsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zdGF0ZSxcbiAgICAgICAgICAgICAgICB0aHJlYWRfdW5yZWFkX2NvdW50czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRocmVhZF91bnJlYWRfY291bnRzLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kYXRhLFxuICAgICAgICAgICAgICAgIG1lbWJlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZW1iZXJzLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZXMsXG4gICAgICAgICAgICAgICAgd2F0Y2hlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC53YXRjaGVycyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L3F1ZXJ5JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfcyA9IGRlY29kZXJzLkNoYW5uZWxTdGF0ZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3MuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcmtSZWFkID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfdDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZXNzYWdlX2lkLFxuICAgICAgICAgICAgICAgIHRocmVhZF9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRocmVhZF9pZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L3JlYWQnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF90ID0gZGVjb2RlcnMuTWFya1JlYWRSZXNwb25zZSkgPT09IG51bGwgfHwgX3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaG93Q2hhbm5lbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3U7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWxzL3t0eXBlfS97aWR9L3Nob3cnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF91ID0gZGVjb2RlcnMuU2hvd0NoYW5uZWxSZXNwb25zZSkgPT09IG51bGwgfHwgX3UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50cnVuY2F0ZUNoYW5uZWwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF92O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaGFyZF9kZWxldGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5oYXJkX2RlbGV0ZSxcbiAgICAgICAgICAgICAgICBza2lwX3B1c2g6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5za2lwX3B1c2gsXG4gICAgICAgICAgICAgICAgdHJ1bmNhdGVkX2F0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudHJ1bmNhdGVkX2F0LFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHMve3R5cGV9L3tpZH0vdHJ1bmNhdGUnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF92ID0gZGVjb2RlcnMuVHJ1bmNhdGVDaGFubmVsUmVzcG9uc2UpID09PSBudWxsIHx8IF92ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFya1VucmVhZCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3c7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZV9pZCxcbiAgICAgICAgICAgICAgICB0aHJlYWRfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50aHJlYWRfaWQsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9jaGFubmVscy97dHlwZX0ve2lkfS91bnJlYWQnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF93ID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdENoYW5uZWxUeXBlcyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfeDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9jaGFubmVsdHlwZXMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX3ggPSBkZWNvZGVycy5MaXN0Q2hhbm5lbFR5cGVzUmVzcG9uc2UpID09PSBudWxsIHx8IF94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hhbm5lbFR5cGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF95O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBhdXRvbW9kOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b21vZCxcbiAgICAgICAgICAgICAgICBhdXRvbW9kX2JlaGF2aW9yOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b21vZF9iZWhhdmlvcixcbiAgICAgICAgICAgICAgICBtYXhfbWVzc2FnZV9sZW5ndGg6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tYXhfbWVzc2FnZV9sZW5ndGgsXG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgYmxvY2tsaXN0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmxvY2tsaXN0LFxuICAgICAgICAgICAgICAgIGJsb2NrbGlzdF9iZWhhdmlvcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJsb2NrbGlzdF9iZWhhdmlvcixcbiAgICAgICAgICAgICAgICBjb25uZWN0X2V2ZW50czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNvbm5lY3RfZXZlbnRzLFxuICAgICAgICAgICAgICAgIGN1c3RvbV9ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b21fZXZlbnRzLFxuICAgICAgICAgICAgICAgIG1hcmtfbWVzc2FnZXNfcGVuZGluZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1hcmtfbWVzc2FnZXNfcGVuZGluZyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlX3JldGVudGlvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2VfcmV0ZW50aW9uLFxuICAgICAgICAgICAgICAgIG11dGVzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubXV0ZXMsXG4gICAgICAgICAgICAgICAgcGFydGl0aW9uX3NpemU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wYXJ0aXRpb25fc2l6ZSxcbiAgICAgICAgICAgICAgICBwYXJ0aXRpb25fdHRsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGFydGl0aW9uX3R0bCxcbiAgICAgICAgICAgICAgICBwb2xsczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBvbGxzLFxuICAgICAgICAgICAgICAgIHB1c2hfbm90aWZpY2F0aW9uczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnB1c2hfbm90aWZpY2F0aW9ucyxcbiAgICAgICAgICAgICAgICByZWFjdGlvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZWFjdGlvbnMsXG4gICAgICAgICAgICAgICAgcmVhZF9ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZWFkX2V2ZW50cyxcbiAgICAgICAgICAgICAgICByZXBsaWVzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVwbGllcyxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zZWFyY2gsXG4gICAgICAgICAgICAgICAgdHlwaW5nX2V2ZW50czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGluZ19ldmVudHMsXG4gICAgICAgICAgICAgICAgdXBsb2FkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVwbG9hZHMsXG4gICAgICAgICAgICAgICAgdXJsX2VucmljaG1lbnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51cmxfZW5yaWNobWVudCxcbiAgICAgICAgICAgICAgICBibG9ja2xpc3RzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmxvY2tsaXN0cyxcbiAgICAgICAgICAgICAgICBjb21tYW5kczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNvbW1hbmRzLFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGVybWlzc2lvbnMsXG4gICAgICAgICAgICAgICAgZ3JhbnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZ3JhbnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHR5cGVzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF95ID0gZGVjb2RlcnMuQ3JlYXRlQ2hhbm5lbFR5cGVSZXNwb25zZSkgPT09IG51bGwgfHwgX3kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF95LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVDaGFubmVsVHlwZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3o7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnREVMRVRFJywgJy9hcGkvdjIvY2hhdC9jaGFubmVsdHlwZXMve25hbWV9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfeiA9IGRlY29kZXJzLlJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfeiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ouY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldENoYW5uZWxUeXBlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9jaGF0L2NoYW5uZWx0eXBlcy97bmFtZX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF8wID0gZGVjb2RlcnMuR2V0Q2hhbm5lbFR5cGVSZXNwb25zZSkgPT09IG51bGwgfHwgXzAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8wLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVDaGFubmVsVHlwZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzE7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgYXV0b21vZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF1dG9tb2QsXG4gICAgICAgICAgICAgICAgYXV0b21vZF9iZWhhdmlvcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF1dG9tb2RfYmVoYXZpb3IsXG4gICAgICAgICAgICAgICAgbWF4X21lc3NhZ2VfbGVuZ3RoOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWF4X21lc3NhZ2VfbGVuZ3RoLFxuICAgICAgICAgICAgICAgIGJsb2NrbGlzdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJsb2NrbGlzdCxcbiAgICAgICAgICAgICAgICBibG9ja2xpc3RfYmVoYXZpb3I6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5ibG9ja2xpc3RfYmVoYXZpb3IsXG4gICAgICAgICAgICAgICAgY29ubmVjdF9ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jb25uZWN0X2V2ZW50cyxcbiAgICAgICAgICAgICAgICBjdXN0b21fZXZlbnRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3VzdG9tX2V2ZW50cyxcbiAgICAgICAgICAgICAgICBtYXJrX21lc3NhZ2VzX3BlbmRpbmc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tYXJrX21lc3NhZ2VzX3BlbmRpbmcsXG4gICAgICAgICAgICAgICAgbXV0ZXM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tdXRlcyxcbiAgICAgICAgICAgICAgICBwYXJ0aXRpb25fc2l6ZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBhcnRpdGlvbl9zaXplLFxuICAgICAgICAgICAgICAgIHBhcnRpdGlvbl90dGw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wYXJ0aXRpb25fdHRsLFxuICAgICAgICAgICAgICAgIHBvbGxzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucG9sbHMsXG4gICAgICAgICAgICAgICAgcHVzaF9ub3RpZmljYXRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucHVzaF9ub3RpZmljYXRpb25zLFxuICAgICAgICAgICAgICAgIHF1b3RlczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnF1b3RlcyxcbiAgICAgICAgICAgICAgICByZWFjdGlvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZWFjdGlvbnMsXG4gICAgICAgICAgICAgICAgcmVhZF9ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZWFkX2V2ZW50cyxcbiAgICAgICAgICAgICAgICByZW1pbmRlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZW1pbmRlcnMsXG4gICAgICAgICAgICAgICAgcmVwbGllczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlcGxpZXMsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2VhcmNoLFxuICAgICAgICAgICAgICAgIHR5cGluZ19ldmVudHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50eXBpbmdfZXZlbnRzLFxuICAgICAgICAgICAgICAgIHVwbG9hZHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51cGxvYWRzLFxuICAgICAgICAgICAgICAgIHVybF9lbnJpY2htZW50OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXJsX2VucmljaG1lbnQsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF9mbGFnX3JlYXNvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hbGxvd2VkX2ZsYWdfcmVhc29ucyxcbiAgICAgICAgICAgICAgICBibG9ja2xpc3RzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmxvY2tsaXN0cyxcbiAgICAgICAgICAgICAgICBjb21tYW5kczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNvbW1hbmRzLFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGVybWlzc2lvbnMsXG4gICAgICAgICAgICAgICAgYXV0b21vZF90aHJlc2hvbGRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b21vZF90aHJlc2hvbGRzLFxuICAgICAgICAgICAgICAgIGdyYW50czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmdyYW50cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BVVCcsICcvYXBpL3YyL2NoYXQvY2hhbm5lbHR5cGVzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzEgPSBkZWNvZGVycy5VcGRhdGVDaGFubmVsVHlwZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxpc3RDb21tYW5kcyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9jb21tYW5kcycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfMiA9IGRlY29kZXJzLkxpc3RDb21tYW5kc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzIuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbW1hbmQgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgICAgIGFyZ3M6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hcmdzLFxuICAgICAgICAgICAgICAgIHNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNldCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2NvbW1hbmRzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8zID0gZGVjb2RlcnMuQ3JlYXRlQ29tbWFuZFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzMuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZUNvbW1hbmQgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF80O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2NoYXQvY29tbWFuZHMve25hbWV9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfNCA9IGRlY29kZXJzLkRlbGV0ZUNvbW1hbmRSZXNwb25zZSkgPT09IG51bGwgfHwgXzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF80LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRDb21tYW5kID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfNTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9jaGF0L2NvbW1hbmRzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzUgPSBkZWNvZGVycy5HZXRDb21tYW5kUmVzcG9uc2UpID09PSBudWxsIHx8IF81ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29tbWFuZCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzY7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBhcmdzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXJncyxcbiAgICAgICAgICAgICAgICBzZXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zZXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQVVQnLCAnL2FwaS92Mi9jaGF0L2NvbW1hbmRzL3tuYW1lfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzYgPSBkZWNvZGVycy5VcGRhdGVDb21tYW5kUmVzcG9uc2UpID09PSBudWxsIHx8IF82ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwb3J0Q2hhbm5lbHMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF83O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBjaGFubmVsczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNoYW5uZWxzLFxuICAgICAgICAgICAgICAgIGNsZWFyX2RlbGV0ZWRfbWVzc2FnZV90ZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY2xlYXJfZGVsZXRlZF9tZXNzYWdlX3RleHQsXG4gICAgICAgICAgICAgICAgZXhwb3J0X3VzZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZXhwb3J0X3VzZXJzLFxuICAgICAgICAgICAgICAgIGluY2x1ZGVfc29mdF9kZWxldGVkX2NoYW5uZWxzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaW5jbHVkZV9zb2Z0X2RlbGV0ZWRfY2hhbm5lbHMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZV90cnVuY2F0ZWRfbWVzc2FnZXM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pbmNsdWRlX3RydW5jYXRlZF9tZXNzYWdlcyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudmVyc2lvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L2V4cG9ydF9jaGFubmVscycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfNyA9IGRlY29kZXJzLkV4cG9ydENoYW5uZWxzUmVzcG9uc2UpID09PSBudWxsIHx8IF83ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0RXhwb3J0Q2hhbm5lbHNTdGF0dXMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF84O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9leHBvcnRfY2hhbm5lbHMve2lkfScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoXzggPSBkZWNvZGVycy5HZXRFeHBvcnRDaGFubmVsc1N0YXR1c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzguY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5TWVtYmVycyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzk7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF5bG9hZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2NoYXQvbWVtYmVycycsIHVuZGVmaW5lZCwgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF85ID0gZGVjb2RlcnMuTWVtYmVyc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfOSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzkuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5TWVzc2FnZUhpc3RvcnkgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xMDtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyLFxuICAgICAgICAgICAgICAgIGxpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubGltaXQsXG4gICAgICAgICAgICAgICAgbmV4dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5leHQsXG4gICAgICAgICAgICAgICAgcHJldjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnByZXYsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy9oaXN0b3J5JywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xMCA9IGRlY29kZXJzLlF1ZXJ5TWVzc2FnZUhpc3RvcnlSZXNwb25zZSkgPT09IG51bGwgfHwgXzEwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTAuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZU1lc3NhZ2UgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xMTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGhhcmQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5oYXJkLFxuICAgICAgICAgICAgICAgIGRlbGV0ZWRfYnk6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZWxldGVkX2J5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfMTEgPSBkZWNvZGVycy5EZWxldGVNZXNzYWdlUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzExLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRNZXNzYWdlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTI7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBzaG93X2RlbGV0ZWRfbWVzc2FnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNob3dfZGVsZXRlZF9tZXNzYWdlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfMTIgPSBkZWNvZGVycy5HZXRNZXNzYWdlUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEyLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVNZXNzYWdlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTM7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBza2lwX2VucmljaF91cmw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5za2lwX2VucmljaF91cmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTMgPSBkZWNvZGVycy5VcGRhdGVNZXNzYWdlUmVzcG9uc2UpID09PSBudWxsIHx8IF8xMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzEzLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVNZXNzYWdlUGFydGlhbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzE0O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgc2tpcF9lbnJpY2hfdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2tpcF9lbnJpY2hfdXJsLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVuc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudW5zZXQsXG4gICAgICAgICAgICAgICAgc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2V0LFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUFVUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTQgPSBkZWNvZGVycy5VcGRhdGVNZXNzYWdlUGFydGlhbFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xNC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucnVuTWVzc2FnZUFjdGlvbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzE1O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZm9ybV9kYXRhOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZm9ybV9kYXRhLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfS9hY3Rpb24nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8xNSA9IGRlY29kZXJzLk1lc3NhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgXzE1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTUuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbW1pdE1lc3NhZ2UgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xNjtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge307XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L21lc3NhZ2VzL3tpZH0vY29tbWl0JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTYgPSBkZWNvZGVycy5NZXNzYWdlUmVzcG9uc2UpID09PSBudWxsIHx8IF8xNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzE2LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kUmVhY3Rpb24gPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8xNztcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVhY3Rpb24sXG4gICAgICAgICAgICAgICAgZW5mb3JjZV91bmlxdWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5lbmZvcmNlX3VuaXF1ZSxcbiAgICAgICAgICAgICAgICBza2lwX3B1c2g6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5za2lwX3B1c2gsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy97aWR9L3JlYWN0aW9uJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMTcgPSBkZWNvZGVycy5TZW5kUmVhY3Rpb25SZXNwb25zZSkgPT09IG51bGwgfHwgXzE3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMTcuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbGV0ZVJlYWN0aW9uID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTg7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCAnL2FwaS92Mi9jaGF0L21lc3NhZ2VzL3tpZH0vcmVhY3Rpb24ve3R5cGV9JywgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF8xOCA9IGRlY29kZXJzLlJlYWN0aW9uUmVtb3ZhbFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xOC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0UmVhY3Rpb25zID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMTk7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxpbWl0LFxuICAgICAgICAgICAgICAgIG9mZnNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm9mZnNldCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9jaGF0L21lc3NhZ2VzL3tpZH0vcmVhY3Rpb25zJywgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF8xOSA9IGRlY29kZXJzLkdldFJlYWN0aW9uc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMTkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8xOS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucXVlcnlSZWFjdGlvbnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8yMDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGxpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubGltaXQsXG4gICAgICAgICAgICAgICAgbmV4dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5leHQsXG4gICAgICAgICAgICAgICAgcHJldjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnByZXYsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfS9yZWFjdGlvbnMnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yMCA9IGRlY29kZXJzLlF1ZXJ5UmVhY3Rpb25zUmVzcG9uc2UpID09PSBudWxsIHx8IF8yMCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzIwLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGVNZXNzYWdlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjE7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBsYW5ndWFnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lmxhbmd1YWdlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfS90cmFuc2xhdGUnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yMSA9IGRlY29kZXJzLk1lc3NhZ2VSZXNwb25zZSkgPT09IG51bGwgfHwgXzIxID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMjEuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVuZGVsZXRlTWVzc2FnZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzIyO1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgc2tpcF9lbnJpY2hfdXJsOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2tpcF9lbnJpY2hfdXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve2lkfS91bmRlbGV0ZScsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzIyID0gZGVjb2RlcnMuVXBkYXRlTWVzc2FnZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8yMi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FzdFBvbGxWb3RlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjM7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tZXNzYWdlX2lkLFxuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICAgICAgdm90ZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnZvdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy97bWVzc2FnZV9pZH0vcG9sbHMve3BvbGxfaWR9L3ZvdGUnLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yMyA9IGRlY29kZXJzLlBvbGxWb3RlUmVzcG9uc2UpID09PSBudWxsIHx8IF8yMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzIzLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW1vdmVQb2xsVm90ZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzI0O1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZV9pZCxcbiAgICAgICAgICAgICAgICBwb2xsX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucG9sbF9pZCxcbiAgICAgICAgICAgICAgICB2b3RlX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qudm90ZV9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2NoYXQvbWVzc2FnZXMve21lc3NhZ2VfaWR9L3BvbGxzL3twb2xsX2lkfS92b3RlL3t2b3RlX2lkfScsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfMjQgPSBkZWNvZGVycy5Qb2xsVm90ZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMjQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8yNC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0UmVwbGllcyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzI1O1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5saW1pdCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5vZmZzZXQsXG4gICAgICAgICAgICAgICAgaWRfZ3RlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWRfZ3RlLFxuICAgICAgICAgICAgICAgIGlkX2d0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWRfZ3QsXG4gICAgICAgICAgICAgICAgaWRfbHRlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWRfbHRlLFxuICAgICAgICAgICAgICAgIGlkX2x0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWRfbHQsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdF9hZnRlcl9vcl9lcXVhbDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNyZWF0ZWRfYXRfYWZ0ZXJfb3JfZXF1YWwsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdF9hZnRlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNyZWF0ZWRfYXRfYWZ0ZXIsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdF9iZWZvcmVfb3JfZXF1YWw6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jcmVhdGVkX2F0X2JlZm9yZV9vcl9lcXVhbCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0X2JlZm9yZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNyZWF0ZWRfYXRfYmVmb3JlLFxuICAgICAgICAgICAgICAgIGlkX2Fyb3VuZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlkX2Fyb3VuZCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0X2Fyb3VuZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNyZWF0ZWRfYXRfYXJvdW5kLFxuICAgICAgICAgICAgICAgIHNvcnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zb3J0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcGFyZW50X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGFyZW50X2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9tZXNzYWdlcy97cGFyZW50X2lkfS9yZXBsaWVzJywgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF8yNSA9IGRlY29kZXJzLkdldFJlcGxpZXNSZXNwb25zZSkgPT09IG51bGwgfHwgXzI1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMjUuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5TWVzc2FnZUZsYWdzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjY7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF5bG9hZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2NoYXQvbW9kZXJhdGlvbi9mbGFncy9tZXNzYWdlJywgdW5kZWZpbmVkLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzI2ID0gZGVjb2RlcnMuUXVlcnlNZXNzYWdlRmxhZ3NSZXNwb25zZSkgPT09IG51bGwgfHwgXzI2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMjYuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm11dGVDaGFubmVsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjc7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5leHBpcmF0aW9uLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxfY2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNoYW5uZWxfY2lkcyxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L21vZGVyYXRpb24vbXV0ZS9jaGFubmVsJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yNyA9IGRlY29kZXJzLk11dGVDaGFubmVsUmVzcG9uc2UpID09PSBudWxsIHx8IF8yNyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzI3LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51bm11dGVDaGFubmVsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjg7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5leHBpcmF0aW9uLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxfY2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNoYW5uZWxfY2lkcyxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L21vZGVyYXRpb24vdW5tdXRlL2NoYW5uZWwnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzI4ID0gZGVjb2RlcnMuVW5tdXRlUmVzcG9uc2UpID09PSBudWxsIHx8IF8yOCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzI4LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVQb2xsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMjk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgICAgIGFsbG93X2Fuc3dlcnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hbGxvd19hbnN3ZXJzLFxuICAgICAgICAgICAgICAgIGFsbG93X3VzZXJfc3VnZ2VzdGVkX29wdGlvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hbGxvd191c2VyX3N1Z2dlc3RlZF9vcHRpb25zLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgZW5mb3JjZV91bmlxdWVfdm90ZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVuZm9yY2VfdW5pcXVlX3ZvdGUsXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgICBpc19jbG9zZWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pc19jbG9zZWQsXG4gICAgICAgICAgICAgICAgbWF4X3ZvdGVzX2FsbG93ZWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5tYXhfdm90ZXNfYWxsb3dlZCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB2b3RpbmdfdmlzaWJpbGl0eTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnZvdGluZ192aXNpYmlsaXR5LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGN1c3RvbTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmN1c3RvbSxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L3BvbGxzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8yOSA9IGRlY29kZXJzLlBvbGxSZXNwb25zZSkgPT09IG51bGwgfHwgXzI5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMjkuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvbGwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zMDtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmFtZSxcbiAgICAgICAgICAgICAgICBhbGxvd19hbnN3ZXJzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYWxsb3dfYW5zd2VycyxcbiAgICAgICAgICAgICAgICBhbGxvd191c2VyX3N1Z2dlc3RlZF9vcHRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYWxsb3dfdXNlcl9zdWdnZXN0ZWRfb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGVuZm9yY2VfdW5pcXVlX3ZvdGU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5lbmZvcmNlX3VuaXF1ZV92b3RlLFxuICAgICAgICAgICAgICAgIGlzX2Nsb3NlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmlzX2Nsb3NlZCxcbiAgICAgICAgICAgICAgICBtYXhfdm90ZXNfYWxsb3dlZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1heF92b3Rlc19hbGxvd2VkLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHZvdGluZ192aXNpYmlsaXR5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qudm90aW5nX3Zpc2liaWxpdHksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VzdG9tOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3VzdG9tLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUFVUJywgJy9hcGkvdjIvY2hhdC9wb2xscycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMzAgPSBkZWNvZGVycy5Qb2xsUmVzcG9uc2UpID09PSBudWxsIHx8IF8zMCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzMwLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5xdWVyeVBvbGxzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzE7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGxpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubGltaXQsXG4gICAgICAgICAgICAgICAgbmV4dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5leHQsXG4gICAgICAgICAgICAgICAgcHJldjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnByZXYsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvcG9sbHMvcXVlcnknLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zLCBib2R5KTtcbiAgICAgICAgICAgIChfMzEgPSBkZWNvZGVycy5RdWVyeVBvbGxzUmVzcG9uc2UpID09PSBudWxsIHx8IF8zMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzMxLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVQb2xsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzI7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnREVMRVRFJywgJy9hcGkvdjIvY2hhdC9wb2xscy97cG9sbF9pZH0nLCBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzMyID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF8zMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzMyLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRQb2xsID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzM7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9wb2xscy97cG9sbF9pZH0nLCBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzMzID0gZGVjb2RlcnMuUG9sbFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMzMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8zMy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlUG9sbFBhcnRpYWwgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zNDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcG9sbF9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBvbGxfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1bnNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVuc2V0LFxuICAgICAgICAgICAgICAgIHNldDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNldCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BBVENIJywgJy9hcGkvdjIvY2hhdC9wb2xscy97cG9sbF9pZH0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF8zNCA9IGRlY29kZXJzLlBvbGxSZXNwb25zZSkgPT09IG51bGwgfHwgXzM0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMzQuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZVBvbGxPcHRpb24gPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zNTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcG9sbF9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBvbGxfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGV4dCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIGN1c3RvbTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmN1c3RvbSxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L3BvbGxzL3twb2xsX2lkfS9vcHRpb25zJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMzUgPSBkZWNvZGVycy5Qb2xsT3B0aW9uUmVzcG9uc2UpID09PSBudWxsIHx8IF8zNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzM1LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVQb2xsT3B0aW9uID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzY7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgICB0ZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGV4dCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICBjdXN0b206IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jdXN0b20sXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQVVQnLCAnL2FwaS92Mi9jaGF0L3BvbGxzL3twb2xsX2lkfS9vcHRpb25zJywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfMzYgPSBkZWNvZGVycy5Qb2xsT3B0aW9uUmVzcG9uc2UpID09PSBudWxsIHx8IF8zNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzM2LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWxldGVQb2xsT3B0aW9uID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzc7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgICAgIG9wdGlvbl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm9wdGlvbl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0RFTEVURScsICcvYXBpL3YyL2NoYXQvcG9sbHMve3BvbGxfaWR9L29wdGlvbnMve29wdGlvbl9pZH0nLCBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzM3ID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF8zNyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzM3LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRQb2xsT3B0aW9uID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfMzg7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBvbGxfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wb2xsX2lkLFxuICAgICAgICAgICAgICAgIG9wdGlvbl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm9wdGlvbl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ0dFVCcsICcvYXBpL3YyL2NoYXQvcG9sbHMve3BvbGxfaWR9L29wdGlvbnMve29wdGlvbl9pZH0nLCBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICAoXzM4ID0gZGVjb2RlcnMuUG9sbE9wdGlvblJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfMzggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8zOC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucXVlcnlQb2xsVm90ZXMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF8zOTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcG9sbF9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBvbGxfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxpbWl0LFxuICAgICAgICAgICAgICAgIG5leHQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uZXh0LFxuICAgICAgICAgICAgICAgIHByZXY6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wcmV2LFxuICAgICAgICAgICAgICAgIHNvcnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zb3J0LFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmZpbHRlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L3BvbGxzL3twb2xsX2lkfS92b3RlcycsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBib2R5KTtcbiAgICAgICAgICAgIChfMzkgPSBkZWNvZGVycy5Qb2xsVm90ZXNSZXNwb25zZSkgPT09IG51bGwgfHwgXzM5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfMzkuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5QmFubmVkVXNlcnMgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF80MDtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wYXlsb2FkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9xdWVyeV9iYW5uZWRfdXNlcnMnLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfNDAgPSBkZWNvZGVycy5RdWVyeUJhbm5lZFVzZXJzUmVzcG9uc2UpID09PSBudWxsIHx8IF80MCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQwLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF80MTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wYXlsb2FkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvY2hhdC9zZWFyY2gnLCB1bmRlZmluZWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIChfNDEgPSBkZWNvZGVycy5TZWFyY2hSZXNwb25zZSkgPT09IG51bGwgfHwgXzQxID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfNDEuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnF1ZXJ5VGhyZWFkcyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzQyO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxpbWl0LFxuICAgICAgICAgICAgICAgIG1lbWJlcl9saW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lbWJlcl9saW1pdCxcbiAgICAgICAgICAgICAgICBuZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmV4dCxcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudF9saW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnBhcnRpY2lwYW50X2xpbWl0LFxuICAgICAgICAgICAgICAgIHByZXY6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5wcmV2LFxuICAgICAgICAgICAgICAgIHJlcGx5X2xpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVwbHlfbGltaXQsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvY2hhdC90aHJlYWRzJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF80MiA9IGRlY29kZXJzLlF1ZXJ5VGhyZWFkc1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfNDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF80Mi5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0VGhyZWFkID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfNDM7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY29ubmVjdGlvbl9pZCxcbiAgICAgICAgICAgICAgICByZXBseV9saW1pdDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlcGx5X2xpbWl0LFxuICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50X2xpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGFydGljaXBhbnRfbGltaXQsXG4gICAgICAgICAgICAgICAgbWVtYmVyX2xpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVtYmVyX2xpbWl0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZV9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1lc3NhZ2VfaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9jaGF0L3RocmVhZHMve21lc3NhZ2VfaWR9JywgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF80MyA9IGRlY29kZXJzLkdldFRocmVhZFJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfNDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF80My5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlVGhyZWFkUGFydGlhbCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzQ0O1xuICAgICAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubWVzc2FnZV9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVuc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudW5zZXQsXG4gICAgICAgICAgICAgICAgc2V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc2V0LFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUEFUQ0gnLCAnL2FwaS92Mi9jaGF0L3RocmVhZHMve21lc3NhZ2VfaWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfNDQgPSBkZWNvZGVycy5VcGRhdGVUaHJlYWRQYXJ0aWFsUmVzcG9uc2UpID09PSBudWxsIHx8IF80NCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQ0LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51bnJlYWRDb3VudHMgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzQ1O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9jaGF0L3VucmVhZCcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfNDUgPSBkZWNvZGVycy5XcmFwcGVkVW5yZWFkQ291bnRzUmVzcG9uc2UpID09PSBudWxsIHx8IF80NSA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQ1LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51bnJlYWRDb3VudHNCYXRjaCA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgXzQ2O1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkczogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL2NoYXQvdW5yZWFkX2JhdGNoJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF80NiA9IGRlY29kZXJzLlVucmVhZENvdW50c0JhdGNoUmVzcG9uc2UpID09PSBudWxsIHx8IF80NiA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQ2LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kVXNlckN1c3RvbUV2ZW50ID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfNDc7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5ldmVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9jaGF0L3VzZXJzL3t1c2VyX2lkfS9ldmVudCcsIHBhdGhQYXJhbXMsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoXzQ3ID0gZGVjb2RlcnMuUmVzcG9uc2UpID09PSBudWxsIHx8IF80NyA9PT0gdm9pZCAwID8gdm9pZCAwIDogXzQ3LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIENoYW5uZWxBcGkge1xuICAgIGNvbnN0cnVjdG9yKGNoYXRBcGksIHR5cGUsIGlkKSB7XG4gICAgICAgIHRoaXMuY2hhdEFwaSA9IGNoYXRBcGk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5kZWxldGUgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaGFubmVsIGlzbid0IHlldCBjcmVhdGVkLCBjYWxsIGdldE9yQ3JlYXRlRGlzdGluY3RDaGFubmVsKCkgYmVmb3JlIHRoaXMgb3BlcmF0aW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0QXBpLmRlbGV0ZUNoYW5uZWwoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZUNoYW5uZWxQYXJ0aWFsID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCBpc24ndCB5ZXQgY3JlYXRlZCwgY2FsbCBnZXRPckNyZWF0ZURpc3RpbmN0Q2hhbm5lbCgpIGJlZm9yZSB0aGlzIG9wZXJhdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaS51cGRhdGVDaGFubmVsUGFydGlhbChPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCBpc24ndCB5ZXQgY3JlYXRlZCwgY2FsbCBnZXRPckNyZWF0ZURpc3RpbmN0Q2hhbm5lbCgpIGJlZm9yZSB0aGlzIG9wZXJhdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaS51cGRhdGVDaGFubmVsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaGFubmVsIGlzbid0IHlldCBjcmVhdGVkLCBjYWxsIGdldE9yQ3JlYXRlRGlzdGluY3RDaGFubmVsKCkgYmVmb3JlIHRoaXMgb3BlcmF0aW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0QXBpLnNlbmRFdmVudChPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVsZXRlRmlsZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuZGVsZXRlRmlsZShPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBsb2FkRmlsZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkudXBsb2FkRmlsZShPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGlkZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuaGlkZUNoYW5uZWwoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlbGV0ZUltYWdlID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCBpc24ndCB5ZXQgY3JlYXRlZCwgY2FsbCBnZXRPckNyZWF0ZURpc3RpbmN0Q2hhbm5lbCgpIGJlZm9yZSB0aGlzIG9wZXJhdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaS5kZWxldGVJbWFnZShPYmplY3QuYXNzaWduKHsgaWQ6IHRoaXMuaWQsIHR5cGU6IHRoaXMudHlwZSB9LCByZXF1ZXN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBsb2FkSW1hZ2UgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaGFubmVsIGlzbid0IHlldCBjcmVhdGVkLCBjYWxsIGdldE9yQ3JlYXRlRGlzdGluY3RDaGFubmVsKCkgYmVmb3JlIHRoaXMgb3BlcmF0aW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0QXBpLnVwbG9hZEltYWdlKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVNZW1iZXJQYXJ0aWFsID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCBpc24ndCB5ZXQgY3JlYXRlZCwgY2FsbCBnZXRPckNyZWF0ZURpc3RpbmN0Q2hhbm5lbCgpIGJlZm9yZSB0aGlzIG9wZXJhdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaS51cGRhdGVNZW1iZXJQYXJ0aWFsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuc2VuZE1lc3NhZ2UoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldE1hbnlNZXNzYWdlcyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuZ2V0TWFueU1lc3NhZ2VzKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRPckNyZWF0ZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuZ2V0T3JDcmVhdGVDaGFubmVsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXJrUmVhZCA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkubWFya1JlYWQoT2JqZWN0LmFzc2lnbih7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGUgfSwgcmVxdWVzdCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3cgPSAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaGFubmVsIGlzbid0IHlldCBjcmVhdGVkLCBjYWxsIGdldE9yQ3JlYXRlRGlzdGluY3RDaGFubmVsKCkgYmVmb3JlIHRoaXMgb3BlcmF0aW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0QXBpLnNob3dDaGFubmVsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cnVuY2F0ZSA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYW5uZWwgaXNuJ3QgeWV0IGNyZWF0ZWQsIGNhbGwgZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoKSBiZWZvcmUgdGhpcyBvcGVyYXRpb25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkudHJ1bmNhdGVDaGFubmVsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXJrVW5yZWFkID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCBpc24ndCB5ZXQgY3JlYXRlZCwgY2FsbCBnZXRPckNyZWF0ZURpc3RpbmN0Q2hhbm5lbCgpIGJlZm9yZSB0aGlzIG9wZXJhdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaS5tYXJrVW5yZWFkKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIHJlcXVlc3QpKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNsYXNzIFN0cmVhbUNoYW5uZWwgZXh0ZW5kcyBDaGFubmVsQXBpIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5nZXRPckNyZWF0ZSA9IChjaGFubmVsX2dldF9vcl9jcmVhdGVfcmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhdEFwaVxuICAgICAgICAgICAgICAgICAgICAuZ2V0T3JDcmVhdGVEaXN0aW5jdENoYW5uZWwoT2JqZWN0LmFzc2lnbih7IHR5cGU6IHRoaXMudHlwZSB9LCBjaGFubmVsX2dldF9vcl9jcmVhdGVfcmVxdWVzdCkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaWQgPSAoX2EgPSByZXNwb25zZS5jaGFubmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkuZ2V0T3JDcmVhdGVDaGFubmVsKE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sIGNoYW5uZWxfZ2V0X29yX2NyZWF0ZV9yZXF1ZXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBjaWQoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnR5cGV9OiR7dGhpcy5pZH1gO1xuICAgIH1cbiAgICBxdWVyeU1lbWJlcnMocmVxdWVzdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXRBcGkucXVlcnlNZW1iZXJzKHtcbiAgICAgICAgICAgIHBheWxvYWQ6IE9iamVjdC5hc3NpZ24oeyBpZDogdGhpcy5pZCwgdHlwZTogdGhpcy50eXBlIH0sICgoX2EgPSByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucGF5bG9hZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogeyBmaWx0ZXJfY29uZGl0aW9uczoge30gfSkpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFN0cmVhbUNoYXRDbGllbnQgZXh0ZW5kcyBDaGF0QXBpIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFubmVsID0gKHR5cGUsIGlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbUNoYW5uZWwodGhpcywgdHlwZSwgaWQpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuY2xhc3MgTW9kZXJhdGlvbkFwaSBleHRlbmRzIEJhc2VBcGkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmJhbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHRhcmdldF91c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGFyZ2V0X3VzZXJfaWQsXG4gICAgICAgICAgICAgICAgYmFubmVkX2J5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmFubmVkX2J5X2lkLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxfY2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY2hhbm5lbF9jaWQsXG4gICAgICAgICAgICAgICAgaXBfYmFuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaXBfYmFuLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlYXNvbixcbiAgICAgICAgICAgICAgICBzaGFkb3c6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5zaGFkb3csXG4gICAgICAgICAgICAgICAgdGltZW91dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgYmFubmVkX2J5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmFubmVkX2J5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vYmFuJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9hID0gZGVjb2RlcnMuQmFuUmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hlY2sgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBjb25maWdfa2V5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY29uZmlnX2tleSxcbiAgICAgICAgICAgICAgICBlbnRpdHlfY3JlYXRvcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV9jcmVhdG9yX2lkLFxuICAgICAgICAgICAgICAgIGVudGl0eV9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV9pZCxcbiAgICAgICAgICAgICAgICBlbnRpdHlfdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV90eXBlLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIG1vZGVyYXRpb25fcGF5bG9hZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1vZGVyYXRpb25fcGF5bG9hZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL2NoZWNrJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9iID0gZGVjb2RlcnMuQ2hlY2tSZXNwb25zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cHNlcnRDb25maWcgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9jO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5rZXksXG4gICAgICAgICAgICAgICAgYXN5bmM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5hc3luYyxcbiAgICAgICAgICAgICAgICBhdXRvbW9kX3BsYXRmb3JtX2NpcmN1bXZlbnRpb25fY29uZmlnOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b21vZF9wbGF0Zm9ybV9jaXJjdW12ZW50aW9uX2NvbmZpZyxcbiAgICAgICAgICAgICAgICBhdXRvbW9kX3NlbWFudGljX2ZpbHRlcnNfY29uZmlnOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYXV0b21vZF9zZW1hbnRpY19maWx0ZXJzX2NvbmZpZyxcbiAgICAgICAgICAgICAgICBhdXRvbW9kX3RveGljaXR5X2NvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF1dG9tb2RfdG94aWNpdHlfY29uZmlnLFxuICAgICAgICAgICAgICAgIGF3c19yZWtfb2dfbml0aW9uX2NvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmF3c19yZWtfb2dfbml0aW9uX2NvbmZpZyxcbiAgICAgICAgICAgICAgICBibG9ja19saXN0X2NvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJsb2NrX2xpc3RfY29uZmlnLFxuICAgICAgICAgICAgICAgIGJvZHlndWFyZF9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5ib2R5Z3VhcmRfY29uZmlnLFxuICAgICAgICAgICAgICAgIGdvX29nX2xlX3Zpc2lvbl9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5nb19vZ19sZV92aXNpb25fY29uZmlnLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5X2ZpbHRlcl9jb25maWc6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC52ZWxvY2l0eV9maWx0ZXJfY29uZmlnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vY29uZmlnJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9jID0gZGVjb2RlcnMuVXBzZXJ0Q29uZmlnUmVzcG9uc2UpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0Q29uZmlnID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfZDtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAga2V5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Qua2V5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvbW9kZXJhdGlvbi9jb25maWcve2tleX0nLCBwYXRoUGFyYW1zLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgKF9kID0gZGVjb2RlcnMuR2V0Q29uZmlnUmVzcG9uc2UpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VzdG9tQ2hlY2sgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9lO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICBlbnRpdHlfY3JlYXRvcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV9jcmVhdG9yX2lkLFxuICAgICAgICAgICAgICAgIGVudGl0eV9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV9pZCxcbiAgICAgICAgICAgICAgICBlbnRpdHlfdHlwZTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmVudGl0eV90eXBlLFxuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnJlYXNvbixcbiAgICAgICAgICAgICAgICByZWNvbW1lbmRlZF9hY3Rpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5yZWNvbW1lbmRlZF9hY3Rpb24sXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgbW9kZXJhdGlvbl9wYXlsb2FkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubW9kZXJhdGlvbl9wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vY3VzdG9tX2NoZWNrJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9lID0gZGVjb2RlcnMuQ3VzdG9tQ2hlY2tSZXNwb25zZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52MkRlbGV0ZVRlbXBsYXRlID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9mO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdERUxFVEUnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL2ZlZWRzX21vZGVyYXRpb25fdGVtcGxhdGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX2YgPSBkZWNvZGVycy5EZWxldGVNb2RlcmF0aW9uVGVtcGxhdGVSZXNwb25zZSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52MlF1ZXJ5VGVtcGxhdGVzID0gKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9nO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL2ZlZWRzX21vZGVyYXRpb25fdGVtcGxhdGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX2cgPSBkZWNvZGVycy5RdWVyeUZlZWRNb2RlcmF0aW9uVGVtcGxhdGVzUmVzcG9uc2UpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudjJVcHNlcnRUZW1wbGF0ZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2g7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5uYW1lLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNvbmZpZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL2ZlZWRzX21vZGVyYXRpb25fdGVtcGxhdGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2ggPSBkZWNvZGVycy5VcHNlcnRNb2RlcmF0aW9uVGVtcGxhdGVSZXNwb25zZSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mbGFnID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfajtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgZW50aXR5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZW50aXR5X2lkLFxuICAgICAgICAgICAgICAgIGVudGl0eV90eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZW50aXR5X3R5cGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucmVhc29uLFxuICAgICAgICAgICAgICAgIGVudGl0eV9jcmVhdG9yX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZW50aXR5X2NyZWF0b3JfaWQsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgY3VzdG9tOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3VzdG9tLFxuICAgICAgICAgICAgICAgIG1vZGVyYXRpb25fcGF5bG9hZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm1vZGVyYXRpb25fcGF5bG9hZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL2ZsYWcnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX2ogPSBkZWNvZGVycy5GbGFnUmVzcG9uc2UpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucXVlcnlNb2RlcmF0aW9uTG9ncyA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2s7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGxpbWl0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubGltaXQsXG4gICAgICAgICAgICAgICAgbmV4dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5leHQsXG4gICAgICAgICAgICAgICAgcHJldjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnByZXYsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vbG9ncycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfayA9IGRlY29kZXJzLlF1ZXJ5TW9kZXJhdGlvbkxvZ3NSZXNwb25zZSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRNb2RlcmF0b3JTdGF0cyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvbW9kZXJhdGlvbi9tb2RlcmF0b3Jfc3RhdHMnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAoX2wgPSBkZWNvZGVycy5Nb2RlcmF0b3JTdGF0c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm11dGUgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9tO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfaWRzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGFyZ2V0X2lkcyxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGltZW91dCxcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICB1c2VyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL211dGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYm9keSk7XG4gICAgICAgICAgICAoX20gPSBkZWNvZGVycy5NdXRlUmVzcG9uc2UpID09PSBudWxsIHx8IF9tID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbS5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0UXVldWVTdGF0cyA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfbztcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvbW9kZXJhdGlvbi9xdWV1ZV9zdGF0cycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfbyA9IGRlY29kZXJzLlF1ZXVlU3RhdHNSZXNwb25zZSkgPT09IG51bGwgfHwgX28gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vLmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5xdWVyeVJldmlld1F1ZXVlID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfcDtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5saW1pdCxcbiAgICAgICAgICAgICAgICBsb2NrX21vZGVyYXRvcl9kdXJhdGlvbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmxvY2tfbW9kZXJhdG9yX2R1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGxvY2tfbW9kZXJhdG9yX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubG9ja19tb2RlcmF0b3JfaWQsXG4gICAgICAgICAgICAgICAgbmV4dDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lm5leHQsXG4gICAgICAgICAgICAgICAgcHJldjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnByZXYsXG4gICAgICAgICAgICAgICAgc3RhdHNfb25seTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnN0YXRzX29ubHksXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgc29ydDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnNvcnQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vcmV2aWV3X3F1ZXVlJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF9wID0gZGVjb2RlcnMuUXVlcnlSZXZpZXdRdWV1ZVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldFJldmlld1F1ZXVlSXRlbSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3E7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdHRVQnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL3Jldmlld19xdWV1ZS97aWR9JywgcGF0aFBhcmFtcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIChfcSA9IGRlY29kZXJzLkdldFJldmlld1F1ZXVlSXRlbVJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfcSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3EuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN1Ym1pdEFjdGlvbiA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3I7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGFjdGlvbl90eXBlOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYWN0aW9uX3R5cGUsXG4gICAgICAgICAgICAgICAgaXRlbV9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0Lml0ZW1faWQsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgYmFuOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuYmFuLFxuICAgICAgICAgICAgICAgIGN1c3RvbTogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmN1c3RvbSxcbiAgICAgICAgICAgICAgICBkZWxldGVfYWN0aXZpdHk6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZWxldGVfYWN0aXZpdHksXG4gICAgICAgICAgICAgICAgZGVsZXRlX21lc3NhZ2U6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZWxldGVfbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBkZWxldGVfcmVhY3Rpb246IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZWxldGVfcmVhY3Rpb24sXG4gICAgICAgICAgICAgICAgZGVsZXRlX3VzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5kZWxldGVfdXNlcixcbiAgICAgICAgICAgICAgICB1bmJhbjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVuYmFuLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vc3VibWl0X2FjdGlvbicsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfciA9IGRlY29kZXJzLlN1Ym1pdEFjdGlvblJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3IuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVuYmFuID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfcztcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHRhcmdldF91c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudGFyZ2V0X3VzZXJfaWQsXG4gICAgICAgICAgICAgICAgY2hhbm5lbF9jaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5jaGFubmVsX2NpZCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2J5OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuY3JlYXRlZF9ieSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHVuYmFubmVkX2J5X2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudW5iYW5uZWRfYnlfaWQsXG4gICAgICAgICAgICAgICAgdW5iYW5uZWRfYnk6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51bmJhbm5lZF9ieSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuc2VuZFJlcXVlc3QoJ1BPU1QnLCAnL2FwaS92Mi9tb2RlcmF0aW9uL3VuYmFuJywgdW5kZWZpbmVkLCBxdWVyeVBhcmFtcywgYm9keSk7XG4gICAgICAgICAgICAoX3MgPSBkZWNvZGVycy5VbmJhblJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3MuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVubXV0ZSA9IChyZXF1ZXN0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX3Q7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIHRhcmdldF9pZHM6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC50YXJnZXRfaWRzLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyX2lkLFxuICAgICAgICAgICAgICAgIHVzZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnUE9TVCcsICcvYXBpL3YyL21vZGVyYXRpb24vdW5tdXRlJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJvZHkpO1xuICAgICAgICAgICAgKF90ID0gZGVjb2RlcnMuVW5tdXRlUmVzcG9uc2UpID09PSBudWxsIHx8IF90ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdC5jYWxsKGRlY29kZXJzLCByZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLmJvZHkpLCB7IG1ldGFkYXRhOiByZXNwb25zZS5tZXRhZGF0YSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucXVlcnlVc2FnZVN0YXRzID0gKHJlcXVlc3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfdTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5saW1pdCxcbiAgICAgICAgICAgICAgICBuZXh0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QubmV4dCxcbiAgICAgICAgICAgICAgICBwcmV2OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QucHJldixcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QudXNlcl9pZCxcbiAgICAgICAgICAgICAgICBzb3J0OiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3Quc29ydCxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5maWx0ZXIsXG4gICAgICAgICAgICAgICAgdXNlcjogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLnNlbmRSZXF1ZXN0KCdQT1NUJywgJy9hcGkvdjIvbW9kZXJhdGlvbi91c2FnZV9zdGF0cycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBib2R5KTtcbiAgICAgICAgICAgIChfdSA9IGRlY29kZXJzLlF1ZXJ5VXNhZ2VTdGF0c1Jlc3BvbnNlKSA9PT0gbnVsbCB8fCBfdSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3UuY2FsbChkZWNvZGVycywgcmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5ib2R5KSwgeyBtZXRhZGF0YTogcmVzcG9uc2UubWV0YWRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldFVzZXJSZXBvcnQgPSAocmVxdWVzdCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF92O1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgY3JlYXRlX3VzZXJfaWZfbm90X2V4aXN0czogcmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmNyZWF0ZV91c2VyX2lmX25vdF9leGlzdHMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZV91c2VyX211dGVzOiByZXF1ZXN0ID09PSBudWxsIHx8IHJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlcXVlc3QuaW5jbHVkZV91c2VyX211dGVzLFxuICAgICAgICAgICAgICAgIGluY2x1ZGVfdXNlcl9ibG9ja3M6IHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5pbmNsdWRlX3VzZXJfYmxvY2tzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5zZW5kUmVxdWVzdCgnR0VUJywgJy9hcGkvdjIvbW9kZXJhdGlvbi91c2VyX3JlcG9ydCcsIHVuZGVmaW5lZCwgcXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgKF92ID0gZGVjb2RlcnMuR2V0VXNlck1vZGVyYXRpb25SZXBvcnRSZXNwb25zZSkgPT09IG51bGwgfHwgX3YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF92LmNhbGwoZGVjb2RlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuYm9keSksIHsgbWV0YWRhdGE6IHJlc3BvbnNlLm1ldGFkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFN0cmVhbU1vZGVyYXRpb25DbGllbnQgZXh0ZW5kcyBNb2RlcmF0aW9uQXBpIHtcbn1cblxuY2xhc3MgU3RyZWFtQ2xpZW50IGV4dGVuZHMgQ29tbW9uQXBpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcGlLZXlcbiAgICAgKiBAcGFyYW0gc2VjcmV0XG4gICAgICogQHBhcmFtIGNvbmZpZyBjb25maWcgb2JqZWN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBzZWNyZXQsIGNvbmZpZykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgdG9rZW4gPSBKV1RTZXJ2ZXJUb2tlbihzZWNyZXQpO1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gKF9hID0gY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLnRpbWVvdXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFN0cmVhbUNsaWVudC5ERUZBVUxUX1RJTUVPVVQ7XG4gICAgICAgIGNvbnN0IGNoYXRCYXNlVXJsID0gKF9iID0gY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmJhc2VQYXRoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnaHR0cHM6Ly9jaGF0LnN0cmVhbS1pby1hcGkuY29tJztcbiAgICAgICAgY29uc3QgdmlkZW9CYXNlVXJsID0gKF9jID0gY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmJhc2VQYXRoKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnaHR0cHM6Ly92aWRlby5zdHJlYW0taW8tYXBpLmNvbSc7XG4gICAgICAgIHN1cGVyKHsgYXBpS2V5LCB0b2tlbiwgdGltZW91dCwgYmFzZVVybDogY2hhdEJhc2VVcmwgfSk7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgICB0aGlzLnNlY3JldCA9IHNlY3JldDtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnVwc2VydFVzZXJzID0gKHVzZXJzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgICAgICAgICB1c2Vycy5mb3JFYWNoKCh1KSA9PiB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZFt1LmlkXSA9IHU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVVzZXJzKHsgdXNlcnM6IHBheWxvYWQgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucXVlcnlCYW5uZWRVc2VycyA9IChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGF0LnF1ZXJ5QmFubmVkVXNlcnMocmVxdWVzdCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcGF5bG9hZFxuICAgICAgICAgKiAtIHVzZXJfaWQgLSB0aGUgaWQgb2YgdGhlIHVzZXIgdGhlIHRva2VuIGlzIGZvclxuICAgICAgICAgKiAtIHZhbGlkaXR5X2luX3NlY29uZHMgLSBob3cgbWFueSBzZWNvbmRzIGlzIHRoZSB0b2tlbiB2YWxpZCBmb3IgKHN0YXJ0aW5nIGZyb20gaXNzdWVkIGF0KSwgYnkgZGVmYXVsdCBpdCdzIDEgaG91ciwgZGljYXJkZWQgaWYgZXhwIGlzIHByb3ZpZGVkXG4gICAgICAgICAqIC0gZXhwIC0gd2hlbiB0aGUgdG9rZW4gZXhwaXJlcywgdW5peCB0aW1lc3RhbXAgaW4gc2Vjb25kc1xuICAgICAgICAgKiAtIGlhdCAtIGlzc3VlZCBhdCBkYXRlIG9mIHRoZSB0b2tlbiwgdW5peCB0aW1lc3RhbXAgaW4gc2Vjb25kcywgYnkgZGVmYXVsdCBpdCdzIG5vd1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZW5lcmF0ZVVzZXJUb2tlbiA9IChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRJYXQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gMTAwMCkgLyAxMDAwKTtcbiAgICAgICAgICAgIHBheWxvYWQuaWF0ID0gKF9hID0gcGF5bG9hZC5pYXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRlZmF1bHRJYXQ7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGl0eUluU2Vjb25kcyA9IChfYiA9IHBheWxvYWQudmFsaWRpdHlfaW5fc2Vjb25kcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNjAgKiA2MDtcbiAgICAgICAgICAgIHBheWxvYWQuZXhwID0gKF9jID0gcGF5bG9hZC5leHApICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHBheWxvYWQuaWF0ICsgdmFsaWRpdHlJblNlY29uZHM7XG4gICAgICAgICAgICByZXR1cm4gSldUVXNlclRva2VuKHRoaXMuc2VjcmV0LCBwYXlsb2FkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBwYXlsb2FkXG4gICAgICAgICAqIC0gdXNlcl9pZCAtIHRoZSBpZCBvZiB0aGUgdXNlciB0aGUgdG9rZW4gaXMgZm9yXG4gICAgICAgICAqIC0gdmFsaWRpdHlfaW5fc2Vjb25kcyAtIGhvdyBtYW55IHNlY29uZHMgaXMgdGhlIHRva2VuIHZhbGlkIGZvciAoc3RhcnRpbmcgZnJvbSBpc3N1ZWQgYXQpLCBieSBkZWZhdWx0IGl0J3MgMSBob3VyLCBkaWNhcmRlZCBpZiBleHAgaXMgcHJvdmlkZWRcbiAgICAgICAgICogLSBleHAgLSB3aGVuIHRoZSB0b2tlbiBleHBpcmVzLCB1bml4IHRpbWVzdGFtcCBpbiBzZWNvbmRzXG4gICAgICAgICAqIC0gaWF0IC0gaXNzdWVkIGF0IGRhdGUgb2YgdGhlIHRva2VuLCB1bml4IHRpbWVzdGFtcCBpbiBzZWNvbmRzLCBieSBkZWZhdWx0IGl0J3Mgbm93XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdlbmVyYXRlQ2FsbFRva2VuID0gKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlVXNlclRva2VuKHBheWxvYWQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHVzZXJJRFxuICAgICAgICAgKiBAcGFyYW0gZXhwXG4gICAgICAgICAqIEBwYXJhbSBpYXQgZGVwcmVjYXRlZCwgdGhlIGRlZmF1bHQgZGF0ZSB3aWxsIGJlIHNldCBpbnRlcm5hbGx5XG4gICAgICAgICAqIEByZXR1cm5zXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBnZW5lcmF0ZVVzZXJUb2tlbiBpbnN0ZWFkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZVRva2VuID0gKHVzZXJJRCwgZXhwID0gTWF0aC5yb3VuZChEYXRlLm5vdygpIC8gMTAwMCkgKyA2MCAqIDYwLCBpYXQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gMTAwMCkgLyAxMDAwKSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySUQsXG4gICAgICAgICAgICAgICAgZXhwLFxuICAgICAgICAgICAgICAgIGlhdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSldUVXNlclRva2VuKHRoaXMuc2VjcmV0LCBwYXlsb2FkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB1c2VySURcbiAgICAgICAgICogQHBhcmFtIGNhbGxfY2lkc1xuICAgICAgICAgKiBAcGFyYW0gZXhwXG4gICAgICAgICAqIEBwYXJhbSBpYXQgdGhpcyBpcyBkZXByZWNhdGVkLCB0aGUgY3VycmVudCBkYXRlIHdpbGwgYmUgc2V0IGludGVybmFsbHlcbiAgICAgICAgICogQHJldHVybnNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIGdlbmVyYXRlQ2FsbFRva2VuIGluc3RlYWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlQ2FsbFRva2VuID0gKHVzZXJJZE9yT2JqZWN0LCBjYWxsX2NpZHMsIGV4cCA9IE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDApICsgNjAgKiA2MCwgaWF0ID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIDEwMDApIC8gMTAwMCkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgZXhwLFxuICAgICAgICAgICAgICAgIGlhdCxcbiAgICAgICAgICAgICAgICBjYWxsX2NpZHMsXG4gICAgICAgICAgICAgICAgdXNlcl9pZDogdHlwZW9mIHVzZXJJZE9yT2JqZWN0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IHVzZXJJZE9yT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIDogdXNlcklkT3JPYmplY3QudXNlcl9pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVzZXJJZE9yT2JqZWN0ID09PSAnb2JqZWN0JyAmJiB1c2VySWRPck9iamVjdC5yb2xlKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5yb2xlID0gdXNlcklkT3JPYmplY3Qucm9sZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKV1RVc2VyVG9rZW4odGhpcy5zZWNyZXQsIHBheWxvYWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZlcmlmeVdlYmhvb2sgPSAocmVxdWVzdEJvZHksIHhTaWduYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IEJ1ZmZlci5mcm9tKHRoaXMuc2VjcmV0LCAndXRmOCcpO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyeXB0b1xuICAgICAgICAgICAgICAgIC5jcmVhdGVIbWFjKCdzaGEyNTYnLCBrZXkpXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShyZXF1ZXN0Qm9keSlcbiAgICAgICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by50aW1pbmdTYWZlRXF1YWwoQnVmZmVyLmZyb20oaGFzaCksIEJ1ZmZlci5mcm9tKHhTaWduYXR1cmUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudmlkZW8gPSBuZXcgU3RyZWFtVmlkZW9DbGllbnQoe1xuICAgICAgICAgICAgYXBpS2V5LFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICB0aW1lb3V0LFxuICAgICAgICAgICAgYmFzZVVybDogdmlkZW9CYXNlVXJsLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGF0ID0gbmV3IFN0cmVhbUNoYXRDbGllbnQoe1xuICAgICAgICAgICAgYXBpS2V5LFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICB0aW1lb3V0LFxuICAgICAgICAgICAgYmFzZVVybDogY2hhdEJhc2VVcmwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1vZGVyYXRpb24gPSBuZXcgU3RyZWFtTW9kZXJhdGlvbkNsaWVudCh7XG4gICAgICAgICAgICBhcGlLZXksXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgICAgICBiYXNlVXJsOiBjaGF0QmFzZVVybCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuU3RyZWFtQ2xpZW50LkRFRkFVTFRfVElNRU9VVCA9IDMwMDA7XG5cbmV4cG9ydCB7IE93bkNhcGFiaWxpdHksIFN0cmVhbUNhbGwsIFN0cmVhbUNoYW5uZWwsIFN0cmVhbUNoYXRDbGllbnQsIFN0cmVhbUNsaWVudCwgU3RyZWFtVmlkZW9DbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@stream-io/node-sdk/dist/index.es.js\n");

/***/ })

};
;